package com.github.schmittjoaopedro.tsp;

import com.github.schmittjoaopedro.tsp.algorithms.MMAS_MEM_MADTSP;
import com.github.schmittjoaopedro.tsp.graph.Graph;
import com.github.schmittjoaopedro.tsp.graph.GraphFactory;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.assertj.core.api.Assertions.assertThat;

public class MMAS_MEM_MADTSP_Test {

    private String kroA100;

    private String kroA150;

    @Before
    public void beforeClass() {
        kroA100 = getClass().getClassLoader().getResource("tsp/KroA100.tsp").getFile();
        kroA150 = getClass().getClassLoader().getResource("tsp/kroA150.tsp").getFile();
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 10, 1.0, 5.0);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(24292.93172312284);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(24292.93172312284);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 11]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 31671.967452268564, 1903.8917677261363, 0.0, 54.80326530612245, 28431.703154969287);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 5, 27066.8381214856, 2219.5948450856677, 0.645, 6.95265306122449, 25339.235951835213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 10, 25351.425358005286, 1205.9559534231994, 0.55, 3.9044897959183675, 24768.610654370816);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 11, 30242.99806141807, 1669.0283291843223, 0.525, 10.288163265306123, 25074.32111345612);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 15, 28295.110794723372, 1856.9462034105532, 0.715, 16.041632653061225, 24774.259595704672);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 20, 27084.31235122035, 2324.5428329649812, 0.675, 8.572244897959184, 24636.259595704672);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 21, 28950.511223885984, 1868.3764640455508, 0.65, 12.008979591836734, 25683.228030223476);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 25, 27914.678022931126, 2156.769756109113, 0.785, 13.461224489795919, 25200.734283914102);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 30, 27542.68026630457, 1911.556861590475, 0.815, 12.976326530612244, 24481.00364684777);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 31, 27671.96489526163, 2492.5543002144004, 0.885, 11.897142857142857, 24929.061052368983);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 35, 27109.173302266576, 2219.717842117787, 0.94, 10.13795918367347, 24591.84006158645);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 40, 27926.34418424219, 3123.9427865755083, 0.925, 11.438367346938776, 24478.885159693356);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 41, 26196.12022682234, 1558.1307560134007, 0.96, 13.752653061224489, 23758.313682477605);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 45, 26014.09116692927, 1706.0966119229697, 0.96, 11.777142857142858, 23758.313682477605);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 25546.448007577295, 1823.4004476087728, 0.96, 10.325714285714286, 23758.313682477605);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 51, 27029.967355722358, 1860.0623551052608, 0.975, 12.514285714285714, 24533.582839806084);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 55, 25632.207706325236, 2095.0711149867134, 0.99, 11.489795918367347, 23314.728065024545);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 60, 25276.139675759725, 1892.5281587969303, 0.965, 10.738775510204082, 23299.728065024545);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 61, 29787.00991673822, 1149.3375769644058, 0.965, 16.223673469387755, 26280.97894616271);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 65, 29807.40897704834, 1496.0347498146325, 0.985, 14.855510204081632, 25468.523231494517);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 70, 29203.866356027578, 1630.5166069046086, 1.015, 12.856326530612245, 24868.03438590334);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 71, 25971.977374739694, 1507.6799505146, 1.045, 13.693061224489796, 24477.050892786145);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 75, 26351.510630159435, 1830.7353036756144, 1.05, 13.684897959183674, 23947.852020458202);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 80, 26064.25065183217, 1933.2654694852424, 1.125, 14.906938775510204, 23713.92851839448);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 81, 29425.228102654637, 2015.0627789890436, 1.125, 18.73551020408163, 24804.66343167033);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 85, 28621.04519790123, 2088.0134135883204, 1.12, 16.30530612244898, 24402.102791216195);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 90, 28817.84486164447, 2172.3794782455457, 1.11, 16.582857142857144, 24228.20528647195);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 91, 29406.473198890155, 1834.2898296650937, 1.1, 18.914285714285715, 24742.07485631892);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 95, 29745.615078280847, 1599.5558447210212, 1.1, 18.772244897959183, 24742.07485631892);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 29508.800899660644, 2143.9486424967413, 1.095, 19.990204081632655, 24742.07485631892);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 31858.816317539495, 4459.282067878476, 1.125, 15.962448979591837, 24635.474873385538);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 105, 30652.90265594863, 4133.223378572345, 1.13, 16.86857142857143, 24097.106487157198);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 110, 30118.43561798861, 4578.484522469684, 1.135, 14.409795918367347, 24057.792668660277);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 111, 27085.404280176008, 2109.6985477643398, 1.135, 15.38938775510204, 23327.28510847627);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 115, 26618.76816821452, 2484.477963723451, 1.115, 14.897142857142857, 23167.165035066155);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 120, 26111.17133613568, 2294.8402809074178, 1.115, 15.384489795918368, 23167.165035066155);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 121, 27255.40551178259, 1225.6644646034936, 1.115, 17.251428571428573, 24719.648760795284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 125, 26968.582842930347, 1637.025975327168, 1.125, 16.643265306122448, 23811.74189594596);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 130, 27280.240487728173, 1700.7286401910621, 1.12, 16.261224489795918, 23223.74189594596);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 131, 30546.015908342986, 1779.799907015111, 1.105, 26.026122448979592, 27116.525352781788);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 135, 30450.40653290029, 1473.9305606149856, 1.245, 25.91673469387755, 27048.401710572594);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 140, 29579.4899881839, 1967.6251986064717, 1.31, 24.03265306122449, 25348.79438207382);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 141, 28527.957926848736, 2205.2812094863734, 1.31, 22.012244897959185, 24686.083021803912);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 145, 28324.54439984916, 2170.4284891140906, 1.315, 21.89142857142857, 24278.544439936704);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 28210.185013507475, 2263.3162162215476, 1.315, 20.85061224489796, 24012.107884268225);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 151, 29042.27477738999, 1801.797504248319, 1.31, 21.66122448979592, 25237.783403056335);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 155, 28896.808096497138, 1671.228150860046, 1.315, 23.54122448979592, 24628.615272690644);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 160, 28626.863037955547, 1675.8582904886202, 1.315, 22.071020408163264, 24628.615272690644);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 161, 29521.462737843915, 1251.7365248836977, 1.315, 25.856326530612243, 25400.63866486752);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 165, 29481.792138070865, 1518.8425112000473, 1.27, 25.59591836734694, 24839.479651017813);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 170, 28594.69393919586, 1593.1601831556316, 1.27, 24.23591836734694, 24839.479651017813);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 171, 29938.098987823138, 1671.4761591156223, 1.245, 24.790204081632652, 25576.905075252558);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 175, 29628.851753215975, 1662.4884685645293, 1.295, 19.738775510204082, 24881.82927833245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 180, 28645.356202074076, 2169.6593859743584, 1.295, 18.474285714285713, 24881.82927833245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 181, 28756.485084339343, 1610.3847113561394, 1.29, 24.10938775510204, 25036.639857336788);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 185, 28810.26468060023, 1623.7154681987877, 1.325, 24.311020408163266, 25027.725832147196);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 190, 28859.875490579667, 1487.2766750651172, 1.325, 22.549387755102043, 24706.69706186022);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 191, 28792.622858155202, 1752.8407844106653, 1.355, 26.57469387755102, 24794.990910528628);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 195, 28650.700381296403, 1858.755017527838, 1.36, 23.609795918367347, 24030.712515630374);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 27919.046057090945, 1894.4768366468427, 1.31, 24.19265306122449, 24030.712515630374);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 28756.840951641378, 2295.328101217779, 1.315, 21.22204081632653, 24406.00715368021);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 205, 27647.34606725994, 2242.6087794436917, 1.315, 21.216326530612246, 24406.00715368021);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 210, 27683.14700751062, 2190.5355494685036, 1.315, 19.761632653061223, 24406.00715368021);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 211, 28826.288668001365, 2588.151251284135, 1.315, 22.66122448979592, 24269.17098884498);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 215, 28828.800985796923, 2442.649633927013, 1.315, 23.057142857142857, 24269.17098884498);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 220, 27571.450316064624, 2167.6513640318863, 1.31, 21.51265306122449, 24052.984474410106);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 221, 27485.32540801212, 1907.5883225465632, 1.31, 19.082448979591838, 23583.622903785454);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 225, 27290.393825709856, 2298.916100024718, 1.31, 19.266938775510205, 23583.622903785454);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 230, 27117.72049472158, 2544.0046385605406, 1.29, 18.791020408163266, 23520.622903785454);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 231, 26541.136839900253, 2168.17263577534, 1.29, 18.976326530612244, 23620.992430065482);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 235, 26612.584662522426, 2347.714961379657, 1.29, 18.824489795918367, 23620.992430065482);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 240, 25824.926697733965, 2346.737092708175, 1.29, 16.441632653061223, 23620.992430065482);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 241, 27737.399399547485, 1948.500628760027, 1.265, 20.240816326530613, 24743.480214228068);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 245, 28134.785617767204, 2110.115245154563, 1.265, 20.74612244897959, 24514.58570740967);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 27913.53306794986, 2284.104035028791, 1.28, 21.623673469387754, 24331.58570740967);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 251, 27917.36791344948, 1620.480712634146, 1.25, 20.914285714285715, 24952.93805456438);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 255, 27141.702949399616, 1838.2872182315343, 1.24, 18.248979591836736, 24633.977527303705);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 260, 26721.634628541447, 1666.0314293420995, 1.23, 18.006530612244898, 24395.977527303705);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 261, 27241.695220252765, 1970.438109350383, 1.245, 17.397551020408162, 24387.943572943783);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 265, 26331.27075690848, 1667.0325318906519, 1.245, 17.129795918367346, 24249.943572943783);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 270, 26563.29678707942, 1552.5839334367051, 1.21, 17.307755102040815, 24196.710941839174);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 271, 26286.806611512693, 2037.9556513991026, 1.235, 18.86204081632653, 23693.79548807011);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 275, 25800.881198473762, 1993.8102711554777, 1.205, 18.90612244897959, 23663.331767823074);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 280, 25854.856372844693, 1718.6475126784294, 1.205, 16.639183673469386, 23663.331767823074);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 281, 26838.16648434822, 2115.588757043225, 1.2, 17.47265306122449, 24170.92281517014);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 285, 27082.52864521131, 2668.974764878086, 1.2, 18.13142857142857, 23784.483119766337);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 290, 26918.840346641777, 2123.452122485271, 1.2, 16.4465306122449, 23784.483119766337);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 291, 27078.612624980313, 2083.829318366328, 1.14, 18.870204081632654, 24574.40769832724);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 295, 27081.81175219158, 2022.1603028380284, 1.14, 19.623673469387754, 24038.965040652576);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 26983.111457924624, 2177.160622880017, 1.165, 18.677551020408163, 23950.965040652576);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 28198.503919470873, 2537.0265816306746, 1.19, 16.976326530612244, 24756.06465955212);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 305, 27712.68559772779, 2489.2957738711934, 1.23, 19.450612244897957, 23963.38425297321);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 310, 26891.922128398077, 2625.76302299118, 1.23, 18.89469387755102, 23817.39292787809);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 311, 27353.203950969255, 1641.118240698203, 1.235, 21.637551020408164, 24650.657260173502);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 315, 26356.64234714808, 921.1650506596702, 1.225, 18.73795918367347, 24206.053243549286);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 320, 26426.63289895155, 1419.3074426318612, 1.21, 18.986938775510204, 23847.881856006363);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 321, 26875.917786070095, 2037.8945902183661, 1.24, 19.8065306122449, 23344.235523909625);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 325, 27272.412792940202, 2602.5584048231262, 1.24, 20.088979591836736, 23344.235523909625);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 330, 26505.48277810294, 2048.8004217050548, 1.215, 19.118367346938776, 23309.515711714434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 331, 25980.036198459453, 1365.9435155241936, 1.215, 19.641632653061226, 23775.10900649061);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 335, 26298.461699322714, 1494.0201973912424, 1.215, 19.066938775510206, 23775.10900649061);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 340, 25912.54091659662, 1786.6452438126228, 1.185, 18.91591836734694, 23721.206027756412);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 341, 26754.9813639553, 1533.427836062041, 1.16, 18.721632653061224, 24526.6253508102);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 345, 27299.180941474744, 1390.7330112785123, 1.16, 20.274285714285714, 24526.6253508102);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 27559.573553430648, 1738.0044970531505, 1.155, 19.95265306122449, 24228.28089547989);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 351, 28019.32310534761, 2005.7752261368396, 1.18, 20.33061224489796, 24248.251142265337);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 355, 27252.696207599765, 1504.7697447321814, 1.17, 18.864489795918367, 23925.279358146163);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 360, 27580.69679939339, 1668.6320963348958, 1.17, 18.04734693877551, 23925.279358146163);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 361, 26514.248535422248, 1577.1751714993602, 1.18, 19.666122448979593, 23950.03158074543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 365, 26318.35319576862, 1376.7812170030297, 1.18, 19.20408163265306, 23830.03158074543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 370, 26523.91724166262, 1484.180796978578, 1.165, 18.855510204081632, 23744.03158074543);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 371, 26622.44163872637, 1540.3437841478435, 1.15, 16.837551020408164, 24450.515508455086);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 375, 26091.744473585706, 1140.0528694605543, 1.145, 14.72408163265306, 23872.9598688697);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 380, 26244.15973997002, 1338.2883605299817, 1.145, 16.256326530612245, 23434.9598688697);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 381, 26100.184358673137, 1185.4930489445712, 1.15, 18.478367346938775, 23667.654153021496);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 385, 26244.720350511932, 1466.2451463355396, 1.15, 17.044897959183672, 23667.654153021496);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 390, 26248.40379769828, 1555.41786961118, 1.14, 17.954285714285714, 23631.5862731652);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 391, 26699.024011427322, 1473.7103168093943, 1.14, 17.39183673469388, 24262.83142953778);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 395, 26607.881226398582, 1385.8885292260277, 1.14, 17.224489795918366, 24040.83142953778);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 26748.352126437345, 1292.3481486448713, 1.135, 17.4865306122449, 24040.83142953778);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 26405.193223667768, 1257.6274937177307, 1.12, 17.747755102040816, 24071.548732583222);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 405, 26339.523029494416, 1598.7461108635216, 1.12, 16.902857142857144, 24071.548732583222);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 410, 26561.812825042158, 1416.7085919279289, 1.12, 17.173877551020407, 24071.548732583222);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 411, 26205.103784794257, 1253.1830133113706, 1.11, 14.358367346938776, 24323.534892347292);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 415, 26232.969654625602, 1316.1103808530233, 1.11, 12.92734693877551, 24141.62941242859);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 420, 25961.893731192133, 1584.963740654356, 1.11, 12.511020408163265, 24141.62941242859);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 421, 26093.06085982509, 1336.5633579008029, 1.145, 16.681632653061225, 24101.56507663434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 425, 26132.11936584201, 1561.6038048918122, 1.145, 17.602448979591838, 24094.56507663434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 430, 25920.795716750086, 1383.487707661621, 1.125, 15.743673469387755, 24065.56507663434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 431, 27104.509389644656, 2245.221696105298, 1.145, 16.88326530612245, 24764.68596142631);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 435, 26050.075866954863, 1666.2055564406992, 1.145, 15.714285714285714, 24608.286618767223);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 440, 26494.493222434055, 2238.719883416177, 1.15, 15.438367346938776, 24500.49962680341);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 441, 26039.731256113486, 1907.0636865452404, 1.145, 15.630204081632654, 23794.095557472756);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 445, 25708.593535920907, 1781.3345831559927, 1.13, 16.110204081632652, 23714.587751402818);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 25152.670169783047, 1447.7361155689132, 1.11, 14.820408163265306, 23665.587751402818);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 451, 24854.649120918206, 1260.2148560412934, 1.11, 11.022857142857143, 23411.05449974537);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 455, 25244.858015041842, 1633.0683272171123, 1.095, 13.417142857142856, 23399.05449974537);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 460, 25019.39634442795, 1448.9802307739908, 1.08, 12.961632653061224, 23339.134518500035);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 461, 25347.719994132556, 1264.10509574761, 1.08, 16.611428571428572, 23709.35501071385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 465, 24915.405769103872, 820.8623080099279, 1.08, 15.008163265306122, 23709.35501071385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 470, 25044.73699537998, 864.9390083352909, 1.08, 16.76734693877551, 23709.35501071385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 471, 25871.83609186885, 1392.9208183267667, 1.08, 14.411428571428571, 23718.929927178295);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 475, 25771.470306439172, 1469.475019055273, 1.08, 14.379591836734694, 23718.929927178295);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 480, 25675.700007564345, 1583.0492754082118, 1.015, 13.204081632653061, 23520.834633164126);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 481, 25160.0559642678, 1269.605315414431, 1.035, 14.695510204081632, 24010.157442286785);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 485, 24930.147825003747, 1072.4416607371645, 1.035, 13.901224489795919, 24010.157442286785);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 490, 24849.77005174669, 1046.9605880573474, 1.035, 13.44734693877551, 23975.116938498333);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 491, 25203.36202925053, 902.080162748669, 1.03, 13.751020408163265, 23995.188701317213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 495, 25017.684893844285, 1195.1622248384872, 1.05, 11.076734693877551, 23931.188701317213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 24618.33030741184, 935.4308195038562, 1.045, 9.778775510204081, 23931.188701317213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 24758.544440185204, 973.2387671342038, 1.045, 9.223673469387755, 23965.06774819641);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 505, 24797.61214493546, 1074.5226478811253, 1.04, 9.235102040816326, 23797.260536492475);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 510, 24688.069672917933, 1084.8519215801707, 1.045, 10.138775510204082, 23730.260536492475);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 511, 26679.914793039046, 1281.4788355337205, 1.055, 13.949387755102041, 25210.84129906687);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 515, 26737.862132744198, 1063.7765254240387, 1.065, 13.55265306122449, 25064.62197334154);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 520, 26893.679898445163, 1213.5784602691792, 1.065, 14.442448979591838, 25064.62197334154);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 521, 24731.52175439984, 1041.3590475948797, 1.035, 12.953469387755103, 23724.625146799855);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 525, 24636.11057242648, 914.0166780829921, 1.035, 12.937959183673469, 23597.625146799855);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 530, 24400.635125600737, 853.3301354361193, 1.035, 10.307755102040817, 23597.625146799855);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 531, 24399.042477079274, 762.535686384964, 1.055, 10.733877551020408, 23940.800804116545);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 535, 24598.380333785346, 997.7409552288154, 1.05, 11.492244897959184, 23912.890478537876);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 540, 24375.97593867454, 556.7132407932273, 1.045, 11.421224489795918, 23879.890478537876);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 541, 24460.75134843762, 609.3006095372896, 1.015, 9.897142857142857, 23739.184779695544);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 545, 24466.17213474319, 746.4084741712048, 1.04, 11.062857142857142, 23705.184779695544);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 24406.95665354105, 814.7353856815811, 1.06, 10.742040816326531, 23656.184779695544);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 551, 25079.832802283443, 1022.6206974392821, 1.055, 11.095510204081632, 23680.60162361713);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 555, 25020.112301022207, 1037.3098468537141, 1.06, 10.899591836734693, 23602.60162361713);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 560, 25033.127867935764, 1046.7196375202493, 1.06, 11.081632653061224, 23602.60162361713);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 561, 25428.901814302346, 990.1716986056996, 1.06, 12.36, 23781.845913287514);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 565, 25309.505671999497, 1088.39691110981, 1.06, 11.452244897959183, 23781.845913287514);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 570, 25251.551507161665, 1308.2788791486082, 1.06, 10.522448979591836, 23781.845913287514);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 571, 24520.030708403057, 674.4283061118266, 1.055, 8.19265306122449, 23778.355322556446);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 575, 24385.161062403102, 771.6877223102038, 1.055, 10.111836734693878, 23675.355322556446);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 580, 24484.689113993387, 797.4369906385554, 1.055, 10.279183673469388, 23675.355322556446);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 581, 24463.686878049502, 1231.679111113487, 1.065, 8.595102040816327, 23663.813958005456);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 585, 24565.28369706799, 1215.9844551145713, 1.06, 9.91265306122449, 23626.021868856507);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 590, 24377.066416948754, 1145.2057874707791, 1.025, 8.554285714285715, 23559.93749114242);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 591, 24471.1203821511, 955.1855052545127, 1.045, 8.061224489795919, 23869.624416619357);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 595, 24133.691705001453, 519.0484037035027, 1.045, 6.847346938775511, 23817.624416619357);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 24711.36232311959, 998.9530730806403, 1.02, 6.056326530612245, 23710.624416619357);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 24538.545192785994, 539.956928494313, 1.015, 7.633469387755102, 24166.631085398836);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 605, 24556.39957517649, 610.9667481482727, 1.02, 7.0587755102040814, 23892.633237900063);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 610, 24665.001661806513, 902.8451739273515, 1.03, 10.19591836734694, 23764.358558698725);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 611, 24480.25148535016, 735.2548671372281, 1.03, 9.341224489795918, 23677.707290087183);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 615, 24601.011118838283, 885.5852552491509, 1.03, 7.888163265306122, 23677.707290087183);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 620, 24426.70146652784, 675.4940224837545, 1.03, 7.209795918367347, 23677.707290087183);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 621, 24477.559189061983, 852.1187958626698, 1.035, 8.172244897959184, 23711.065405411457);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 625, 24421.844833483534, 810.8720439822172, 1.035, 5.9379591836734695, 23711.065405411457);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 630, 24355.184651812157, 772.3773959067179, 1.03, 6.398367346938776, 23644.065405411457);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 631, 24884.329414343414, 792.295141960671, 1.03, 6.537142857142857, 23812.60883249634);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 635, 24867.630907153798, 906.2085225312043, 1.03, 7.695510204081633, 23812.60883249634);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 640, 24953.05550003519, 896.3156604823653, 1.015, 8.946122448979592, 23800.60883249634);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 641, 25932.25735366057, 906.2661258411937, 1.005, 10.017959183673469, 24579.50506820724);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 645, 25221.893376528795, 1185.45895408172, 1.015, 9.282448979591837, 24296.564104323297);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 24807.12349080381, 807.3791317789537, 1.075, 6.395918367346939, 24210.564104323297);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 651, 25725.09512628692, 842.1991855636269, 1.07, 10.348571428571429, 24619.810727380347);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 655, 25341.175867303613, 1011.0284211900338, 1.07, 9.443265306122449, 24182.78536067346);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 660, 25110.7312961048, 969.4508895069375, 1.07, 8.385306122448979, 24182.78536067346);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 661, 25107.329596659118, 1174.3070799044779, 1.05, 8.619591836734694, 23769.751531062546);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 665, 24776.604733182863, 1087.9084588066223, 1.05, 7.673469387755102, 23707.61672892325);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 670, 24794.90473556089, 990.431567992055, 1.05, 8.27265306122449, 23707.61672892325);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 671, 24020.503724281927, 610.4137461766705, 1.03, 5.373877551020408, 23585.06524317067);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 675, 23911.531149166625, 543.3532596307736, 1.03, 4.745306122448979, 23585.06524317067);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 680, 24085.761348614305, 948.6353497119898, 1.03, 4.917551020408164, 23585.06524317067);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 681, 24970.603483025254, 832.2100843411605, 1.04, 6.918367346938775, 24275.07047823162);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 685, 25024.612745895396, 1056.040579345595, 1.05, 6.790204081632653, 24196.07047823162);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 690, 24863.735651389623, 808.0223531627591, 1.05, 6.746938775510204, 24196.07047823162);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 691, 24930.108526567394, 847.281715427307, 1.04, 6.348571428571429, 23845.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 695, 24570.75586587274, 759.0900131751957, 1.035, 5.932244897959183, 23801.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 24588.04185856284, 687.0567454017468, 1.035, 5.86204081632653, 23801.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 25442.165262900526, 909.5266307344652, 1.045, 7.4465306122448975, 24274.636965900194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 705, 25407.787918453527, 967.2836777824563, 1.045, 7.618775510204082, 24225.636965900194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 710, 25256.91277240047, 888.8786412925997, 1.045, 7.557551020408163, 24225.636965900194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 711, 25241.88474934216, 840.930296232134, 1.05, 6.535510204081633, 24178.996602189105);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 715, 24879.290432439935, 933.4718728744258, 1.065, 6.283265306122449, 23932.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 720, 24867.901145255193, 872.0207782187068, 1.065, 5.1355102040816325, 23932.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 721, 24636.001514890824, 934.4011610768879, 1.025, 7.94204081632653, 23886.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 725, 24408.10318398802, 793.271153565819, 1.025, 6.147755102040817, 23886.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 730, 24748.094180476466, 987.5850215669094, 1.025, 7.1657142857142855, 23886.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 731, 24937.839148383122, 650.3862567139056, 1.025, 6.208163265306123, 23919.122380335695);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 735, 24937.181319185882, 611.7864453082549, 1.03, 6.9616326530612245, 23870.633525175344);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 740, 24935.23283526267, 654.6962644227145, 1.0, 6.822857142857143, 23858.867517083683);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 741, 25197.41533964342, 649.719923577708, 0.975, 4.809795918367347, 24357.417242304444);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 745, 25085.68513285372, 771.8005018572504, 0.98, 6.338775510204082, 24292.132241100313);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 24845.754160744833, 694.6146505340197, 0.98, 5.337959183673469, 24280.132241100313);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 751, 24532.454429416448, 679.7677668561755, 0.96, 5.7240816326530615, 24107.61390582179);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 755, 24501.03340578388, 678.3953162923773, 0.995, 7.595918367346939, 24049.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 760, 24356.771726477262, 470.14635116183683, 0.995, 6.862857142857143, 24049.30574202312);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 761, 24332.556394482766, 538.5089484393332, 0.985, 5.849795918367347, 23752.625004820624);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 765, 24330.579707481495, 526.0025807848999, 0.985, 5.876734693877551, 23752.625004820624);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 770, 24250.113815781962, 478.4271861157442, 0.985, 5.596734693877551, 23752.625004820624);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 771, 24974.67542352394, 604.1592496831346, 0.98, 3.0040816326530613, 24340.934466947416);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 775, 24882.521478954917, 463.2170734250626, 1.0, 3.226122448979592, 24186.728396124403);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 780, 24769.142581879707, 557.0283676401643, 1.0, 3.0016326530612245, 24186.728396124403);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 781, 25235.889355197694, 723.9075065020954, 0.97, 5.266938775510204, 24523.535855322363);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 785, 25139.826013694164, 1272.1474680440945, 0.97, 4.8644897959183675, 24485.992762662194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 790, 25003.73642994956, 995.5483022819064, 0.975, 4.8212244897959184, 24464.992762662194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 791, 24361.253275143416, 785.0618351730732, 0.99, 4.426122448979592, 23834.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 795, 24229.486636205005, 789.8016541808272, 0.99, 3.7518367346938777, 23834.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 24223.29799032223, 871.4517687175733, 0.95, 3.3151020408163263, 23834.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 24570.08450757865, 306.44873951764515, 0.945, 3.770612244897959, 24151.11844011248);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 805, 24603.49874620113, 364.68540464946733, 0.945, 4.624489795918367, 24151.11844011248);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 810, 24632.165834828258, 390.96371641959814, 0.945, 4.481632653061224, 24151.11844011248);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 811, 25776.440992843665, 1444.2078480813682, 0.955, 5.115102040816327, 24036.44901161789);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 815, 25271.645140195385, 1140.5410545696418, 0.955, 4.937142857142857, 23951.5079407311);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 820, 25310.75851764843, 1339.50824208779, 0.955, 4.533877551020408, 23951.5079407311);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 821, 23900.600743199564, 331.54145915315013, 0.92, 2.6922448979591835, 23755.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 825, 23888.290550109865, 413.9630660563001, 0.92, 2.8914285714285715, 23755.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 830, 23980.187497964525, 693.4854410864175, 0.92, 2.4114285714285715, 23755.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 831, 23910.83300946238, 146.41790652858242, 0.93, 1.5322448979591836, 23850.359348225);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 835, 23925.482924549124, 277.512379649103, 0.93, 1.253877551020408, 23850.359348225);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 840, 23971.554195253328, 387.43302450656597, 0.93, 1.68, 23850.359348225);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 841, 24462.0266850209, 464.02585305133425, 0.89, 2.5583673469387755, 24059.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 845, 24615.948578389743, 662.8768628091339, 0.89, 3.4857142857142858, 24059.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 24519.020431557023, 694.3671084810094, 0.89, 2.8416326530612244, 24059.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 851, 24272.431660521088, 809.4505426646485, 0.9, 2.7575510204081635, 23755.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 855, 24179.111660521092, 761.6774816386609, 0.9, 2.608979591836735, 23755.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 860, 24133.973702181724, 698.0390621196626, 0.9, 2.3110204081632655, 23755.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 861, 24426.86479962921, 699.9563535486654, 0.875, 3.316734693877551, 23958.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 865, 24279.472821331852, 608.4104977682937, 0.875, 2.9461224489795916, 23946.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 870, 24160.186937706207, 471.1437181298643, 0.875, 2.28, 23946.253702181722);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 871, 24992.840656538483, 1219.9965209648137, 0.875, 4.089795918367347, 24163.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 875, 25016.797251809374, 1296.1563405490958, 0.875, 4.354285714285714, 24163.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 880, 24949.186904109152, 1135.879203926691, 0.875, 4.057142857142857, 24163.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 881, 24473.430241277547, 519.190411072457, 0.875, 3.874285714285714, 24163.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 885, 24449.255273256204, 530.313781561484, 0.875, 3.760816326530612, 24163.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 890, 24387.84398328287, 418.32744122285345, 0.875, 3.537959183673469, 24163.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 891, 24125.630168345655, 389.6222032629186, 0.855, 2.2383673469387757, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 895, 24041.23172312285, 133.92417135629168, 0.855, 1.7820408163265307, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 24029.73172312285, 135.5123309397884, 0.84, 1.6506122448979592, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 24042.091723122852, 134.96339034973107, 0.84, 1.6914285714285715, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 905, 24042.771723122853, 234.6840133508224, 0.84, 0.9804081632653061, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 910, 24007.151723122854, 69.69329016395736, 0.84, 1.2653061224489797, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 911, 24122.698001194643, 293.4528138660375, 0.84, 2.092244897959184, 23975.610458042916);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 915, 24045.941860455718, 160.56641432671753, 0.84, 1.2759183673469388, 23975.610458042916);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 920, 24021.862584550927, 131.72843346306342, 0.84, 0.9991836734693877, 23975.610458042916);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 921, 24026.271723122853, 164.84842883629778, 0.84, 1.1028571428571428, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 925, 24023.071723122852, 173.74201024061213, 0.84, 0.9248979591836735, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 930, 24007.89172312285, 72.45349247226504, 0.84, 1.1902040816326531, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 931, 24034.409237488944, 30.221900255759607, 0.795, 0.16, 24016.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 935, 24068.25280481292, 167.14268558071657, 0.795, 1.1902040816326531, 24016.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 940, 24047.702040386353, 117.07797731360426, 0.795, 0.889795918367347, 24016.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 941, 23988.131723122853, 47.42512896284898, 0.755, 0.7248979591836735, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 945, 23983.491723122854, 18.9824408658236, 0.755, 0.7444897959183674, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 23980.851723122854, 17.075869117630564, 0.755, 0.6024489795918367, 23972.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 951, 24014.602088611595, 1.1025646897399093, 0.755, 0.6024489795918367, 24014.09070542621);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 955, 24014.71572931946, 1.1888294167218, 0.755, 0.7004081632653061, 24014.09070542621);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 960, 24014.54526825766, 1.052108514940477, 0.755, 0.5485714285714286, 24014.09070542621);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 961, 24329.908731896187, 35.88704385033807, 0.74, 1.0187755102040816, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 965, 24298.62049370336, 19.487418056362984, 0.74, 0.3004081632653061, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 970, 24292.931723122852, 1.102474064703213E-11, 0.74, 0.0, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 971, 24560.00458347915, 1.469965419604284E-11, 0.74, 0.0, 24560.004583479164);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 975, 24560.00458347915, 1.469965419604284E-11, 0.74, 0.0, 24560.004583479164);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 980, 24560.00458347915, 1.469965419604284E-11, 0.74, 0.0, 24560.004583479164);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 981, 24292.931723122852, 1.102474064703213E-11, 0.74, 0.0, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 985, 24292.931723122852, 1.102474064703213E-11, 0.74, 0.0, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 990, 24292.931723122852, 1.102474064703213E-11, 0.74, 0.0, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 991, 24292.931723122852, 1.102474064703213E-11, 0.74, 0.0, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 995, 24292.931723122852, 1.102474064703213E-11, 0.74, 0.0, 24292.93172312284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 24292.931723122852, 1.102474064703213E-11, 0.77, 0.0, 24292.93172312284);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 92, 27, 0, 62, 5, 48, 89, 78, 52, 37, 35, 98, 23, 17, 87, 93, 21, 15, 69, 3, 64, 65, 25, 18, 96, 55, 74, 91, 7, 30, 79, 88, 41, 66, 46, 97, 22, 44, 90, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 17, 23, 98, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 97, 90, 22, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 2, 42, 47, 99, 40, 70, 13, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 37, 23, 98, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 72, 67, 84, 38, 29, 68, 63, 39, 53, 1, 43, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 15, 87, 93, 21, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 15, 21, 93, 87, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 8, 6, 56, 86, 50, 60, 24, 80, 63, 39, 53, 1, 43, 49, 81, 94, 75, 32, 12, 36, 4, 77, 51, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 33, 45, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 28, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 63, 39, 53, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 96, 55, 88, 30, 79, 41, 7, 91, 62, 0, 5, 48, 89, 87, 15, 21, 93, 65, 64, 3, 25, 69, 46, 27, 92, 57, 66, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 49, 72, 67, 84, 43, 1, 63, 39, 53, 68, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 96, 55, 91, 7, 41, 88, 30, 79, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 27, 92, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 63, 39, 53, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 96, 55, 91, 7, 41, 88, 30, 79, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 33, 45, 2, 42, 13, 40, 70, 99, 47, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 96, 55, 91, 7, 41, 88, 30, 79, 3, 64, 65, 25, 69, 15, 87, 93, 21, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 3, 64, 65, 25, 96, 55, 79, 41, 88, 30, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0, 5, 48, 89, 18, 74, 62, 46, 92, 27, 57, 60, 24, 80, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 1, 63, 39, 53, 66, 50, 86, 8, 6, 56, 54, 82, 33, 45, 2, 13, 40, 70, 99, 47, 28, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 87, 15, 21, 93, 69, 65, 64, 3, 25, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 5, 48, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 5, 48, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 43, 49, 1, 39, 53, 63, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 27, 92, 57, 66, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 18, 74, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 45, 28, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 5, 48, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 12, 94, 81, 75, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 8, 86, 50, 60, 24, 80, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 0, 5, 48, 89, 46, 27, 92, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 24, 80, 68, 60, 50, 86, 56, 6, 8, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 27, 92, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 5, 48, 89, 62, 46, 92, 27, 57, 66, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 68, 80, 24, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 5, 48, 62, 0, 46, 27, 92, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 0, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 0, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 5, 48, 89, 62, 46, 27, 92, 66, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 62, 5, 48, 89, 0, 46, 27, 92, 66, 57, 60, 50, 86, 8, 56, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 5, 48, 89, 62, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 5, 48, 89, 62, 46, 27, 92, 66, 57, 60, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 50, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 5, 48, 89, 62, 46, 92, 27, 66, 57, 60, 24, 80, 68, 72, 49, 43, 1, 39, 53, 63, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 54, 82, 6, 8, 56, 86, 50, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 50, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 50, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 60, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 60, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 60, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 50, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 56, 6, 8, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 42, 45, 2, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 50, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 39, 53, 63, 68, 80, 24, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 80, 24, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 56, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 38, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 36, 4, 81, 94, 12, 32, 75, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 28, 45, 42, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 70, 40, 99, 47, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 28, 45, 2, 42, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 28, 45, 2, 42, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 28, 45, 2, 42, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[11, 19, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 62, 5, 48, 89, 46, 92, 27, 66, 57, 60, 50, 86, 8, 6, 56, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 11]");

    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 10, 1.0, 5.0);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(30311.715138987576);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(30311.715138987576);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 40284.6246055206, 2461.8304778529255, 0.0, 80.8130612244898, 36554.3909905504);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 5, 34695.55486838032, 1731.845302500116, 0.7466666666666667, 18.18285714285714, 32730.285883041888);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 10, 33218.81922648948, 1505.0869542626733, 0.5066666666666667, 8.73795918367347, 32154.00731823521);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 11, 39816.04414996954, 1907.8957742817356, 0.49666666666666665, 19.106938775510205, 35321.99702371176);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 15, 36286.41786548597, 2104.0096350928748, 1.01, 33.79673469387755, 32633.042285950396);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 20, 35017.01302040971, 2482.170426959645, 1.0333333333333334, 29.091428571428573, 31889.09438228429);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 21, 36564.35333712435, 2562.2351755637555, 1.0233333333333334, 37.204897959183675, 33143.66887386837);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 25, 35233.64395650333, 1651.7762004794804, 1.17, 31.551020408163264, 32308.27823947401);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 30, 37140.61217112082, 4116.6489164289, 1.1833333333333333, 25.169795918367345, 31907.27823947401);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 31, 36703.2305140261, 2017.0297444716073, 1.1833333333333333, 34.56979591836735, 32942.45725464253);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 35, 36761.23364146582, 2960.4698979390673, 1.2833333333333334, 28.99265306122449, 31813.474860759994);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 40, 34606.671176384545, 1878.345969620781, 1.2766666666666666, 24.84734693877551, 31716.032999765128);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 41, 36063.14742903819, 2071.9023015005578, 1.2833333333333334, 37.6995918367347, 33358.59118447468);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 45, 36287.312626193736, 2143.5519818738403, 1.43, 39.91673469387755, 32213.458795580715);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 36154.494347504275, 1770.6384185597667, 1.45, 35.31428571428572, 32039.45866052348);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 51, 37023.73376848884, 1986.6443152753518, 1.44, 37.543673469387755, 32802.12351515895);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 55, 35439.12142379078, 2290.3282755851733, 1.5333333333333334, 36.751836734693875, 31478.118749820856);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 60, 35349.26782934608, 2197.6820293044307, 1.59, 35.645714285714284, 31355.571271474015);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 61, 36388.38600431573, 1945.7936599500013, 1.5433333333333332, 41.96408163265306, 33037.983247988544);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 65, 35822.30214189142, 1789.3389623339613, 1.5733333333333333, 38.089795918367344, 31890.236141484427);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 70, 35816.54848542409, 1736.514369818007, 1.5933333333333333, 35.667755102040815, 31299.96902175944);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 71, 36431.86812231975, 2023.4303598768859, 1.58, 43.08571428571429, 32971.21823639098);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 75, 36473.70775485627, 2164.461891990227, 1.6066666666666667, 42.45061224489796, 31892.92265068566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 80, 36088.017785971984, 1781.7369846195952, 1.6066666666666667, 39.04081632653061, 31892.92265068566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 81, 36170.16615099286, 1993.4991100681382, 1.67, 41.03591836734694, 33087.05640629081);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 85, 35770.61846063707, 1917.153901143852, 1.69, 39.32244897959184, 31682.27157831421);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 90, 35680.34943991011, 2063.797184304097, 1.69, 39.09061224489796, 31682.27157831421);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 91, 35987.69835093824, 2107.6184816345153, 1.69, 44.68571428571428, 31902.139269922387);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 95, 35650.737183844394, 1610.497307767184, 1.69, 42.72163265306123, 31902.139269922387);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 35622.485946478475, 1502.997017835825, 1.7, 42.97795918367347, 31801.471563554212);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 35578.24810954315, 1971.1859379395846, 1.6433333333333333, 44.09061224489796, 31884.35114565493);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 105, 35474.328063590605, 2766.5509880296163, 1.6933333333333334, 43.66612244897959, 31287.321062844785);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 110, 35255.470040024826, 1992.9951187655713, 1.74, 44.136326530612244, 30743.180681519265);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 111, 35904.25992277774, 2206.868151067652, 1.7633333333333334, 45.50530612244898, 32249.73715314983);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 115, 35460.9082290231, 2283.004431201235, 1.7733333333333334, 43.44244897959184, 31742.154431774023);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 120, 35877.17266486684, 2668.341459128124, 1.8066666666666666, 42.32408163265306, 31704.6394983681);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 121, 35672.32662787658, 1755.9031154165632, 1.79, 43.6530612244898, 32146.614954882807);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 125, 35752.45259336784, 1826.5697224310916, 1.7933333333333332, 42.77142857142857, 31714.192847048707);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 130, 35253.03856488874, 2123.0615355980135, 1.8066666666666666, 41.8865306122449, 31224.764336959684);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 131, 35923.588240712226, 2178.761594312475, 1.7966666666666666, 42.72489795918367, 32584.066314324573);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 135, 36323.839725839236, 2691.0990305869273, 1.82, 42.80408163265306, 30916.047766185104);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 140, 36121.439124241224, 1988.2649740649101, 1.82, 42.01469387755102, 30916.047766185104);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 141, 35759.09520440199, 1862.7720617339721, 1.8366666666666667, 42.04408163265306, 32294.51540636932);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 145, 35433.79834107045, 1760.7685809847032, 1.8266666666666667, 43.031020408163265, 31337.756419253503);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 36117.73514017849, 2231.717344588575, 1.8266666666666667, 41.40734693877551, 31337.756419253503);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 151, 36419.15638820304, 2023.7542022920647, 1.82, 39.34612244897959, 31950.815389804422);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 155, 36059.358255029, 2156.481757270418, 1.8333333333333333, 37.502857142857145, 30843.765404661146);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 160, 35613.41728586532, 2337.0079673640594, 1.8366666666666667, 37.012244897959185, 30239.522497423626);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 161, 35231.53841584854, 2623.821859720798, 1.8233333333333333, 38.95918367346939, 30778.50071586542);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 165, 35476.83111141869, 2340.197585375539, 1.8233333333333333, 39.17387755102041, 30778.50071586542);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 170, 35664.969411526334, 2313.8742968502447, 1.82, 39.10612244897959, 30550.412065959652);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 171, 36080.51552558514, 2059.7417321263015, 1.8133333333333332, 43.61224489795919, 32086.213003362824);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 175, 36047.42258893384, 2072.4759364290844, 1.8166666666666667, 43.44163265306123, 31934.395941660136);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 180, 35878.22175353207, 2354.7126492032507, 1.8233333333333333, 42.27918367346939, 31086.316848738672);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 181, 35624.869275400895, 1208.4414114072326, 1.8366666666666667, 36.08816326530612, 33061.94758628702);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 185, 35610.12553903482, 1346.784434197024, 1.8366666666666667, 38.158367346938775, 32472.691443618904);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 190, 35502.237218783266, 1990.1107375893635, 1.8033333333333332, 39.83428571428571, 30450.94898334829);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 191, 35656.38164238555, 2585.326186061889, 1.7966666666666666, 38.98204081632653, 30705.63517890848);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 195, 35946.775808586615, 1876.377008647122, 1.7966666666666666, 37.924897959183674, 30705.63517890848);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 35455.63812524245, 2398.748525980079, 1.8266666666666667, 37.38367346938775, 30705.63517890848);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 34413.69889256828, 1562.4506938821753, 1.8466666666666667, 40.479183673469386, 31381.4175710079);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 205, 34810.87292329788, 1752.1119849726865, 1.84, 41.586122448979594, 31356.57374075357);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 210, 34872.51761503816, 1412.6937699355287, 1.8366666666666667, 38.801632653061226, 30911.57374075357);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 211, 35668.52186486135, 1693.3658844095175, 1.82, 39.32244897959184, 31394.63823146791);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 215, 35709.843529625985, 1462.832757656039, 1.82, 38.00244897959184, 31394.63823146791);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 220, 35311.953578094, 1712.9510494888755, 1.8433333333333333, 39.63591836734694, 31006.276177411753);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 221, 36574.46066487545, 2187.9145824846864, 1.7933333333333332, 38.8, 33081.71179976083);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 225, 36801.65579111416, 2506.4385876811816, 1.8333333333333333, 40.287346938775514, 31793.752210752515);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 230, 36274.31332209607, 2059.2973463435874, 1.84, 36.74612244897959, 31300.297450837275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 231, 35562.47040603841, 2313.918654607037, 1.8366666666666667, 39.11102040816326, 31561.947823175993);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 235, 35539.573916344445, 2270.8715517689993, 1.8333333333333333, 37.9730612244898, 30823.366802910612);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 240, 34992.14269649677, 2118.968144688235, 1.83, 38.55020408163265, 30457.16485532084);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 241, 35511.522127006596, 1804.1758717336104, 1.83, 37.23755102040816, 30118.892278481493);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 245, 35398.88711532024, 1829.7409449913564, 1.83, 36.820408163265306, 30118.892278481493);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 35116.961699307496, 1712.0228415628042, 1.83, 34.819591836734695, 30118.892278481493);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 251, 35198.64773990643, 1675.6748726886767, 1.83, 35.26204081632653, 29802.305885006845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 255, 35390.3384182072, 2408.029417335777, 1.83, 34.63428571428572, 29802.305885006845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 260, 34728.71338588718, 2071.5977945789705, 1.83, 32.83591836734694, 29802.305885006845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 261, 34720.51550692279, 2124.4461571126553, 1.7533333333333334, 33.199183673469385, 30849.522577675263);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 265, 34825.988986641656, 1544.7066935062626, 1.7566666666666666, 33.221224489795915, 30467.81918884517);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 270, 35069.50531793511, 1882.684303874999, 1.7566666666666666, 31.635102040816328, 30467.81918884517);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 271, 35421.82249464957, 2606.497621542317, 1.7166666666666666, 32.98530612244898, 30557.647561391466);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 275, 35112.631565444564, 2139.448999507196, 1.7133333333333334, 32.88734693877551, 29799.01616138405);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 280, 35748.05177460315, 2451.384515368401, 1.7133333333333334, 32.08408163265306, 29799.01616138405);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 281, 34230.477833967736, 2026.778978679615, 1.6733333333333333, 29.98857142857143, 31385.035679067256);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 285, 33673.350941584635, 1554.6501401061541, 1.6766666666666667, 29.555102040816326, 30649.90890703803);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 290, 33833.05329407187, 1597.1301697504234, 1.6666666666666667, 30.493877551020407, 30227.154750212736);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 291, 35571.15358589712, 1554.3329564835049, 1.6733333333333333, 33.19673469387755, 31778.704925845108);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 295, 35113.42785081393, 1761.4013436889609, 1.6833333333333333, 33.03836734693878, 30950.362510716375);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 35172.66769291874, 1865.2177158804259, 1.6533333333333333, 33.48408163265306, 30804.60594523618);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 36088.67514656629, 2024.5771269506138, 1.6533333333333333, 34.822857142857146, 31563.907940268226);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 305, 35929.84020424791, 1955.9785342949278, 1.6533333333333333, 34.48408163265306, 30645.64781327245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 310, 35612.1005406899, 2040.520265616257, 1.67, 32.98367346938775, 30633.446428789946);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 311, 36087.55780034804, 1468.3633182410647, 1.6166666666666667, 33.97387755102041, 30978.64272192908);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 315, 36089.951605259586, 1360.5460202057184, 1.6166666666666667, 33.120816326530615, 30978.64272192908);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 320, 35619.92410198739, 1705.8835573414676, 1.5733333333333333, 33.21795918367347, 30870.522421389713);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 321, 37105.62493047119, 2711.7160242576597, 1.5733333333333333, 33.478367346938775, 31514.901672552012);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 325, 36472.9683997332, 2724.285874724027, 1.5766666666666667, 34.00816326530612, 31263.472305426974);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 330, 35778.59859224131, 2611.1151057143397, 1.5566666666666666, 26.34938775510204, 30610.699630427403);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 331, 35189.11110105992, 2171.546834675444, 1.55, 26.544489795918366, 30264.99097048445);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 335, 34477.174964895996, 2544.4659644795634, 1.54, 25.12326530612245, 29807.36834809609);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 340, 33981.87056951902, 2770.932289153095, 1.51, 24.15020408163265, 29796.709511319677);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 341, 35429.28634678952, 2884.153210694694, 1.5233333333333334, 24.738775510204082, 30431.39665818383);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 345, 35489.85003648603, 2256.41407805347, 1.5233333333333334, 25.7134693877551, 30431.39665818383);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 34499.12521537553, 2514.0722412882337, 1.49, 23.754285714285714, 29680.197787620633);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 351, 34277.80845699187, 1714.8563234695484, 1.49, 29.90204081632653, 30442.029146009565);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 355, 34635.65198998225, 1835.7344361949972, 1.5166666666666666, 30.19265306122449, 29694.06127529774);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 360, 34373.29182723884, 2075.0783485218276, 1.5166666666666666, 28.57061224489796, 29694.06127529774);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 361, 35128.79176740352, 2432.980451583019, 1.5166666666666666, 25.729795918367348, 30408.982796982884);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 365, 35414.17544905799, 2750.022459853096, 1.4733333333333334, 26.38612244897959, 29831.867836273275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 370, 35252.60637726167, 2626.2959045913763, 1.4733333333333334, 24.86857142857143, 29831.867836273275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 371, 35816.637039382294, 1588.0225579274547, 1.4733333333333334, 29.768979591836736, 31471.719898506653);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 375, 35332.74555768646, 1748.6906180090684, 1.4933333333333334, 28.61795918367347, 30557.396069108745);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 380, 35297.394051930256, 1659.6337930114526, 1.4933333333333334, 28.471020408163266, 30115.492708292135);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 381, 35753.39572258268, 1553.2077158546322, 1.4933333333333334, 28.78448979591837, 31147.43609731033);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 385, 36139.65812744978, 2350.0625983946316, 1.4933333333333334, 29.29469387755102, 31147.43609731033);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 390, 35490.3722860026, 1513.3615271606845, 1.4933333333333334, 28.17061224489796, 31147.43609731033);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 391, 35214.50744373528, 1696.4053678197536, 1.4933333333333334, 27.64, 30705.845283194685);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 395, 35315.49098763544, 2017.0160328973661, 1.4933333333333334, 26.867755102040817, 30705.845283194685);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 35345.75340441582, 2169.648245474277, 1.4266666666666667, 27.505306122448978, 30698.78786650465);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 35895.07315161316, 2045.6414406505173, 1.4566666666666668, 26.866938775510203, 31359.94302557154);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 405, 35365.63810200977, 2125.213417235533, 1.4466666666666668, 24.742857142857144, 31110.657936485408);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 410, 35660.195395966955, 2235.992705865004, 1.4466666666666668, 25.78857142857143, 31110.657936485408);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 411, 34777.99432816334, 1759.3869661365209, 1.4366666666666668, 25.19265306122449, 30968.966983540664);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 415, 34753.514734837125, 1870.8996352634717, 1.45, 24.641632653061226, 30401.903516067774);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 420, 34916.8504281925, 1819.412613994545, 1.4266666666666667, 24.84408163265306, 30004.998077237713);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 421, 34864.75767439276, 2180.64226488196, 1.4133333333333333, 25.16, 30358.908565475387);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 425, 34917.76822043158, 1988.6745062223786, 1.4133333333333333, 24.576326530612246, 30358.908565475387);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 430, 35716.34495298354, 1700.8469099092188, 1.4, 24.176326530612243, 30184.267970406032);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 431, 34220.1196920284, 2865.8134919765293, 1.3866666666666667, 24.15591836734694, 30097.122717449918);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 435, 35011.96898190491, 2602.1220163627995, 1.3866666666666667, 22.70530612244898, 29740.423430276795);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 440, 33234.8178120234, 2207.8087839273567, 1.3633333333333333, 22.328979591836735, 29558.190712031002);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 441, 35194.01228088669, 1096.3095738675077, 1.3633333333333333, 24.639183673469386, 30601.21942229678);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 445, 35280.7550915085, 1285.941756840806, 1.3633333333333333, 26.102857142857143, 30601.21942229678);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 34819.69567983486, 1854.0742272927735, 1.3566666666666667, 23.82204081632653, 30299.05344281261);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 451, 35858.190209602435, 1760.8421808607318, 1.35, 22.588571428571427, 31585.658764926866);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 455, 35696.21577255706, 2064.773202522159, 1.3433333333333333, 22.34204081632653, 30684.099178690594);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 460, 35215.10166529428, 1934.3638899335115, 1.3433333333333333, 22.373877551020406, 30684.099178690594);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 461, 35902.25268729139, 1765.5964943638219, 1.3433333333333333, 25.111020408163267, 31003.996259107396);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 465, 33890.562732708575, 2431.306969872041, 1.3533333333333333, 24.295510204081634, 30005.62846631055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 470, 34881.43967372551, 2743.334753370287, 1.3533333333333333, 23.528979591836734, 30005.62846631055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 471, 35654.93586627449, 2117.4388156462796, 1.3433333333333333, 21.448979591836736, 31031.10157481703);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 475, 35345.805035345606, 1769.1396356194075, 1.3366666666666667, 20.04326530612245, 30895.803796062533);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 480, 34762.471319297314, 2333.2833198763, 1.3266666666666667, 19.019591836734694, 30436.902083982925);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 481, 34173.20646971515, 2814.2887729571216, 1.32, 18.303673469387753, 30541.13298222555);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 485, 34231.84220323503, 2552.7416662621163, 1.34, 17.754285714285714, 29951.035228020013);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 490, 33570.54287366374, 2301.2164303710033, 1.3133333333333332, 16.866938775510203, 29705.035228020013);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 491, 34330.66651956428, 2433.4984166015383, 1.3266666666666667, 22.502857142857142, 30607.670951265376);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 495, 34599.46995253679, 2440.200658911958, 1.3466666666666667, 23.653061224489797, 30376.64871179525);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 34324.17178225384, 2518.2657196348287, 1.34, 24.22122448979592, 30232.926764669774);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 33483.25078600312, 2557.05785458744, 1.3166666666666667, 22.284081632653063, 30014.461992631637);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 505, 34103.41892253696, 2768.949327654382, 1.3066666666666666, 21.293877551020408, 29960.369818852512);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 510, 33278.191485573516, 2413.8190477391636, 1.2933333333333332, 19.034285714285716, 29855.02902108331);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 511, 36375.58428864053, 1828.1681503982543, 1.2933333333333332, 22.048979591836734, 31101.804597066333);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 515, 36534.006182262645, 2210.150075239958, 1.3, 19.86285714285714, 30567.124198500023);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 520, 36192.486370602186, 2169.614465603607, 1.2933333333333332, 20.759183673469387, 30440.35580682783);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 521, 33546.08749575717, 2402.101439068821, 1.25, 16.888163265306122, 30310.48708581021);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 525, 33390.592017244744, 2497.8959528769246, 1.24, 15.698775510204081, 30234.474810337986);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 530, 32097.149101552484, 2139.558720270506, 1.2266666666666666, 15.111836734693878, 30160.660916056877);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 531, 33493.3050917875, 2156.0032109410995, 1.2266666666666666, 17.43673469387755, 30636.91451641404);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 535, 33557.42147598253, 2102.3040476143924, 1.2233333333333334, 15.869387755102041, 30469.031248641364);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 540, 34053.54965847203, 2097.490971985108, 1.2233333333333334, 16.737142857142857, 30469.031248641364);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 541, 34230.23369900005, 2548.364487401092, 1.1566666666666667, 17.144489795918368, 30847.04745544579);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 545, 33689.67866489747, 2409.442144652498, 1.1666666666666667, 17.838367346938774, 30651.25567250571);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 34314.050191261194, 2516.4082861777497, 1.1733333333333333, 19.776326530612245, 30377.76914549781);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 551, 34683.86251056323, 1922.7379665286062, 1.1866666666666668, 14.524081632653061, 30135.942857297934);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 555, 34511.80404212981, 1575.5897456272348, 1.18, 14.900408163265306, 30047.942857297934);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 560, 34082.56803556099, 1960.1978862817386, 1.1533333333333333, 16.42530612244898, 30018.869594215645);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 561, 33635.60042444364, 2233.47903613054, 1.14, 15.986938775510204, 30336.728573077635);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 565, 33917.697201455805, 2374.4260111415515, 1.1566666666666667, 15.322448979591837, 30009.80204609925);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 570, 33975.121381187295, 2032.3008564776326, 1.1466666666666667, 15.431020408163265, 29878.80204609925);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 571, 34427.6311981295, 1711.7536698425429, 1.1233333333333333, 19.412244897959184, 31293.42894857171);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 575, 33644.44750286358, 1856.0315829705346, 1.1233333333333333, 18.920816326530613, 30231.744870464994);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 580, 33454.54878879604, 1979.7189227283775, 1.1366666666666667, 19.296326530612244, 30129.640166484056);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 581, 34127.706887725115, 2209.000584536744, 1.1633333333333333, 18.376326530612246, 30068.154400584186);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 585, 33752.94189811731, 2071.720540042893, 1.1633333333333333, 19.28, 30068.154400584186);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 590, 33413.02960084275, 1984.2657280619696, 1.1233333333333333, 17.333877551020407, 30002.154400584186);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 591, 35031.773102118765, 2424.658558578108, 1.1033333333333333, 19.32081632653061, 30343.44650258613);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 595, 35119.024033796086, 2522.169016912168, 1.1133333333333333, 19.566530612244897, 30147.322214321615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 35261.62276145256, 2063.026544546797, 1.1, 20.075102040816326, 30147.322214321615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 32931.38451427352, 1917.7151719679844, 1.09, 18.249795918367347, 30309.71040646893);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 605, 32743.197699681223, 1836.54798608598, 1.0933333333333333, 16.99918367346939, 29923.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 610, 33195.93797563545, 1953.2512600172663, 1.0933333333333333, 16.93795918367347, 29923.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 611, 32414.305188778824, 1871.0665539627212, 1.0666666666666667, 18.255510204081634, 30487.59335968724);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 615, 32221.946708198288, 1869.321868295918, 1.07, 18.378775510204083, 30154.523671952025);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 620, 32365.166844161882, 2156.0170480321362, 1.0533333333333332, 18.151836734693877, 29985.91618489998);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 621, 33167.54699069367, 2269.5180901880467, 1.06, 16.078367346938776, 30350.244028625322);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 625, 33985.150111951305, 2151.595588907425, 1.0566666666666666, 17.06530612244898, 30074.98857923487);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 630, 33910.26848325489, 2059.3729819262685, 1.0566666666666666, 16.417142857142856, 30074.98857923487);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 631, 32988.664926188656, 2124.3735294626276, 1.0566666666666666, 16.779591836734692, 29849.846937024904);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 635, 33049.70553719146, 1916.220216289469, 1.0566666666666666, 15.648163265306122, 29849.846937024904);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 640, 32807.75145272123, 1878.671700721092, 1.0566666666666666, 15.348571428571429, 29849.846937024904);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 641, 34070.34002624569, 1480.396977393111, 1.0066666666666666, 13.128979591836735, 30697.809117314195);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 645, 34080.09871720142, 1377.5526941640944, 1.0033333333333334, 14.146122448979591, 30453.809117314195);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 33901.10520115452, 1573.7792243076506, 1.0033333333333334, 13.853877551020409, 30191.794646253915);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 651, 33272.83565957301, 2303.0974947774926, 1.0033333333333334, 17.282448979591837, 29982.108116360225);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 655, 33248.23416624974, 1662.8702870862178, 0.9966666666666667, 16.096326530612245, 29922.090487317997);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 660, 33147.11632446248, 2155.0563653702516, 0.99, 16.434285714285714, 29912.090487317997);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 661, 34267.40390328824, 1848.8381702745025, 0.9766666666666667, 13.888163265306122, 31071.34121238236);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 665, 34096.78891456746, 1705.2048962131855, 0.9766666666666667, 14.966530612244897, 31071.34121238236);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 670, 33787.69055579667, 1789.1574174551852, 0.9766666666666667, 13.451428571428572, 31071.34121238236);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 671, 35042.415636241014, 1874.5526507223299, 1.02, 14.219591836734693, 30140.37951446194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 675, 34323.9966175568, 2373.8208089954037, 1.0133333333333334, 14.52734693877551, 30096.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 680, 33615.25970155863, 2768.4670945558414, 0.98, 14.253061224489796, 30006.623023480464);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 681, 32293.24666088434, 2044.9716691296512, 0.9566666666666667, 13.142857142857142, 29974.764859494142);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 685, 32982.572032815835, 2159.0115803160616, 0.9566666666666667, 13.95265306122449, 29974.764859494142);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 690, 32043.621932675258, 1709.5914894516247, 0.9466666666666667, 13.077551020408164, 29965.764859494142);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 691, 34977.9766870075, 2695.7907105647455, 0.9266666666666666, 11.266938775510203, 30437.285141827397);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 695, 34299.01628922564, 2394.2952896905085, 0.9266666666666666, 10.65795918367347, 30437.285141827397);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 34515.192043666, 2714.3351126826983, 0.9033333333333333, 11.284081632653061, 30397.51136489491);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 32791.09825312331, 1255.0325424788562, 0.9, 15.137142857142857, 30359.213174513054);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 705, 32764.065769719014, 1176.664477326551, 0.9, 13.871836734693877, 30359.213174513054);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 710, 32496.663148018397, 1133.049513556923, 0.8966666666666666, 13.500408163265305, 30323.213174513054);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 711, 39000.61745508362, 2632.355705041448, 0.9066666666666666, 12.093877551020409, 31219.615404721124);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 715, 37295.18823090097, 3500.051675369123, 0.92, 12.088163265306122, 30742.694428360377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 720, 36582.93489527218, 3956.971643557897, 0.92, 11.55265306122449, 30742.694428360377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 721, 33572.913241000686, 3090.973565738331, 0.95, 12.284081632653061, 30349.637734946275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 725, 34085.961563959565, 3110.389892118149, 0.95, 12.616326530612245, 30349.637734946275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 730, 33863.49933467679, 3095.1456888831617, 0.9333333333333333, 11.645714285714286, 30275.075902341123);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 731, 33494.14266688587, 1657.8769379008625, 0.9366666666666666, 11.435102040816327, 30552.565804322803);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 735, 33243.177106857096, 1774.8936440145549, 0.9333333333333333, 11.081632653061224, 30341.28103186967);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 740, 32947.05380307376, 2123.2100775372164, 0.9333333333333333, 10.485714285714286, 30341.28103186967);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 741, 33131.33555139496, 1687.521863532806, 0.9333333333333333, 11.285714285714286, 30540.222170775785);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 745, 33191.5422767095, 1873.7811403728806, 0.92, 11.27591836734694, 30453.07714801029);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 32655.553508558183, 1639.7706502895007, 0.92, 10.470204081632653, 30453.07714801029);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 751, 32662.871298962134, 1728.004280426585, 0.92, 10.327346938775511, 30348.354223180413);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 755, 33080.04285624457, 1702.6201847023053, 0.92, 10.115102040816327, 30348.354223180413);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 760, 32409.1105853943, 1596.9964371787771, 0.92, 10.030204081632654, 30348.354223180413);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 761, 32269.759620308258, 1754.4798251945822, 0.89, 9.750204081632653, 30166.0366735224);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 765, 32001.9760188755, 1527.8169756378284, 0.8933333333333333, 10.03591836734694, 30052.0366735224);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 770, 32229.77643083686, 1554.9632328064226, 0.8933333333333333, 10.026122448979592, 30052.0366735224);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 771, 32340.72897482872, 1569.9688574578136, 0.8933333333333333, 9.223673469387755, 30105.99179175063);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 775, 32467.085261069093, 1615.4431168975195, 0.8933333333333333, 9.638367346938775, 30105.99179175063);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 780, 32521.80873295041, 1818.7495479753384, 0.8933333333333333, 9.763265306122449, 30105.99179175063);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 781, 32240.614974606528, 1632.987572773769, 0.8733333333333333, 8.940408163265307, 30226.690666354258);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 785, 32163.99538527033, 1645.5113163322646, 0.87, 8.528163265306123, 30190.690666354258);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 790, 31505.62718242093, 957.0600270569842, 0.87, 8.281632653061225, 30190.690666354258);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 791, 31112.413025712525, 822.7587334350264, 0.87, 10.208163265306123, 30182.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 795, 31120.224747005937, 821.8569516305035, 0.87, 9.544489795918368, 30182.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 31238.898247142006, 847.1992109564831, 0.85, 8.21469387755102, 30182.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 31704.562489241296, 623.5256442352852, 0.8633333333333333, 7.194285714285714, 30537.5571788079);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 805, 31699.5157020591, 607.1306557078855, 0.87, 8.053877551020408, 30507.82776417047);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 810, 31559.955204583228, 604.3667840541812, 0.87, 7.586122448979592, 30507.82776417047);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 811, 31432.88159006295, 843.8511298871954, 0.8433333333333334, 9.079183673469387, 30477.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 815, 31391.733360277085, 865.0810773567946, 0.85, 8.772244897959183, 30363.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 820, 31480.967057641694, 830.2613241808589, 0.85, 8.728163265306122, 30363.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 821, 31746.74202567148, 462.66539599759574, 0.83, 9.54938775510204, 30861.515296594593);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 825, 31341.268825678926, 587.1426823199017, 0.87, 10.002448979591836, 30182.226965623726);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 830, 31252.671552522414, 931.1698794231736, 0.8566666666666667, 9.45061224489796, 30090.226965623726);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 831, 30899.714005182243, 741.7683857444707, 0.8466666666666667, 8.737142857142857, 30022.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 835, 30869.927520101162, 711.0574950760025, 0.8466666666666667, 8.360816326530612, 30022.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 840, 30622.98826630352, 460.4287668675353, 0.8466666666666667, 7.462857142857143, 30022.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 841, 31125.586103123576, 421.70092529381435, 0.8266666666666667, 7.528163265306122, 30264.258548594695);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 845, 31199.21431367219, 560.2160441208748, 0.8266666666666667, 8.413061224489796, 30183.258548594695);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 31171.20675113711, 504.26599547689653, 0.8266666666666667, 8.295510204081634, 30183.258548594695);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 851, 30823.36485429062, 497.7162687104636, 0.8366666666666667, 7.183673469387755, 30063.94034433352);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 855, 30840.237354682744, 470.1090978180357, 0.8366666666666667, 7.351836734693878, 30063.94034433352);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 860, 30664.088508880362, 421.4718486565304, 0.8366666666666667, 6.851428571428571, 30063.94034433352);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 861, 31192.76470190831, 426.10195724628727, 0.8333333333333334, 8.209795918367346, 30342.611234508735);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 865, 31163.432370727813, 450.41250884577147, 0.8366666666666667, 8.555102040816326, 30266.894436524635);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 870, 31102.80762955859, 427.35614452300916, 0.83, 7.9918367346938775, 30130.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 871, 30934.150330415854, 700.3394578709841, 0.8166666666666667, 8.11673469387755, 30022.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 875, 30822.642395187766, 654.0335672936673, 0.8166666666666667, 7.616326530612245, 30022.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 880, 30726.373970123528, 686.9830465909896, 0.8166666666666667, 6.9248979591836735, 30022.55702209115);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 881, 31180.76862998809, 381.1267712984959, 0.81, 7.44734693877551, 30329.479785496937);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 885, 31148.762499883127, 436.13044146358294, 0.8033333333333333, 7.102857142857143, 30230.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 890, 31116.89919892615, 390.8007477181792, 0.8033333333333333, 7.322448979591837, 30225.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 891, 30807.114180428063, 464.02787237485046, 0.79, 7.20734693877551, 30143.337591872252);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 895, 30786.671699013856, 517.0971765116608, 0.79, 6.396734693877551, 30143.337591872252);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 30807.986608234383, 530.8277164063312, 0.7866666666666666, 6.046530612244898, 30143.337591872252);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 30757.977360953097, 685.479644865356, 0.7933333333333333, 6.0253061224489795, 30084.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 905, 30508.445395840885, 613.6021579743933, 0.7933333333333333, 3.907755102040816, 30084.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 910, 30373.78780894279, 397.74090343984903, 0.7933333333333333, 3.3951020408163264, 30084.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 911, 30765.988912369325, 685.9771650455574, 0.7566666666666667, 3.496326530612245, 30270.831956480786);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 915, 30836.001014850423, 793.1553134819142, 0.7566666666666667, 3.082448979591837, 30270.831956480786);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 920, 30642.883547410973, 649.9996484296618, 0.7666666666666667, 3.199183673469388, 30251.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 921, 30353.5062433448, 379.95147766947474, 0.7666666666666667, 2.951020408163265, 30086.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 925, 30409.77647401039, 398.96842696419685, 0.7666666666666667, 3.2816326530612243, 30086.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 930, 30330.8662433448, 346.35277938360815, 0.7666666666666667, 2.5918367346938775, 30086.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 931, 30667.42064359428, 251.7138556828264, 0.7633333333333333, 3.8146938775510204, 30338.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 935, 30610.54867698847, 146.67778012434079, 0.7633333333333333, 3.043265306122449, 30330.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 940, 30628.36184884248, 148.62423844821006, 0.7633333333333333, 3.179591836734694, 30330.256474010355);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 941, 30482.056165112885, 295.3717496915196, 0.78, 3.3134693877551022, 30181.09789819109);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 945, 30520.002802785653, 315.92153316812465, 0.78, 2.996734693877551, 30181.09789819109);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 30527.99789819108, 340.47795037840206, 0.78, 3.0620408163265305, 30181.09789819109);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 951, 30622.07573486645, 334.71817181920096, 0.78, 3.3102040816326532, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 955, 30269.971283998806, 208.01706716882782, 0.78, 0.9306122448979591, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 960, 30262.33653074716, 154.638326931325, 0.78, 1.106938775510204, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 961, 30219.78812507771, 110.12688573761342, 0.78, 0.46040816326530615, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 965, 30205.403673193414, 87.00125347374573, 0.78, 0.2383673469387755, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 970, 30229.918781826877, 128.8561141837798, 0.78, 0.5706122448979591, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 971, 30201.720790502095, 67.50049432925564, 0.78, 0.23510204081632652, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 975, 30188.080790502092, 1.469965419604284E-11, 0.78, 0.0, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 980, 30217.120790502093, 116.1106017413341, 0.78, 0.34530612244897957, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 981, 30188.080790502092, 1.469965419604284E-11, 0.78, 0.0, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 985, 30188.080790502092, 1.469965419604284E-11, 0.78, 0.0, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 990, 30188.080790502092, 1.469965419604284E-11, 0.78, 0.0, 30188.080790502107);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 991, 30311.715138987576, 0.0, 0.78, 0.0, 30311.715138987576);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 995, 30311.715138987576, 0.0, 0.78, 0.0, 30311.715138987576);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 30311.715138987576, 0.0, 0.74, 0.0, 30311.715138987576);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 20, 73, 140, 58, 126, 35, 23, 37, 103, 101, 110, 98, 83, 9, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 129, 0, 46, 16, 14, 10, 91, 7, 74, 18, 52, 133, 17, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 16, 14, 10, 58, 140, 73, 20, 71, 9, 83, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 112, 62, 5, 48, 89, 91, 129, 0, 27, 92, 57, 107, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 55, 142, 118, 46, 130, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 33, 82, 54, 148, 85, 114, 119, 122, 42, 127, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 146, 36, 4, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 84, 67, 33, 82, 54, 148, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 123, 25, 117, 118, 142, 55, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 62, 112, 14, 16, 10, 19, 11, 26, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 47, 99, 70, 40, 13, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 84, 67, 33, 82, 54, 148, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 46, 112, 62, 5, 48, 89, 105, 133, 52, 18, 96, 74, 138, 7, 91, 129, 0, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 55, 142, 118, 3, 128, 123, 25, 117, 64, 65, 69, 21, 93, 87, 15, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 16, 14, 130, 19, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 47, 99, 70, 40, 13, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 8, 116, 6, 56, 19, 34, 85, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 16, 14, 10, 140, 73, 20, 71, 9, 83, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 138, 55, 142, 118, 30, 79, 121, 41, 88, 132, 137, 147, 66, 104, 141, 92, 27, 130, 46, 112, 5, 48, 89, 91, 129, 0, 62, 7, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 57, 107, 50, 124, 86, 144, 134, 139, 67, 84, 111, 131, 28, 45, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 54, 82, 33, 13, 70, 40, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 6, 116, 8, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 108, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 41, 121, 30, 79, 55, 142, 118, 117, 123, 25, 128, 65, 64, 3, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 78, 136, 87, 15, 21, 93, 69, 89, 5, 48, 62, 112, 14, 16, 10, 0, 129, 7, 91, 138, 74, 96, 43, 67, 84, 134, 139, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 47, 99, 70, 40, 13, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 84, 67, 72, 49, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 96, 74, 138, 7, 91, 129, 0, 27, 92, 57, 130, 46, 112, 62, 5, 48, 89, 105, 133, 52, 18, 142, 55, 118, 3, 64, 65, 128, 25, 123, 117, 69, 93, 87, 15, 21, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 16, 14, 44, 22, 97, 90, 108, 31, 61, 59, 76, 109, 149, 34, 85, 26, 11, 19, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 47, 99, 70, 40, 13, 135, 127, 33, 82, 54, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 19, 11, 26, 85, 149, 34, 61, 59, 109, 76, 86, 144, 124, 50, 60, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 93, 133, 52, 18, 74, 96, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 44, 22, 97, 130, 46, 112, 92, 27, 57, 24, 80, 68, 33, 82, 54, 148, 119, 114, 122, 42, 2, 135, 127, 13, 99, 70, 40, 47, 111, 131, 28, 45, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 16, 14, 10, 140, 58, 73, 20, 71, 9, 83, 105, 78, 136, 133, 52, 18, 74, 138, 55, 142, 118, 96, 3, 64, 65, 128, 123, 25, 117, 69, 21, 15, 87, 93, 23, 37, 103, 101, 110, 98, 35, 126, 17, 89, 5, 48, 62, 112, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 7, 91, 129, 0, 60, 124, 50, 86, 144, 80, 24, 68, 33, 82, 54, 148, 119, 114, 122, 42, 45, 28, 131, 111, 47, 99, 70, 40, 135, 2, 127, 13, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 80, 24, 68, 107, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 55, 142, 118, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 14, 16, 10, 31, 108, 90, 44, 22, 97, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 93, 65, 64, 3, 128, 25, 123, 117, 138, 7, 91, 129, 0, 27, 92, 57, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 127, 42, 122, 119, 114, 131, 111, 13, 99, 70, 40, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 68, 80, 24, 60, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 28, 131, 111, 13, 99, 70, 40, 47, 135, 127, 42, 2, 45, 122, 114, 119, 148, 54, 82, 26, 85, 149, 34, 61, 59, 76, 109, 97, 90, 108, 31, 44, 22, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 123, 25, 117, 118, 142, 55, 138, 7, 91, 129, 0, 92, 27, 57, 107, 66, 104, 141, 147, 132, 137, 88, 121, 41, 79, 30, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 71, 20, 73, 58, 140, 126, 16, 14, 10, 19, 11, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 43, 113, 143, 63, 39, 53, 1, 72, 49, 67, 84, 134, 139, 116, 6, 8, 56, 19, 11, 26, 85, 149, 34, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 140, 58, 126, 20, 73, 71, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 78, 136, 87, 15, 21, 69, 93, 133, 52, 18, 74, 96, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 112, 46, 130, 27, 92, 57, 107, 66, 104, 141, 147, 132, 88, 121, 41, 79, 30, 137, 68, 80, 24, 60, 124, 50, 86, 144, 148, 54, 82, 33, 28, 131, 111, 47, 13, 135, 2, 45, 122, 42, 127, 40, 70, 99, 119, 114, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 139, 134, 33, 82, 54, 148, 11, 19, 85, 26, 34, 61, 149, 59, 109, 76, 22, 97, 90, 108, 31, 44, 46, 130, 92, 27, 57, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 30, 79, 55, 142, 118, 96, 74, 18, 52, 133, 136, 78, 105, 89, 5, 48, 62, 0, 129, 91, 7, 138, 3, 64, 65, 128, 25, 123, 117, 21, 15, 87, 93, 69, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 10, 16, 14, 119, 114, 122, 42, 2, 135, 127, 40, 70, 99, 47, 13, 131, 28, 45, 111, 84, 67, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 68, 80, 24, 60, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 82, 54, 148, 11, 26, 85, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 73, 58, 140, 126, 20, 71, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 78, 136, 87, 15, 21, 93, 69, 65, 128, 25, 123, 117, 64, 3, 18, 52, 133, 105, 89, 48, 5, 62, 0, 129, 7, 91, 74, 96, 55, 142, 118, 138, 41, 121, 30, 79, 88, 132, 137, 147, 141, 104, 66, 107, 57, 27, 92, 130, 46, 112, 44, 19, 34, 114, 119, 122, 42, 2, 45, 28, 131, 111, 13, 99, 70, 40, 135, 127, 84, 67, 43, 1, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 8, 56, 6, 149, 34, 85, 26, 11, 19, 109, 76, 59, 61, 22, 97, 90, 108, 31, 44, 16, 14, 10, 140, 73, 20, 71, 9, 83, 35, 126, 58, 98, 101, 110, 103, 37, 23, 17, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 18, 74, 96, 138, 55, 142, 118, 117, 123, 25, 128, 52, 133, 105, 89, 5, 48, 62, 112, 46, 130, 92, 27, 57, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 30, 79, 7, 91, 129, 0, 60, 124, 50, 86, 144, 80, 24, 68, 33, 82, 54, 148, 119, 114, 131, 28, 45, 2, 135, 127, 42, 122, 13, 70, 40, 99, 47, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 80, 24, 68, 107, 66, 104, 141, 27, 92, 130, 46, 108, 90, 97, 22, 44, 31, 14, 16, 10, 140, 58, 73, 20, 71, 112, 9, 83, 35, 126, 23, 37, 103, 101, 110, 98, 17, 78, 136, 133, 52, 18, 74, 96, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 0, 129, 91, 7, 138, 79, 30, 88, 41, 121, 132, 137, 147, 57, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 131, 111, 13, 99, 70, 40, 47, 135, 2, 45, 122, 114, 119, 42, 127, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 86, 144, 124, 50, 60, 80, 24, 68, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 30, 79, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 136, 78, 105, 89, 5, 48, 62, 0, 129, 91, 7, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 126, 20, 73, 58, 140, 112, 9, 83, 71, 16, 14, 10, 31, 44, 97, 22, 90, 108, 46, 130, 27, 92, 57, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 148, 119, 114, 122, 42, 2, 45, 28, 131, 111, 13, 135, 127, 40, 70, 99, 47, 33, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 19, 11, 26, 85, 149, 34, 61, 59, 109, 76, 22, 97, 90, 108, 31, 10, 16, 14, 44, 46, 130, 92, 27, 57, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 79, 30, 55, 142, 118, 96, 138, 7, 91, 74, 18, 52, 133, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 89, 48, 5, 62, 0, 129, 60, 124, 50, 86, 144, 80, 24, 68, 33, 82, 54, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 99, 47, 40, 70, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 8, 6, 56, 86, 144, 124, 50, 60, 80, 24, 68, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 30, 79, 55, 142, 118, 96, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 136, 133, 52, 18, 74, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 130, 92, 27, 57, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 131, 111, 13, 135, 2, 45, 122, 42, 127, 114, 119, 40, 70, 99, 47, 22, 97, 90, 108, 31, 10, 16, 14, 44, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 80, 24, 68, 107, 57, 27, 92, 130, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 73, 58, 140, 126, 20, 71, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 18, 52, 133, 105, 89, 48, 5, 62, 0, 129, 91, 7, 138, 55, 142, 118, 117, 123, 25, 128, 74, 96, 79, 30, 88, 41, 121, 132, 137, 147, 141, 104, 66, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 99, 70, 40, 47, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 80, 24, 107, 57, 27, 92, 130, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 73, 20, 71, 112, 9, 83, 35, 126, 58, 140, 98, 101, 110, 103, 37, 23, 17, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 123, 25, 117, 118, 142, 55, 138, 79, 30, 88, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 133, 52, 18, 74, 96, 132, 137, 147, 141, 104, 66, 68, 33, 82, 54, 148, 11, 19, 85, 26, 149, 61, 59, 109, 76, 34, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 99, 70, 40, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 80, 24, 68, 107, 66, 104, 141, 147, 132, 137, 88, 121, 41, 7, 138, 55, 142, 118, 96, 79, 30, 91, 129, 0, 62, 5, 48, 89, 105, 133, 52, 18, 74, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 92, 27, 57, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 114, 119, 122, 42, 2, 135, 13, 131, 111, 28, 45, 33, 82, 54, 148, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 131, 111, 13, 135, 127, 42, 122, 45, 2, 70, 40, 99, 47, 114, 119, 34, 61, 149, 59, 76, 109, 22, 97, 90, 108, 31, 44, 46, 130, 92, 27, 57, 107, 66, 104, 141, 147, 132, 137, 88, 41, 121, 79, 30, 138, 55, 142, 118, 3, 64, 65, 128, 25, 123, 117, 96, 74, 18, 52, 133, 105, 78, 136, 87, 15, 21, 93, 69, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 48, 5, 62, 0, 129, 91, 7, 112, 16, 14, 10, 24, 80, 60, 124, 50, 86, 144, 68, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 66, 104, 141, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 92, 27, 57, 109, 76, 59, 61, 149, 85, 26, 11, 19, 148, 54, 82, 33, 28, 131, 111, 13, 70, 40, 99, 47, 135, 2, 45, 122, 114, 119, 127, 42, 34, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 66, 104, 141, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 92, 27, 57, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 131, 111, 47, 99, 70, 40, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 66, 104, 141, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 92, 27, 57, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 131, 111, 47, 99, 70, 40, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 130, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 73, 140, 58, 126, 20, 71, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 78, 136, 133, 52, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 105, 89, 48, 5, 62, 0, 129, 7, 91, 121, 41, 79, 30, 88, 132, 137, 147, 66, 104, 141, 109, 76, 59, 61, 149, 34, 85, 26, 11, 148, 54, 82, 33, 28, 131, 111, 13, 99, 70, 40, 135, 2, 45, 122, 42, 127, 114, 119, 19, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 130, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 73, 58, 140, 126, 20, 71, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 18, 74, 96, 138, 55, 142, 118, 117, 123, 25, 128, 52, 133, 105, 89, 48, 5, 62, 0, 129, 91, 7, 121, 41, 79, 30, 88, 132, 137, 147, 141, 104, 66, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 131, 111, 13, 135, 2, 45, 122, 42, 127, 114, 119, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 130, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 73, 140, 58, 126, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 129, 0, 141, 104, 66, 147, 132, 137, 88, 121, 41, 79, 30, 74, 96, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 131, 111, 13, 70, 40, 99, 47, 135, 2, 45, 122, 42, 127, 114, 119, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 41, 121, 79, 30, 55, 142, 118, 96, 74, 18, 52, 133, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 138, 7, 91, 129, 0, 62, 5, 48, 89, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 93, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 47, 99, 70, 40, 13, 33, 82, 54, 148, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 41, 121, 79, 30, 55, 142, 118, 96, 74, 18, 52, 133, 136, 78, 105, 89, 48, 5, 62, 0, 129, 91, 7, 138, 3, 64, 65, 128, 123, 25, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 114, 119, 148, 54, 82, 33, 28, 45, 122, 42, 127, 135, 13, 131, 111, 47, 99, 70, 40, 2, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 41, 121, 30, 79, 55, 142, 118, 96, 74, 18, 52, 133, 136, 78, 105, 89, 48, 5, 62, 0, 129, 91, 7, 138, 3, 64, 65, 128, 123, 25, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 114, 119, 122, 42, 127, 135, 2, 45, 28, 33, 82, 54, 148, 131, 111, 13, 99, 70, 40, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 41, 121, 30, 79, 55, 142, 118, 96, 74, 18, 52, 133, 136, 78, 105, 89, 48, 5, 62, 0, 129, 91, 7, 138, 3, 64, 65, 128, 123, 25, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 99, 70, 40, 47, 111, 131, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 41, 121, 79, 30, 55, 142, 118, 117, 123, 25, 128, 65, 64, 3, 18, 74, 96, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 133, 52, 87, 15, 21, 69, 93, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 114, 119, 148, 54, 82, 33, 28, 45, 2, 42, 122, 131, 111, 13, 135, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 41, 121, 30, 79, 55, 142, 118, 96, 138, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 148, 54, 82, 33, 28, 131, 111, 47, 99, 70, 40, 13, 135, 2, 45, 122, 42, 127, 114, 119, 19, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 41, 121, 79, 30, 55, 142, 96, 74, 18, 52, 133, 136, 78, 105, 89, 48, 5, 62, 0, 129, 91, 7, 138, 118, 117, 123, 25, 128, 64, 65, 3, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 99, 70, 40, 47, 111, 131, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 121, 41, 79, 30, 55, 142, 118, 96, 3, 64, 65, 128, 123, 25, 117, 69, 21, 15, 87, 93, 136, 78, 105, 89, 48, 5, 62, 0, 129, 91, 7, 138, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 58, 140, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 70, 40, 99, 47, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 138, 96, 74, 18, 52, 133, 136, 78, 105, 89, 48, 5, 62, 0, 129, 91, 7, 55, 142, 118, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 58, 140, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 138, 55, 142, 118, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 42, 122, 114, 119, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 138, 55, 142, 118, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 42, 122, 114, 119, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 138, 55, 142, 118, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 13, 131, 111, 47, 99, 70, 40, 127, 42, 122, 114, 119, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 55, 138, 3, 64, 65, 128, 25, 123, 117, 118, 142, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 131, 111, 13, 135, 2, 45, 122, 42, 127, 114, 119, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 138, 55, 142, 118, 96, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 10, 16, 14, 108, 90, 97, 22, 44, 31, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 42, 122, 114, 119, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 14, 16, 130, 76, 109, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 42, 122, 114, 119, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 70, 99, 47, 40, 127, 42, 122, 114, 119, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 10, 16, 14, 108, 90, 97, 22, 44, 31, 46, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 122, 114, 119, 42, 127, 40, 70, 99, 47, 13, 135, 2, 45, 28, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 55, 138, 118, 142, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 111, 28, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 114, 119, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 42, 122, 2, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 18, 74, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 28, 111, 131, 13, 99, 70, 40, 135, 2, 45, 122, 114, 119, 127, 42, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 111, 28, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 42, 122, 114, 119, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 2, 42, 122, 119, 114, 127, 135, 13, 70, 40, 99, 47, 131, 111, 28, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 98, 101, 110, 103, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 42, 122, 114, 119, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 98, 101, 110, 103, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 76, 109, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 28, 131, 111, 13, 135, 42, 122, 114, 119, 127, 45, 2, 70, 40, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 98, 101, 110, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 52, 133, 17, 23, 37, 103, 101, 110, 98, 35, 83, 9, 71, 112, 140, 58, 126, 73, 20, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 135, 127, 42, 122, 119, 114, 28, 131, 111, 13, 70, 40, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 14, 16, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 2, 135, 13, 70, 40, 99, 47, 131, 111, 28, 42, 122, 119, 114, 127, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 98, 101, 110, 103, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 98, 101, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 109, 76, 59, 61, 149, 85, 19, 34, 26, 11, 148, 54, 82, 33, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 101, 110, 98, 35, 126, 20, 73, 140, 58, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 131, 111, 13, 135, 2, 42, 122, 114, 119, 45, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 135, 28, 111, 131, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 112, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 130, 76, 109, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 2, 42, 122, 114, 119, 127, 135, 13, 99, 70, 40, 47, 131, 111, 28, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 14, 16, 10, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 42, 122, 114, 119, 127, 135, 13, 99, 70, 40, 47, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 127, 42, 122, 119, 114, 2, 70, 40, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 14, 16, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 114, 119, 42, 127, 40, 70, 99, 47, 13, 135, 2, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 28, 111, 131, 13, 135, 2, 42, 122, 119, 114, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 111, 131, 13, 135, 2, 45, 122, 114, 119, 127, 42, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 16, 14, 108, 90, 97, 22, 44, 31, 46, 112, 130, 76, 109, 59, 61, 149, 85, 26, 11, 19, 34, 148, 54, 82, 33, 45, 28, 131, 111, 13, 135, 2, 42, 122, 119, 114, 127, 40, 70, 99, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 16, 14, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 13, 99, 70, 40, 47, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 42, 122, 119, 114, 127, 135, 13, 99, 70, 40, 47, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 45, 2, 42, 122, 119, 114, 127, 135, 40, 70, 99, 47, 13, 131, 28, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 82, 54, 33, 28, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 148, 54, 82, 33, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 47, 13, 131, 111, 28, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 42, 122, 114, 119, 127, 40, 70, 99, 13, 131, 111, 47, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 85, 26, 11, 19, 34, 119, 114, 127, 42, 122, 45, 2, 135, 40, 70, 99, 47, 13, 131, 111, 28, 33, 82, 54, 148, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 119, 114, 127, 135, 70, 40, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 135, 42, 122, 119, 114, 127, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 2, 42, 122, 114, 119, 127, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 114, 119, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 70, 99, 40, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[38, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 77, 95, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 67, 84, 134, 139, 116, 6, 8, 56, 86, 144, 124, 50, 60, 24, 80, 68, 107, 57, 27, 92, 141, 104, 66, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 129, 0, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 93, 69, 65, 64, 3, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 18, 133, 52, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 10, 14, 16, 31, 108, 90, 97, 22, 44, 46, 112, 130, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 148, 54, 82, 33, 28, 45, 122, 119, 114, 127, 42, 2, 135, 40, 70, 99, 47, 13, 131, 111, 38]");
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 100, 1.0, 5.0);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(24207.949038511262);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(24207.949038511262);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 31671.967452268564, 1903.8917677261363, 0.0, 54.80326530612245, 28431.703154969287);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 26439.174092913174, 2696.7533600218103, 0.565, 3.9640816326530612, 23763.86693311295);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 27080.02137862623, 2852.8822710353866, 0.5, 4.310204081632653, 23762.86693311295);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 28526.277259386246, 4228.955396034003, 0.5, 4.878367346938775, 24063.667500921692);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 26019.606942696864, 3689.284951154049, 0.65, 7.580408163265306, 23734.407342598315);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 25347.423545357728, 2437.2287234128908, 0.805, 8.818775510204082, 23143.388752174025);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 31253.29945627397, 3536.7479343403884, 0.765, 12.58530612244898, 24873.846336426275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 29299.959622476028, 4921.578576732953, 0.865, 10.249795918367347, 23898.483164032572);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 28198.176781851897, 4974.769445874005, 0.87, 8.156734693877551, 23735.122594561282);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 29440.094200581956, 2257.2273802331442, 0.865, 15.65469387755102, 25019.939621277514);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 27667.661132358466, 2516.632421101177, 0.835, 9.166530612244898, 24296.525971108895);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 24897.82718028709, 791.91591006983, 0.82, 3.88734693877551, 24296.525971108895);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 25980.88635999989, 1025.9786711932309, 0.845, 11.439183673469389, 24457.949738546566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 24391.315462401297, 894.321494050929, 0.885, 9.124081632653061, 23553.949738546566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 24064.3687297059, 724.4570994653989, 0.815, 6.470204081632653, 23454.949738546566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 25998.081354102167, 736.0268206327389, 0.785, 11.946122448979592, 24994.846205002093);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 25217.78724680497, 690.1976122573091, 0.86, 10.88, 24424.65686157118);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 24800.972924734568, 172.50590256058192, 0.84, 6.1420408163265305, 24325.65686157118);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 25912.732353097672, 919.9898958582086, 0.84, 7.880816326530613, 24897.63756549615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 25018.200894599442, 542.9872279994199, 0.915, 4.42530612244898, 24346.63756549615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 24964.234193315446, 813.005508264084, 0.83, 4.977142857142857, 24315.63756549615);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 25027.85638845412, 635.6609652406778, 0.825, 4.993469387755102, 24535.762698017134);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 24751.911157327057, 1022.9117321639451, 0.78, 4.47265306122449, 24207.383590017867);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 24469.9226824755, 799.9394751865369, 0.735, 2.942857142857143, 24200.383590017867);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 24262.59253197207, 202.37584995909526, 0.74, 2.5159183673469387, 24177.46469712597);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 24197.164697125972, 44.75750991596327, 0.74, 1.6693877551020408, 24177.46469712597);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 24185.184697125973, 30.733907353678436, 0.68, 0.6114285714285714, 24177.46469712597);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 24240.667082080996, 62.854317346034165, 0.68, 1.5844897959183672, 24207.949038511262);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 24218.001391845686, 46.247070545106084, 0.68, 0.3893877551020408, 24207.949038511262);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 24207.949038511277, 1.469965419604284E-11, 0.63, 0.0, 24207.949038511262);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 92, 27, 0, 62, 5, 48, 89, 78, 52, 37, 35, 98, 23, 17, 87, 93, 21, 15, 69, 3, 64, 65, 25, 18, 96, 55, 74, 91, 7, 30, 79, 88, 41, 66, 46, 97, 22, 44, 90, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 37, 17, 23, 98, 78, 52, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 51, 77, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 18, 96, 74, 91, 7, 41, 88, 30, 79, 55, 3, 64, 65, 25, 69, 21, 15, 87, 93, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 17, 23, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 93, 15, 21, 69, 65, 25, 64, 3, 96, 74, 91, 7, 41, 88, 30, 79, 55, 18, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 89, 48, 5, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 2, 13, 70, 40, 99, 47, 28, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 42, 2, 13, 70, 40, 99, 47, 28, 45, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 28, 2, 13, 47, 99, 70, 40, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 28, 2, 13, 47, 99, 70, 40, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 45, 28, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 45, 28, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 45, 28, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 45, 28, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 2, 42, 40, 70, 99, 47, 13, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 74, 18, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 80, 24, 60, 50, 86, 56, 6, 8, 33, 45, 2, 42, 40, 70, 99, 47, 13, 28, 54, 82, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 24, 80, 60, 50, 86, 56, 6, 8, 54, 82, 33, 45, 28, 2, 13, 47, 99, 70, 40, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 63, 39, 53, 1, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 24, 80, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 28, 45, 2, 42, 40, 70, 99, 47, 13, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 57, 66, 24, 80, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 8, 6, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 8, 6, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 92, 27, 66, 57, 80, 24, 60, 50, 86, 56, 8, 6, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 38, 29, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 80, 24, 60, 50, 86, 56, 6, 8, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 80, 24, 60, 50, 86, 56, 8, 6, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 13, 47, 99, 70, 40, 42, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 8, 6, 56, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 82, 54, 33, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 77, 95, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 6, 8, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[11, 19, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 18, 74, 96, 55, 79, 30, 88, 41, 7, 91, 5, 48, 89, 62, 0, 46, 27, 92, 57, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 80, 24, 60, 50, 86, 56, 8, 6, 33, 82, 54, 11]");
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.1, 100, 1.0, 5.0);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(30222.272662569678);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(30222.272662569678);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 40284.6246055206, 2461.8304778529255, 0.0, 80.8130612244898, 36554.3909905504);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 33981.96884008325, 2970.66030740614, 0.49666666666666665, 7.860408163265306, 31305.608588398663);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 32709.46862937758, 2433.5681054245047, 0.5133333333333333, 8.579591836734695, 31029.74940460832);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 37164.551128947984, 927.9497216966936, 0.5133333333333333, 10.853061224489796, 32498.563216388346);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 33898.36375481864, 2436.0588138212966, 0.77, 14.617142857142857, 29728.845070787014);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 33619.718684302985, 2902.623049919979, 0.84, 11.929795918367347, 29665.617480501227);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 37203.09918503974, 2257.057263728182, 0.83, 25.786938775510205, 32370.117893762013);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 33188.674158266265, 3087.681699853685, 1.0, 12.449795918367347, 30233.425525468385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 32401.346735674426, 3106.118780140291, 0.9833333333333333, 11.991020408163266, 29502.540940554823);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 34008.62262578586, 2830.7489954894636, 0.9766666666666667, 12.555102040816326, 30258.38931599452);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 32328.49548971055, 2623.7512026200307, 0.9733333333333334, 10.680816326530612, 29601.316766928856);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 31595.882336073773, 2497.142236721454, 0.8533333333333334, 7.179591836734694, 29493.316766928856);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 35444.0491781364, 1021.6807148617213, 0.8533333333333334, 12.015510204081632, 30918.10518099631);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 31249.975348544536, 2292.7428683820526, 0.91, 5.933877551020408, 29679.960432968437);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 31725.82553829949, 3212.8547997640644, 0.7933333333333333, 5.896326530612245, 29629.960432968437);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 33444.55080382375, 2522.1223765524282, 0.78, 7.948571428571428, 30240.065484692735);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 30573.290371716208, 1457.326126679742, 0.7633333333333333, 2.8146938775510204, 29915.421040537924);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 30059.845288008488, 297.57190701644436, 0.6933333333333334, 1.4359183673469387, 29915.421040537924);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 36820.49539631569, 423.32346311460145, 0.6933333333333334, 6.963265306122449, 31596.916329662603);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 30724.62592157383, 963.6673266795204, 0.72, 3.975510204081633, 30036.707821170992);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 30625.788657043482, 1157.295503129916, 0.69, 2.6514285714285712, 30036.707821170992);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 31749.254576477284, 813.5006328184409, 0.6766666666666666, 4.325714285714286, 30960.671087901377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 31862.293802185683, 1331.8857036083557, 0.66, 6.486530612244898, 30713.671087901377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 31707.02546155907, 1180.8225797845798, 0.63, 4.140408163265306, 30713.671087901377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 30787.009266550966, 439.78678460518273, 0.6366666666666667, 4.318367346938776, 30133.272662569678);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 30449.616959830943, 398.8246740323753, 0.6366666666666667, 2.8783673469387754, 30133.272662569678);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 30197.278573794727, 198.764540571962, 0.6566666666666666, 0.5608163265306122, 30133.272662569678);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 30369.545667577688, 160.58178152315412, 0.6566666666666666, 0.23918367346938776, 30337.338079855832);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 30615.828324415957, 508.93170825712997, 0.6433333333333333, 1.6359183673469389, 30222.272662569678);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 30222.272662569696, 1.837456774505355E-11, 0.6066666666666667, 0.0, 30222.272662569678);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 20, 73, 140, 58, 126, 35, 23, 37, 103, 101, 110, 98, 83, 9, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 129, 0, 46, 16, 14, 10, 91, 7, 74, 18, 52, 133, 17, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 127, 42, 122, 114, 119, 148, 54, 82, 33, 28, 131, 45, 2, 13, 135, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 16, 14, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 27, 92, 57, 107, 66, 141, 104, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 129, 0, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[38, 120, 29, 106, 100, 47, 99, 70, 40, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 45, 2, 13, 135, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 16, 14, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 129, 0, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 77, 51, 95, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 45, 2, 13, 135, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 123, 25, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 25, 123, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 25, 123, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 25, 123, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 85, 26, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 25, 123, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 9, 83, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 140, 73, 20, 71, 9, 83, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 64, 3, 128, 25, 123, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 58, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 108, 31, 90, 44, 14, 16, 10, 140, 73, 20, 71, 9, 83, 112, 62, 5, 48, 89, 105, 78, 136, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 74, 18, 52, 133, 17, 93, 23, 37, 103, 101, 110, 98, 35, 126, 58, 46, 130, 92, 27, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 118, 55, 142, 138, 7, 91, 0, 129, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 23, 37, 35, 71, 9, 83, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 74, 18, 52, 133, 136, 78, 105, 89, 5, 48, 62, 112, 0, 129, 66, 104, 141, 147, 137, 132, 88, 121, 41, 79, 30, 55, 142, 118, 138, 7, 91, 27, 92, 130, 46, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 23, 37, 35, 71, 9, 83, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 121, 41, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 35, 71, 9, 83, 37, 23, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 121, 41, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 35, 71, 9, 83, 37, 23, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 41, 121, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 35, 71, 9, 83, 37, 23, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 41, 121, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 8, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 35, 71, 9, 83, 37, 23, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 41, 121, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 8, 116, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 35, 71, 9, 83, 37, 23, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 121, 41, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 8, 116, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 35, 71, 9, 83, 37, 23, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 41, 121, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 8, 116, 6, 56, 19, 11, 26, 85, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 98, 101, 110, 103, 35, 71, 9, 83, 37, 23, 17, 93, 87, 15, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 41, 121, 79, 30, 88, 132, 137, 147, 104, 141, 66, 57, 107, 60, 124, 50, 86, 144, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 24, 80, 60, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 87, 15, 21, 69, 128, 25, 123, 117, 118, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 121, 41, 79, 30, 96, 74, 18, 3, 64, 65, 93, 23, 37, 35, 71, 9, 83, 17, 101, 110, 103, 98, 126, 140, 58, 73, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 78, 136, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 121, 41, 79, 30, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 27, 92, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 121, 41, 30, 79, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 41, 121, 79, 30, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 121, 41, 30, 79, 118, 3, 64, 128, 25, 123, 117, 65, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 121, 41, 30, 79, 118, 3, 64, 128, 25, 123, 117, 65, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 41, 121, 79, 30, 118, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 121, 41, 30, 79, 118, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 121, 41, 30, 79, 118, 3, 64, 65, 117, 123, 25, 128, 69, 87, 15, 21, 93, 17, 23, 37, 35, 98, 101, 110, 103, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 55, 138, 7, 91, 0, 129, 104, 141, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 85, 19, 11, 26, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 79, 30, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 118, 3, 64, 65, 128, 25, 123, 117, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 79, 30, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 118, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 79, 30, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 142, 118, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 140, 58, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 58, 140, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 58, 140, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 58, 140, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 58, 140, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 58, 140, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 62, 5, 48, 89, 105, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 17, 23, 37, 103, 98, 101, 110, 35, 83, 9, 71, 73, 58, 140, 126, 20, 10, 16, 14, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 87, 15, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 87, 15, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 87, 15, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 87, 15, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 87, 15, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 87, 15, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 15, 87, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 15, 87, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 93, 15, 87, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 133, 52, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 76, 109, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 117, 123, 25, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 69, 21, 15, 87, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 34, 26, 19, 11, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 113, 43, 49, 115, 1, 143, 72, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 113, 72, 49, 115, 1, 143, 43, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 43, 1, 143, 113, 72, 49, 115, 94, 125, 81, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 32, 75, 12, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[38, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[38, 120, 29, 106, 100, 51, 95, 77, 47, 99, 70, 40, 13, 135, 2, 45, 127, 42, 122, 114, 119, 148, 54, 82, 33, 131, 28, 111, 84, 67, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 107, 57, 92, 27, 141, 104, 66, 147, 137, 132, 88, 41, 121, 30, 79, 118, 142, 55, 138, 7, 91, 0, 129, 130, 46, 112, 9, 83, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 52, 133, 18, 74, 96, 3, 64, 65, 25, 123, 117, 128, 15, 87, 21, 69, 93, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 24, 80, 68, 63, 39, 53, 1, 143, 113, 72, 49, 43, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 146, 38]");
    }

    @Test
    public void test_mmas_mem_moving_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_75_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_MADTSP mmas_mem_madtsp = new MMAS_MEM_MADTSP(graph, 0.8, 1000, 0.75, 10, 1.0, 5.0);
        mmas_mem_madtsp.setMmasSeed(1);
        mmas_mem_madtsp.setDbgpSeed(1);
        mmas_mem_madtsp.setStatisticInterval(1);
        mmas_mem_madtsp.setShowLog(false);
        mmas_mem_madtsp.run();

        assertThat(mmas_mem_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(38906.457230965956);
        assertThat(mmas_mem_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(38906.457230965956);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getGlobalStatistics())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 31, 10]");

        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1, 46813.33363202887, 3211.946543021583, 0.0, 56.90775510204082, 39102.466113931514);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 5, 35554.57594816564, 2624.4671475129076, 0.615, 3.0220408163265304, 34045.74227704834);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 10, 34365.52002605536, 1879.3858827868253, 0.51, 2.9779591836734696, 33520.61458584829);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 11, 47619.84588110303, 3108.0198909515466, 0.475, 29.201632653061225, 41359.48469369874);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 15, 38983.03434828908, 2732.2024479705965, 1.585, 40.25632653061224, 34711.41466602421);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 20, 36782.76880208659, 3458.0329627529495, 1.705, 31.12326530612245, 31058.71418736354);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 21, 46532.22798183458, 3635.3438981625895, 1.415, 43.65061224489796, 41130.07319112739);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 25, 43936.353103015404, 3306.7793387986862, 1.755, 39.2734693877551, 38565.11856505332);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 30, 43418.25931972373, 3856.6140998600085, 1.76, 33.68734693877551, 36161.83674444297);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 31, 45097.92906639589, 3849.646327382209, 1.665, 41.23918367346939, 38184.39556807923);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 35, 43383.597826477315, 4191.399120242158, 1.89, 38.02204081632653, 35186.916706109245);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 40, 40325.68156087467, 3464.178846770732, 2.02, 33.4269387755102, 34483.15689901489);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 41, 43463.47693940858, 3392.9604761647483, 1.995, 37.499591836734695, 36234.5534298964);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 45, 43893.15952172496, 3319.1589255476733, 1.995, 36.11265306122449, 36234.5534298964);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 50, 43030.01518206741, 3686.9185472845843, 2.145, 35.02204081632653, 34008.97409401987);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 51, 40489.47622180532, 3022.8107410223784, 1.99, 38.76408163265306, 35907.472593025865);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 55, 39120.55406775891, 3389.10457165316, 2.105, 34.816326530612244, 31312.613052501114);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 60, 38809.22662152537, 3286.774165863091, 2.105, 34.46612244897959, 31312.613052501114);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 61, 45578.027798118375, 3639.6326422071534, 1.995, 37.99918367346939, 39780.64536451257);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 65, 44007.189463203016, 3422.673958039908, 2.18, 37.84897959183674, 36517.61805697143);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 70, 42417.33202235211, 2708.484656805608, 2.195, 33.666938775510204, 36263.77070201377);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 71, 41771.22250015209, 2657.435086645669, 2.13, 35.8065306122449, 36870.21779824295);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 75, 40730.063082649634, 3066.9131859103018, 2.24, 32.14857142857143, 34993.5013708362);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 80, 40195.62717060481, 2807.345531176936, 2.28, 29.835102040816327, 34269.14163868065);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 81, 42244.402053868806, 2701.692462464599, 2.17, 36.9404081632653, 37312.871299624516);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 85, 41570.56692778246, 3322.4457513432317, 2.31, 33.64244897959183, 35157.33778326495);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 90, 41378.72150625842, 2896.145379540859, 2.34, 33.89959183673469, 34533.34831759548);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 91, 44485.91723784037, 3331.6411990749643, 2.28, 34.89142857142857, 37285.710267858674);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 95, 41879.572245583964, 3243.1916366177675, 2.365, 34.309387755102044, 35317.85952802789);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 100, 41473.7692385799, 3785.703339411402, 2.385, 33.96081632653061, 34681.75671597119);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 101, 43982.57667867504, 4308.445945824026, 2.315, 36.04, 36203.13519279071);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 105, 43338.66248552587, 4178.631818103609, 2.34, 35.200816326530614, 34224.7888405391);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 110, 40971.96055527045, 3525.2607249582366, 2.34, 32.10857142857143, 34224.7888405391);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 111, 44651.534824274946, 3781.3520661044545, 2.315, 34.626938775510204, 38128.69123048446);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 115, 44274.698694439074, 3626.9132937763025, 2.42, 34.56897959183674, 35814.191388146726);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 120, 42876.78331157742, 3172.991357246455, 2.475, 33.29551020408163, 35360.54366573284);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 121, 45132.214760831266, 3432.4106482288494, 2.295, 40.28081632653061, 39649.02847657514);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 125, 43120.89241158583, 2691.3607828806894, 2.355, 40.030204081632654, 37111.58015392125);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 130, 42355.57417479434, 3121.744353118912, 2.42, 38.202448979591836, 37056.20634244057);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 131, 42068.689447690056, 3146.935885386825, 2.34, 37.202448979591836, 36505.00268836381);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 135, 42044.704778620246, 3508.5158948728185, 2.38, 36.87020408163265, 35272.57113888916);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 140, 40527.170762559064, 3172.078483276853, 2.41, 34.66448979591837, 35245.60870795103);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 141, 42852.419993908166, 3155.6841364217776, 2.405, 37.09795918367347, 36818.17515295981);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 145, 42284.76355808096, 3823.316155931694, 2.45, 34.413061224489795, 35909.08479887243);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 150, 41774.0082264569, 3256.8559362717465, 2.475, 32.48897959183673, 35059.51253588315);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 151, 43971.87477754, 3682.6704201933335, 2.475, 34.375510204081635, 37735.69581172106);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 155, 42618.64057382772, 3734.302156513932, 2.525, 32.30285714285714, 36972.30466207976);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 160, 43143.91942073125, 4017.6755001407996, 2.52, 32.96408163265306, 36179.57197647239);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 161, 43522.49235894841, 3115.4327073687973, 2.38, 32.27918367346939, 37995.53279883566);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 165, 41610.7207736688, 3183.657288676989, 2.47, 30.50857142857143, 36540.002878778294);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 170, 41745.48536698524, 2866.2876255495735, 2.44, 30.09469387755102, 35837.93482180402);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 171, 42374.216260196976, 3791.8449772772146, 2.4, 33.19591836734694, 36011.47483005532);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 175, 41234.984678924506, 3444.506146733432, 2.41, 31.02938775510204, 34330.91068019914);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 180, 41369.75852942517, 3235.620125558416, 2.41, 31.77795918367347, 34330.91068019914);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 181, 43861.57224033845, 3585.9028685443404, 2.455, 34.031020408163265, 37821.12336625871);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 185, 42746.48282728134, 3444.689019075235, 2.55, 33.48408163265306, 36547.599989950766);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 190, 41850.82858577432, 3498.121525008711, 2.56, 31.04408163265306, 35228.67827304645);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 191, 44160.001238118166, 3236.3545586833834, 2.37, 34.37469387755102, 39143.9852196702);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 195, 43710.29176577985, 3242.8255169866284, 2.425, 32.85387755102041, 37923.23982344463);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 200, 42912.38641002127, 3079.3612810656, 2.48, 31.842448979591836, 35571.7011426918);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 201, 43313.539775034966, 3365.700991467509, 2.45, 34.310204081632655, 36978.96908648178);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 205, 42785.426582388835, 2612.0966351306283, 2.495, 33.928163265306125, 36396.324019827654);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 210, 42752.7806975352, 3258.16920865485, 2.495, 32.56979591836735, 35200.13363754088);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 211, 44420.1466092266, 3290.0792446465057, 2.4, 36.835102040816324, 38204.05124480066);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 215, 44028.01482092988, 2924.484531371714, 2.49, 36.55591836734694, 36765.41891848958);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 220, 44308.93618507081, 3454.824496263387, 2.525, 34.972244897959186, 36658.56500757954);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 221, 45361.49452049817, 2652.357538518322, 2.465, 32.70122448979592, 40304.89710166557);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 225, 44165.95155193676, 3051.9140219449678, 2.495, 33.242448979591835, 38305.85186374463);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 230, 44867.66070166593, 3197.130620753348, 2.5, 31.129795918367346, 36644.51108283608);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 231, 44494.393029177554, 2864.3776510927364, 2.51, 28.57795918367347, 39977.43091932223);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 235, 44291.70576103705, 3026.526474980271, 2.545, 27.72734693877551, 38024.83075193734);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 240, 43036.96987987793, 2850.548553107948, 2.59, 26.32081632653061, 36184.535011557164);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 241, 40805.64764023411, 2764.159301784628, 2.415, 32.587755102040816, 35929.75309848961);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 245, 41857.61866010638, 3844.0301069682846, 2.41, 30.329795918367346, 35070.330385526875);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 250, 41053.34843384063, 2775.5989288811274, 2.4, 29.99918367346939, 34055.552829456225);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 251, 43476.36472068648, 3686.80027303827, 2.375, 33.48571428571429, 35814.116053743914);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 255, 42564.19125284914, 2968.214014131089, 2.375, 33.27183673469388, 35814.116053743914);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 260, 41565.23604554068, 2924.551916962715, 2.375, 32.372244897959185, 35814.116053743914);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 261, 41812.657372934875, 2877.202126372065, 2.345, 27.91591836734694, 35273.84958359833);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 265, 40690.292032275065, 2655.0698814336397, 2.395, 28.50857142857143, 34121.48703279983);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 270, 40074.19700182378, 3218.8088893886734, 2.4, 28.41877551020408, 33797.63978749298);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 271, 43548.94446578601, 2757.757259862622, 2.32, 28.991020408163266, 38224.474078021856);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 275, 42449.33925551908, 2778.018912675029, 2.37, 27.504489795918367, 37254.37062731572);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 280, 42641.275695907556, 3009.877381912446, 2.355, 28.10612244897959, 34899.704424462805);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 281, 43163.05369096608, 3399.81813227762, 2.32, 31.91183673469388, 37011.99172165648);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 285, 41468.487302587055, 2857.4579562279982, 2.385, 29.70530612244898, 36059.336842638935);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 290, 40880.606019777944, 2743.626644851896, 2.355, 29.155102040816328, 35297.417996698125);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 291, 41331.87726441997, 2602.0945193041503, 2.35, 24.315102040816328, 37416.70855114812);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 295, 41246.012565097626, 2855.237219917289, 2.355, 23.18204081632653, 36504.576883390815);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 300, 40971.80153732637, 3517.9662838248146, 2.35, 21.866122448979592, 36504.576883390815);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 301, 41274.53350427838, 2370.5277073894185, 2.305, 29.183673469387756, 37228.73518441617);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 305, 40833.677478018784, 2533.181102664182, 2.305, 29.18857142857143, 35896.09491381789);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 310, 40684.83195002004, 2775.534724152138, 2.305, 27.219591836734693, 34989.04859608237);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 311, 40607.26469358519, 2148.6384167732826, 2.22, 29.46938775510204, 36320.04950794552);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 315, 40462.78848025797, 2779.5016134025445, 2.27, 30.049795918367348, 35342.52455398336);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 320, 39904.42725245981, 2485.382240067032, 2.28, 29.725714285714286, 34527.084526400664);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 321, 43895.810804799235, 3586.5520417314583, 2.22, 29.73551020408163, 38862.78328237919);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 325, 42588.55074190306, 3034.849821525766, 2.265, 30.838367346938774, 36479.819318353584);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 330, 42054.87378951561, 3127.655963363625, 2.265, 29.201632653061225, 36479.819318353584);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 331, 44310.90381628941, 3246.149238114364, 2.18, 28.492244897959182, 38701.9834739448);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 335, 43231.14308647536, 2509.0128889416787, 2.26, 29.209795918367348, 37316.36583765501);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 340, 42401.49863407205, 2864.362058141225, 2.325, 27.32734693877551, 36773.78925026586);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 341, 43103.0826897569, 3557.993801450099, 2.3, 29.16734693877551, 36830.80536282874);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 345, 40419.501170407966, 3254.1180088541246, 2.26, 27.284897959183674, 34385.50834786413);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 350, 40515.830060783446, 3307.201674592788, 2.25, 24.223673469387755, 33655.102924096194);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 351, 39894.687982370306, 2184.137159873248, 2.105, 26.82530612244898, 36049.664059666226);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 355, 40875.92890097807, 2718.77365518701, 2.125, 26.212244897959184, 34617.4260289304);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 360, 40104.54303472081, 2289.648126558613, 2.125, 24.13142857142857, 34617.4260289304);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 361, 39019.14162029573, 2257.9407473099213, 2.125, 25.40326530612245, 34886.05245954346);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 365, 38323.72184284768, 1524.0056644032686, 2.14, 25.133061224489797, 34109.6384316279);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 370, 38335.58505580788, 1968.693079188849, 2.1, 23.782857142857143, 33968.63182311904);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 371, 38883.54705192703, 2621.0216079811935, 2.08, 23.61877551020408, 34928.64860739912);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 375, 38182.33806079643, 1655.6154147357265, 2.13, 21.62938775510204, 33568.78034172728);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 380, 37972.50502624021, 2273.352728442161, 2.11, 20.697142857142858, 33082.968325205955);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 381, 39258.5728436304, 3267.833172584223, 2.02, 22.97142857142857, 34019.705632634104);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 385, 38523.81403405964, 3236.7942442091157, 2.02, 20.8, 34019.705632634104);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 390, 37734.411498691, 2686.381420141207, 2.055, 21.323265306122448, 33550.85544677498);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 391, 38599.11813721064, 2386.931417772346, 1.995, 25.292244897959183, 34892.43196616128);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 395, 39176.6411869958, 2716.54584991712, 2.025, 23.921632653061224, 33878.010425549845);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 400, 38763.93366729173, 2505.0308644493966, 1.985, 25.122448979591837, 33699.300467063804);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 401, 40414.96718117636, 1968.7740449152304, 1.985, 25.070204081632653, 35897.34916285917);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 405, 40243.12354531797, 2034.5556773247938, 1.985, 25.06122448979592, 35897.34916285917);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 410, 40250.309915110476, 2090.0792548752283, 2.065, 26.128979591836735, 35624.915467363295);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 411, 39074.18304338648, 2740.2102016001418, 1.98, 24.515918367346938, 34091.16272919677);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 415, 38142.437495090824, 2236.0454249259315, 1.98, 22.980408163265306, 34091.16272919677);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 420, 38246.37668690115, 2842.742773450551, 1.97, 21.75265306122449, 33173.16041838009);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 421, 38741.212554076694, 2492.310514199144, 1.985, 24.358367346938774, 34719.4942037287);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 425, 39159.42002334837, 3165.1238056366055, 2.02, 25.13714285714286, 33880.58078889189);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 430, 38629.144611992786, 2398.889812299034, 2.02, 23.41551020408163, 33880.58078889189);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 431, 41230.03288164017, 2658.9872508238304, 1.925, 22.973061224489797, 35845.845335258935);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 435, 40620.03243924726, 2454.4610101501316, 1.965, 24.230204081632653, 35555.89704443552);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 440, 40060.90014639583, 2125.9053612699413, 2.03, 23.110204081632652, 35090.65695757254);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 441, 40434.92485438907, 2384.16805862273, 1.96, 20.74612244897959, 36409.46842976832);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 445, 39784.224270966944, 2861.109416624655, 2.03, 21.01142857142857, 35684.53899898747);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 450, 40120.69707742348, 2635.0114320067228, 2.045, 20.256326530612245, 35094.49121011655);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 451, 41504.68464278467, 3157.571961399058, 1.985, 23.572244897959184, 36544.50902097821);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 455, 39719.13799122916, 3101.8295655146926, 2.005, 22.26448979591837, 35629.20486108872);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 460, 39881.74178972844, 2833.7842487498892, 2.01, 21.03265306122449, 34853.03266706769);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 461, 39404.89787372694, 2926.13070359216, 1.99, 22.645714285714284, 34396.893653488965);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 465, 39295.61258583775, 2319.259083261877, 1.99, 22.36979591836735, 33984.38525316585);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 470, 39834.96701165851, 3000.4721054947404, 1.99, 21.918367346938776, 33589.19622661478);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 471, 40074.768765336776, 2471.390070334936, 1.975, 21.591836734693878, 35901.09086926477);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 475, 39957.64839123933, 2779.1300324807016, 2.01, 18.212244897959184, 35747.964064384614);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 480, 39792.95268474092, 2657.9696811790614, 1.985, 17.62857142857143, 35658.5632706872);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 481, 39454.26761630343, 2257.4364330721887, 1.89, 23.081632653061224, 35284.461150227915);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 485, 38931.16514241243, 1856.7042703807551, 1.9, 21.65877551020408, 35075.549437468995);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 490, 39119.893224015206, 2148.584330059377, 1.92, 21.996734693877553, 34750.851099986954);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 491, 41309.15613307273, 2417.2131474487146, 1.91, 22.34285714285714, 37046.69223750109);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 495, 40380.63530830238, 2844.674696653144, 1.96, 20.73551020408163, 35292.04127427977);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 500, 40079.235016301725, 2148.390767796129, 1.925, 21.463673469387754, 35035.93765375936);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 501, 41026.27514081138, 3394.5768825536766, 1.955, 21.972244897959182, 36511.43692988665);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 505, 41848.73680972632, 3865.076716832022, 1.98, 20.86938775510204, 35174.70068352418);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 510, 41457.12596568741, 3667.676362984424, 1.98, 19.627755102040815, 35174.70068352418);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 511, 39333.250547765645, 2197.2960264567314, 1.855, 18.965714285714284, 36365.410348776);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 515, 38454.68839126633, 1733.923708052289, 1.92, 19.02122448979592, 34516.89051158786);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 520, 38641.15385741383, 1986.4508092129036, 1.905, 17.291428571428572, 34491.34286241213);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 521, 40847.89384179523, 2780.8116582336793, 1.92, 19.885714285714286, 36112.48167940128);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 525, 40737.787953955456, 2467.863433526741, 1.94, 19.521632653061225, 35210.20853296842);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 530, 40326.553519813715, 1965.0417326232114, 1.91, 21.224489795918366, 34995.31494942967);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 531, 39234.95457171565, 2253.54752419822, 1.845, 16.484897959183673, 34943.10343648832);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 535, 39175.4560817994, 2790.0540678346147, 1.83, 15.100408163265307, 33740.150629999036);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 540, 39639.85227149446, 2902.268314895213, 1.81, 15.201632653061225, 33071.546469409055);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 541, 39211.92978886438, 2779.8055829565133, 1.72, 18.649795918367346, 35388.40551241631);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 545, 39099.4054375616, 2846.7476406861574, 1.775, 18.328163265306124, 35277.26294478749);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 550, 40059.81142457352, 3249.422941918351, 1.775, 19.02938775510204, 34844.335165038625);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 551, 41019.56360167879, 3239.1361388142395, 1.775, 17.517551020408163, 35371.52070919299);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 555, 40007.769433094436, 2927.0346903695086, 1.785, 16.711020408163265, 34140.05194966539);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 560, 39124.87732790684, 3247.6224451297, 1.765, 14.984489795918368, 33774.46441426382);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 561, 39184.03370602494, 2443.9319673716955, 1.695, 18.217959183673468, 34138.44233329191);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 565, 38979.3341661735, 2835.805372194375, 1.715, 18.088979591836736, 33612.463378771434);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 570, 38066.715315903704, 2985.5905647367117, 1.7, 17.45795918367347, 33023.94890888568);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 571, 41404.87391616761, 1968.6034236653593, 1.725, 17.47673469387755, 36320.72790851926);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 575, 41616.02478358942, 2398.5207163639557, 1.755, 18.48, 35724.27259640024);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 580, 41808.22802429533, 2214.5118746132243, 1.715, 18.373061224489796, 35602.90503159385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 581, 39182.36068212622, 2142.7535064438675, 1.655, 16.34857142857143, 34307.76602003401);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 585, 39349.63565846841, 1937.524524634204, 1.65, 16.24734693877551, 33637.13268658952);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 590, 39386.10473191573, 2208.782354956067, 1.6, 16.377142857142857, 33375.4652109354);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 591, 43028.36534111996, 2447.8178530726673, 1.67, 14.81795918367347, 37490.78911142311);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 595, 43093.50656243354, 2582.3900714448973, 1.7, 15.257959183673469, 36543.20601455517);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 600, 43085.29714736837, 3232.008453941046, 1.69, 14.278367346938776, 35952.580507679464);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 601, 40766.50303788366, 1869.6757384349437, 1.665, 16.28326530612245, 37535.05379936648);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 605, 40948.58775081658, 2444.8653602783234, 1.7, 16.122448979591837, 36679.58112974907);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 610, 40144.962666244544, 2011.0157346597753, 1.69, 15.93469387755102, 36406.67820229472);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 611, 43897.57788587874, 3175.504216442866, 1.67, 17.080816326530613, 36456.571611221116);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 615, 42477.28980748961, 3397.2493270505197, 1.685, 17.56326530612245, 35286.802173781645);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 620, 41704.16131762523, 2891.9564371226406, 1.685, 17.697142857142858, 35286.802173781645);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 621, 42019.36031777469, 2858.325370029346, 1.655, 15.30938775510204, 37239.87081251628);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 625, 42461.33269748252, 2702.3653868477145, 1.66, 14.98857142857143, 35414.7780232624);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 630, 40389.95146425884, 3180.179608193455, 1.66, 14.076734693877551, 34769.799498354936);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 631, 39058.02096183409, 2364.992582850575, 1.595, 15.178775510204082, 34548.68702232573);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 635, 38268.092903301345, 2139.118664956249, 1.57, 14.079183673469387, 34203.00004339389);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 640, 38056.30302905746, 2177.4647762470313, 1.55, 13.946122448979592, 33564.333054174764);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 641, 41506.25638604166, 3545.506979188756, 1.515, 16.87265306122449, 35293.308851591755);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 645, 41807.92874394128, 2883.5534867824426, 1.515, 16.929795918367347, 35293.308851591755);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 650, 41387.757366591, 3343.953782734994, 1.525, 16.54530612244898, 34033.35348997793);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 651, 41057.912715168975, 2042.786642891719, 1.49, 16.120816326530612, 37222.368048817);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 655, 39976.66807238294, 2205.4646346119857, 1.55, 14.364081632653061, 36678.867686445934);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 660, 39778.68011334127, 2339.4815378661237, 1.55, 14.193469387755101, 36678.867686445934);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 661, 41056.27978620922, 3277.7088612996363, 1.565, 13.89469387755102, 34756.028842238185);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 665, 39783.27473458476, 2972.597282223627, 1.57, 14.151020408163266, 34630.7433396723);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 670, 40033.42899249077, 3256.102054093189, 1.57, 14.213061224489795, 34630.7433396723);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 671, 40446.84639803876, 2071.5433832230037, 1.445, 13.283265306122448, 35414.25237249078);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 675, 40398.22933132527, 1987.4745708444318, 1.445, 12.153469387755102, 35414.25237249078);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 680, 40175.14976625589, 2619.6417131843396, 1.445, 10.953469387755103, 35414.25237249078);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 681, 39071.97097484823, 1991.8557632072766, 1.385, 11.98938775510204, 36438.11181031106);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 685, 38479.618790490626, 1355.9880950777992, 1.415, 10.890612244897959, 35802.20374140275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 690, 38491.64063932259, 1366.6528022210478, 1.415, 10.704489795918366, 35802.20374140275);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 691, 39492.81290114164, 1792.6726025421374, 1.395, 10.548571428571428, 36515.71133873126);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 695, 39447.035808260975, 2120.3765541103185, 1.41, 10.679183673469387, 35874.42185740281);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 700, 39074.090673992454, 1589.1546985857392, 1.39, 10.300408163265306, 35874.42185740281);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 701, 37573.694584452605, 1991.28147833195, 1.38, 8.238367346938775, 34516.868750797534);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 705, 37015.94024110505, 2185.813792274455, 1.38, 7.411428571428571, 34516.868750797534);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 710, 36455.182193751054, 1889.6336935784243, 1.38, 7.222040816326531, 34516.868750797534);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 711, 40865.986021168836, 3493.8601902475048, 1.415, 11.202448979591837, 35907.28847730499);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 715, 40439.25472404838, 3434.252704080778, 1.415, 11.959183673469388, 35907.28847730499);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 720, 39362.499662763694, 2694.00671093043, 1.38, 11.457142857142857, 35846.69111762488);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 721, 39790.5896553088, 3139.2461617329473, 1.325, 9.386122448979592, 35575.49742976413);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 725, 38054.25673685737, 3011.6742800884126, 1.33, 7.321632653061225, 34676.234123566435);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 730, 37561.376116177096, 3228.2254166824505, 1.33, 7.0987755102040815, 34676.234123566435);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 731, 37515.42716419976, 1679.7576613542005, 1.33, 9.634285714285713, 35836.883375739315);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 735, 37238.31589788278, 1965.4902352759286, 1.33, 9.645714285714286, 35836.883375739315);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 740, 37171.761362120786, 1065.5594663602124, 1.32, 10.017142857142858, 35437.7919436328);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 741, 40683.696849407504, 3299.698313292149, 1.3, 12.020408163265307, 36224.77396532602);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 745, 41022.71846138103, 3828.765593116802, 1.325, 12.404897959183673, 36072.41917101728);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 750, 40821.514060228954, 3634.630368777218, 1.31, 12.429387755102042, 35407.17682550423);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 751, 38271.24161731003, 1489.166672943643, 1.295, 10.200816326530612, 35606.772533800555);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 755, 38173.97320278111, 2267.9865843766484, 1.3, 10.626938775510204, 34872.10787628934);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 760, 37777.82873201326, 2713.13346495534, 1.295, 10.308571428571428, 34837.342812766976);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 761, 38482.025864664334, 1184.0918914112253, 1.265, 9.315102040816326, 36141.12264436814);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 765, 38115.265624002845, 954.0988499036616, 1.265, 9.459591836734694, 36141.12264436814);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 770, 37954.16132681846, 1180.092819169838, 1.23, 8.540408163265306, 36111.66183966392);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 771, 37081.99061246458, 732.8747976460555, 1.31, 7.315102040816327, 36220.410956080195);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 775, 37537.28786909321, 2001.338804970385, 1.31, 7.591020408163265, 36183.23889897339);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 780, 37221.198234264724, 1249.7980768163334, 1.28, 7.852244897959183, 35470.106863241825);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 781, 38120.150945710295, 1468.5866003858366, 1.25, 8.761632653061225, 36019.36682474592);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 785, 38078.232917761925, 1726.1178187621902, 1.275, 9.906122448979591, 34946.55315034448);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 790, 37534.76058328412, 1274.8689237707754, 1.275, 9.757551020408163, 34946.55315034448);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 791, 40262.39961910566, 1928.5680583967528, 1.23, 9.486530612244898, 36298.03592361367);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 795, 39667.88415137511, 1993.3608282734024, 1.24, 9.650612244897959, 35518.399246001805);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 800, 39949.83477392045, 2128.7504830159933, 1.24, 8.806530612244899, 34718.560024028535);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 801, 39335.207313182305, 1772.9553219331524, 1.205, 9.48326530612245, 36157.03060438763);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 805, 39695.22805564907, 2352.7469973478173, 1.22, 9.752653061224489, 36005.81199861106);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 810, 39156.02930030359, 2302.815466575738, 1.22, 8.442448979591838, 36005.81199861106);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 811, 41820.862470609885, 2772.0089173938536, 1.18, 7.85469387755102, 36760.822845536655);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 815, 40485.84227878687, 2665.2471654607607, 1.18, 7.9648979591836735, 36663.54366638328);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 820, 40718.23271975626, 2710.2912113103534, 1.15, 8.103673469387756, 36348.050176756056);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 821, 38244.57004471654, 1341.7621321642964, 1.2, 5.330612244897959, 36492.20156216136);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 825, 37837.89385714463, 1193.7696271523716, 1.2, 4.47265306122449, 36492.20156216136);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 830, 38099.24906841939, 1612.0363278199989, 1.2, 5.0, 36492.20156216136);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 831, 38613.59401571763, 2160.812476715693, 1.13, 6.316734693877551, 36695.36514241091);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 835, 38136.55682300626, 1999.4147839946934, 1.145, 5.323265306122449, 36340.00731486563);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 840, 37639.27698897852, 1894.825875125577, 1.145, 5.430204081632653, 36263.202924690704);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 841, 39429.02074070233, 1134.8219658152263, 1.12, 6.813061224489796, 37228.985971477385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 845, 38763.56361287788, 1269.556254365826, 1.12, 5.674285714285714, 37228.985971477385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 850, 39123.92040978385, 1252.8508120743668, 1.12, 6.573061224489796, 37228.985971477385);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 851, 38917.15445427415, 980.6330347964257, 1.095, 4.883265306122449, 37664.90623955857);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 855, 38606.581601342135, 705.7702527301961, 1.095, 4.99265306122449, 37664.90623955857);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 860, 38594.43598001665, 860.0064031525693, 1.095, 4.430204081632653, 37664.90623955857);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 861, 37722.21794653755, 612.7743322554073, 1.06, 4.115102040816327, 36750.75592553447);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 865, 37355.151634529226, 355.7084399933777, 1.06, 3.364081632653061, 36750.75592553447);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 870, 37277.358648031885, 303.8562263140112, 1.06, 3.0710204081632653, 36750.75592553447);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 871, 37294.76429267752, 663.4804480724204, 1.035, 2.620408163265306, 36591.09228406305);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 875, 37106.428217273344, 504.1515313571044, 1.02, 1.8685714285714285, 36541.53958588713);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 880, 37136.01308187979, 534.8933103008646, 1.02, 2.226938775510204, 36541.53958588713);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 881, 37560.98232983295, 933.0505655181352, 1.03, 3.9044897959183675, 36332.059059384614);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 885, 37310.46724781578, 901.0083651274217, 1.03, 3.973061224489796, 36332.059059384614);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 890, 37457.12508172365, 1036.7979111720706, 1.03, 4.366530612244898, 36332.059059384614);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 891, 37937.35961644135, 182.37067566182063, 1.04, 4.16734693877551, 37305.87448967749);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 895, 37981.87250815878, 348.70713713775257, 1.04, 4.288979591836735, 37133.78319029838);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 900, 37890.57574671544, 316.14000571202723, 1.035, 4.329795918367347, 37133.78319029838);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 901, 37465.76936448692, 578.7989089567312, 0.99, 1.217142857142857, 37287.75953724047);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 905, 37470.31064126315, 638.4859733199909, 0.99, 0.726530612244898, 37287.75953724047);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 910, 37394.8951616355, 453.79358039754, 0.99, 0.7306122448979592, 37287.75953724047);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 911, 38067.889909320824, 306.7248718608997, 1.005, 2.6277551020408163, 37363.22395542175);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 915, 37887.2388432049, 428.32806875063346, 0.995, 2.8604081632653062, 36932.98635014725);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 920, 37793.95311069879, 404.4613110566335, 0.995, 2.9191836734693877, 36932.98635014725);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 921, 37283.84044789938, 315.2432436420271, 0.965, 1.793469387755102, 37093.961509030145);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 925, 37272.34685142685, 435.9810456451847, 0.965, 1.6146938775510205, 37093.961509030145);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 930, 37251.91975102412, 411.36225345244617, 0.965, 1.3510204081632653, 37093.961509030145);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 931, 38751.0111271587, 513.0076231905655, 0.965, 2.4693877551020407, 38196.27652202088);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 935, 39145.06009765428, 893.7168792514293, 0.94, 3.1697959183673468, 38081.879588724674);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 940, 38709.87524465648, 559.7570137477961, 0.94, 2.8269387755102042, 38081.879588724674);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 941, 38508.48487023661, 182.31788667346893, 0.925, 0.8571428571428571, 38232.7887156537);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 945, 38435.89383441634, 265.1866896896624, 0.925, 2.0187755102040814, 38066.61131891005);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 950, 38510.83191351843, 225.64235043913, 0.925, 1.3738775510204082, 38066.61131891005);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 951, 38881.53015207613, 904.2252907254431, 0.935, 1.937142857142857, 38005.73452880405);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 955, 38553.59604122175, 699.758479520127, 0.935, 1.7975510204081633, 38005.73452880405);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 960, 38892.692085584116, 934.0292502006853, 0.935, 2.116734693877551, 38005.73452880405);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 961, 38881.697267375945, 200.08283776088206, 0.885, 0.8228571428571428, 38758.17773363287);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 965, 38802.29185282685, 133.68596926333868, 0.885, 0.3673469387755102, 38758.17773363287);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 970, 38784.64620514927, 105.82886208467477, 0.895, 0.23020408163265307, 38592.04230181321);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 971, 39170.7332267156, 21.2400569109947, 0.895, 0.49142857142857144, 39118.6192851467);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 975, 39171.94517884511, 19.8918140930562, 0.895, 0.4310204081632653, 39118.6192851467);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 980, 39173.15713097462, 18.363847912484946, 0.895, 0.3673469387755102, 39118.6192851467);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 981, 38771.82521814478, 3.67491354901071E-11, 0.895, 0.0, 38771.825218144746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 985, 38771.82521814478, 3.67491354901071E-11, 0.895, 0.0, 38771.825218144746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 990, 38771.82521814478, 3.67491354901071E-11, 0.895, 0.0, 38771.825218144746);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 991, 38906.45723096601, 5.144878968614994E-11, 0.895, 0.0, 38906.457230965956);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 995, 38906.45723096601, 5.144878968614994E-11, 0.895, 0.0, 38906.457230965956);
        TestUtils.checkValues(mmas_mem_madtsp.getIterationStatistics(), 1000, 38906.45723096601, 5.144878968614994E-11, 0.895, 0.0, 38906.457230965956);
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 19, 11, 82, 54, 33, 50, 86, 56, 8, 6, 76, 27, 92, 66, 57, 24, 80, 68, 67, 72, 49, 43, 75, 32, 12, 81, 1, 63, 39, 53, 84, 29, 38, 95, 77, 51, 4, 36, 94, 70, 40, 99, 47, 28, 45, 2, 13, 42, 34, 60, 7, 41, 30, 79, 88, 91, 62, 0, 5, 48, 18, 96, 55, 74, 15, 87, 93, 21, 69, 65, 64, 3, 25, 78, 17, 37, 23, 35, 9, 83, 89, 71, 20, 73, 58, 98, 52, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 76, 19, 26, 85, 34, 54, 82, 33, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 56, 8, 6, 11, 42, 2, 45, 28, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 29, 70, 40, 99, 47, 13, 57, 92, 27, 66, 5, 48, 62, 0, 7, 41, 30, 79, 88, 91, 74, 96, 18, 55, 65, 64, 3, 25, 87, 15, 21, 69, 93, 78, 17, 37, 23, 35, 58, 73, 20, 71, 9, 83, 89, 46, 52, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 83, 9, 71, 89, 5, 48, 62, 0, 46, 31, 90, 44, 97, 22, 59, 11, 26, 85, 34, 19, 6, 8, 56, 86, 50, 60, 57, 92, 27, 66, 61, 76, 82, 54, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 29, 84, 67, 72, 49, 43, 1, 63, 68, 39, 53, 80, 24, 36, 4, 94, 81, 32, 12, 75, 38, 95, 77, 51, 30, 79, 41, 88, 91, 74, 96, 55, 7, 78, 87, 15, 21, 93, 69, 25, 64, 3, 18, 52, 65, 17, 23, 37, 35, 98, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 35, 98, 37, 23, 17, 78, 52, 89, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 65, 64, 3, 25, 21, 15, 87, 93, 69, 48, 5, 62, 0, 46, 71, 9, 83, 31, 90, 97, 22, 44, 76, 61, 59, 34, 19, 6, 8, 56, 86, 50, 60, 80, 24, 68, 63, 53, 39, 1, 12, 75, 94, 81, 72, 49, 43, 67, 84, 29, 38, 95, 77, 51, 36, 4, 32, 13, 2, 45, 28, 33, 42, 47, 40, 99, 70, 11, 85, 26, 54, 82, 27, 92, 66, 57, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 35, 98, 37, 23, 17, 78, 87, 15, 21, 93, 69, 25, 64, 3, 18, 52, 65, 5, 48, 62, 9, 83, 71, 44, 97, 22, 90, 31, 91, 7, 41, 30, 79, 55, 96, 74, 89, 0, 46, 27, 92, 57, 66, 88, 60, 24, 80, 50, 86, 56, 8, 6, 54, 82, 33, 28, 45, 2, 42, 47, 13, 99, 70, 40, 29, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 49, 43, 72, 63, 39, 53, 1, 84, 67, 68, 11, 19, 26, 85, 34, 61, 59, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 35, 23, 37, 98, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 18, 74, 89, 62, 5, 48, 0, 46, 31, 90, 97, 22, 44, 59, 61, 76, 19, 26, 85, 34, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 38, 29, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 28, 45, 42, 2, 13, 40, 70, 99, 47, 82, 54, 33, 11, 6, 8, 92, 27, 66, 57, 30, 79, 55, 7, 41, 88, 91, 96, 25, 83, 9, 71, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 9, 83, 23, 17, 78, 87, 15, 21, 93, 69, 65, 64, 3, 18, 74, 96, 55, 7, 91, 48, 5, 62, 0, 46, 31, 90, 97, 22, 44, 59, 76, 61, 19, 26, 85, 34, 11, 6, 8, 56, 86, 50, 60, 80, 24, 68, 63, 39, 53, 1, 43, 72, 49, 81, 94, 12, 32, 75, 4, 36, 77, 51, 95, 29, 38, 84, 67, 28, 45, 2, 42, 13, 47, 99, 70, 40, 33, 82, 54, 57, 92, 27, 66, 88, 30, 79, 41, 25, 52, 89, 37, 98, 35, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 46, 31, 90, 97, 22, 44, 59, 76, 61, 26, 85, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 29, 95, 77, 51, 4, 36, 75, 12, 32, 94, 81, 47, 99, 70, 40, 13, 2, 45, 42, 33, 82, 54, 34, 28, 38, 57, 92, 27, 66, 88, 30, 79, 55, 96, 74, 18, 52, 15, 21, 87, 93, 69, 65, 25, 3, 64, 91, 7, 41, 17, 78, 23, 37, 98, 35, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 78, 23, 37, 35, 98, 17, 93, 87, 15, 21, 69, 65, 64, 3, 25, 66, 27, 92, 57, 60, 80, 24, 86, 50, 56, 8, 6, 11, 19, 26, 34, 85, 54, 82, 33, 42, 2, 45, 28, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 67, 84, 72, 63, 39, 53, 1, 68, 61, 59, 76, 22, 90, 97, 44, 31, 46, 47, 99, 70, 40, 13, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 66, 57, 27, 92, 50, 60, 80, 24, 68, 63, 39, 53, 1, 72, 49, 67, 84, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 43, 38, 47, 99, 40, 70, 28, 45, 42, 2, 13, 33, 82, 54, 11, 19, 6, 8, 56, 86, 85, 34, 26, 61, 59, 76, 22, 97, 90, 44, 31, 46, 0, 37, 23, 17, 78, 98, 35, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 78, 52, 15, 21, 87, 93, 17, 23, 37, 35, 98, 69, 31, 44, 97, 22, 90, 46, 92, 27, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 99, 40, 47, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 38, 29, 84, 67, 49, 43, 1, 53, 39, 63, 68, 72, 11, 26, 85, 34, 19, 61, 59, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 15, 87, 93, 69, 21, 64, 65, 3, 25, 78, 17, 23, 37, 35, 98, 44, 31, 90, 97, 22, 76, 56, 8, 6, 11, 85, 26, 34, 61, 59, 19, 82, 54, 33, 28, 45, 2, 42, 13, 47, 99, 70, 40, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 67, 84, 38, 72, 60, 50, 86, 24, 80, 68, 27, 92, 66, 57, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 23, 37, 98, 35, 17, 78, 52, 15, 21, 69, 93, 87, 25, 3, 64, 65, 92, 27, 57, 60, 50, 86, 8, 56, 6, 11, 19, 26, 85, 34, 61, 59, 76, 22, 90, 97, 44, 31, 46, 0, 80, 24, 68, 63, 39, 53, 1, 43, 72, 67, 84, 29, 38, 47, 13, 2, 28, 45, 42, 33, 82, 54, 99, 70, 40, 95, 77, 51, 4, 36, 75, 12, 32, 81, 94, 49, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 74, 96, 55, 79, 30, 88, 41, 7, 66, 57, 60, 50, 86, 8, 6, 56, 11, 26, 34, 85, 19, 54, 82, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 61, 59, 76, 22, 97, 90, 31, 44, 92, 27, 18, 3, 65, 64, 25, 69, 15, 21, 93, 87, 52, 78, 17, 23, 37, 98, 35, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 96, 74, 18, 3, 64, 65, 25, 21, 15, 87, 93, 69, 23, 37, 98, 35, 17, 78, 52, 55, 79, 30, 88, 41, 27, 92, 57, 60, 24, 80, 50, 86, 56, 8, 6, 11, 26, 85, 34, 19, 54, 82, 33, 45, 2, 13, 28, 42, 70, 40, 99, 47, 77, 51, 95, 4, 36, 12, 32, 75, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 66, 22, 97, 90, 31, 44, 59, 61, 76, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 15, 87, 93, 21, 78, 52, 23, 37, 35, 98, 17, 90, 97, 44, 31, 46, 92, 27, 66, 57, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 45, 2, 28, 13, 99, 47, 40, 70, 42, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 49, 43, 72, 68, 63, 39, 53, 1, 19, 26, 85, 34, 11, 76, 22, 59, 61, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 65, 64, 25, 69, 21, 87, 15, 93, 78, 52, 37, 23, 17, 35, 98, 31, 90, 97, 22, 44, 76, 61, 59, 19, 56, 8, 6, 86, 50, 60, 24, 80, 68, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 39, 63, 66, 92, 27, 57, 85, 34, 11, 26, 54, 82, 33, 45, 2, 42, 13, 99, 40, 70, 47, 28, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 79, 30, 55, 96, 74, 18, 52, 78, 17, 23, 37, 35, 98, 93, 87, 15, 21, 69, 65, 64, 3, 25, 66, 27, 92, 57, 60, 24, 80, 50, 86, 56, 11, 19, 6, 8, 54, 82, 33, 28, 45, 2, 42, 70, 40, 13, 99, 47, 77, 51, 4, 36, 75, 32, 12, 94, 81, 67, 84, 72, 49, 43, 1, 53, 39, 63, 68, 38, 95, 29, 26, 85, 34, 61, 76, 59, 97, 22, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 3, 65, 64, 25, 21, 15, 87, 93, 78, 52, 69, 98, 35, 37, 23, 17, 46, 31, 44, 97, 22, 90, 76, 59, 61, 19, 26, 85, 11, 56, 6, 8, 86, 50, 60, 24, 80, 68, 72, 49, 43, 1, 63, 39, 53, 81, 12, 94, 75, 32, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 28, 45, 42, 2, 33, 54, 82, 34, 67, 84, 38, 29, 57, 27, 92, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 65, 64, 25, 21, 15, 87, 93, 69, 78, 52, 18, 74, 37, 23, 17, 35, 98, 31, 90, 97, 44, 22, 59, 61, 34, 85, 19, 26, 11, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 77, 51, 4, 36, 95, 84, 67, 49, 43, 72, 68, 63, 39, 53, 1, 81, 94, 12, 75, 32, 29, 38, 57, 60, 50, 86, 24, 80, 66, 27, 92, 76, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 93, 21, 87, 15, 69, 25, 64, 3, 65, 78, 17, 23, 37, 35, 98, 31, 44, 97, 90, 22, 59, 61, 76, 19, 26, 85, 34, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 29, 67, 84, 72, 49, 43, 1, 63, 39, 53, 68, 24, 80, 60, 50, 86, 11, 27, 92, 57, 66, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 18, 74, 52, 93, 21, 69, 15, 87, 65, 64, 3, 25, 37, 23, 17, 78, 35, 98, 31, 90, 22, 44, 97, 76, 61, 59, 85, 26, 11, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 40, 70, 99, 47, 13, 2, 45, 28, 42, 29, 33, 54, 82, 19, 34, 66, 57, 92, 27, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 65, 64, 25, 52, 69, 15, 21, 87, 93, 17, 78, 74, 18, 23, 37, 35, 98, 90, 97, 22, 44, 31, 46, 27, 92, 57, 60, 24, 80, 50, 86, 8, 6, 56, 11, 26, 85, 34, 19, 61, 59, 76, 54, 82, 33, 45, 28, 2, 42, 70, 40, 99, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 13, 29, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 69, 15, 87, 93, 21, 52, 18, 74, 78, 17, 23, 37, 35, 98, 44, 97, 22, 90, 31, 46, 92, 27, 66, 57, 60, 80, 24, 50, 86, 8, 6, 56, 11, 19, 26, 85, 34, 61, 59, 76, 54, 82, 33, 28, 45, 2, 42, 70, 40, 99, 13, 47, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 43, 49, 72, 68, 67, 84, 29, 38, 25, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 18, 74, 78, 52, 93, 87, 15, 21, 69, 23, 17, 37, 35, 98, 22, 97, 90, 44, 31, 46, 76, 59, 61, 19, 6, 8, 56, 86, 50, 60, 80, 24, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 51, 77, 95, 36, 4, 32, 12, 75, 94, 81, 47, 13, 99, 70, 40, 42, 2, 45, 28, 33, 82, 54, 11, 26, 85, 34, 92, 27, 66, 57, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 78, 52, 18, 74, 23, 37, 35, 98, 17, 46, 31, 44, 97, 90, 22, 59, 61, 76, 86, 50, 60, 24, 80, 68, 39, 63, 1, 53, 43, 49, 72, 67, 84, 29, 38, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 28, 45, 2, 42, 13, 47, 99, 70, 40, 33, 54, 82, 11, 19, 26, 85, 34, 56, 8, 6, 92, 27, 66, 57, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 15, 87, 93, 78, 17, 23, 37, 35, 98, 18, 74, 52, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 8, 6, 86, 50, 60, 80, 24, 68, 72, 49, 43, 1, 53, 39, 63, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 13, 99, 70, 40, 2, 42, 45, 28, 33, 82, 54, 47, 57, 27, 92, 66, 46, 31, 44, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 23, 37, 98, 35, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 8, 6, 56, 11, 19, 82, 54, 33, 28, 45, 2, 42, 13, 99, 40, 70, 47, 29, 38, 84, 67, 49, 43, 1, 72, 80, 24, 68, 63, 39, 53, 94, 81, 12, 75, 32, 36, 4, 95, 77, 51, 86, 50, 60, 57, 27, 92, 66, 46, 76, 52, 18, 74, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 23, 35, 98, 37, 52, 18, 74, 27, 92, 66, 57, 60, 80, 24, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 45, 2, 42, 13, 40, 70, 99, 47, 28, 33, 82, 54, 6, 8, 56, 86, 50, 76, 61, 59, 34, 26, 85, 19, 11, 44, 90, 31, 46, 97, 22, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 23, 37, 98, 35, 31, 44, 22, 97, 90, 46, 92, 27, 57, 66, 60, 24, 80, 50, 86, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 77, 95, 51, 4, 36, 12, 32, 75, 94, 81, 49, 72, 67, 84, 29, 38, 68, 63, 39, 53, 43, 1, 76, 61, 59, 85, 26, 34, 11, 19, 74, 18, 52, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 23, 37, 98, 35, 31, 44, 22, 97, 90, 46, 18, 74, 52, 27, 92, 66, 57, 60, 50, 86, 8, 6, 56, 11, 26, 85, 34, 61, 59, 76, 19, 54, 82, 33, 28, 2, 45, 42, 13, 47, 99, 70, 40, 77, 51, 95, 29, 38, 84, 67, 49, 72, 68, 63, 39, 53, 1, 43, 81, 94, 75, 32, 12, 36, 4, 24, 80, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 52, 74, 18, 37, 23, 17, 35, 98, 59, 61, 76, 57, 60, 24, 80, 68, 39, 63, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 45, 28, 2, 42, 70, 40, 99, 47, 13, 82, 54, 33, 11, 26, 85, 34, 19, 56, 8, 6, 86, 50, 97, 22, 90, 44, 31, 46, 66, 27, 92, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 37, 23, 35, 98, 97, 22, 31, 90, 44, 46, 66, 57, 27, 92, 76, 59, 61, 85, 26, 11, 19, 56, 86, 8, 6, 54, 82, 33, 28, 45, 2, 42, 70, 40, 99, 13, 29, 38, 95, 51, 77, 4, 36, 32, 12, 75, 94, 81, 49, 72, 43, 1, 63, 39, 53, 68, 24, 80, 50, 60, 67, 84, 47, 34, 52, 18, 74, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 37, 23, 98, 18, 52, 74, 92, 27, 66, 57, 60, 80, 24, 68, 67, 84, 50, 86, 8, 6, 56, 11, 26, 85, 34, 19, 82, 54, 33, 28, 45, 2, 42, 40, 70, 99, 47, 13, 36, 4, 95, 51, 77, 29, 38, 49, 43, 72, 63, 53, 39, 1, 81, 94, 12, 75, 32, 61, 76, 59, 97, 22, 44, 31, 46, 90, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 46, 90, 44, 31, 59, 61, 76, 19, 85, 34, 11, 26, 54, 82, 33, 28, 45, 2, 42, 70, 40, 99, 47, 13, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 67, 84, 24, 80, 60, 50, 86, 8, 6, 56, 27, 92, 57, 66, 74, 18, 52, 97, 22, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 18, 52, 74, 27, 92, 66, 57, 60, 50, 86, 56, 8, 6, 54, 82, 33, 45, 2, 13, 28, 42, 29, 51, 95, 77, 4, 36, 12, 32, 75, 94, 81, 1, 43, 49, 67, 84, 38, 47, 99, 70, 40, 24, 80, 68, 63, 39, 53, 72, 11, 19, 26, 85, 34, 61, 59, 76, 22, 97, 90, 46, 31, 44, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 92, 27, 57, 66, 80, 24, 68, 72, 49, 43, 1, 63, 53, 39, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 29, 38, 84, 67, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 2, 42, 70, 40, 47, 13, 99, 34, 26, 85, 19, 11, 76, 59, 61, 22, 90, 97, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 24, 80, 50, 86, 8, 6, 56, 11, 19, 26, 85, 34, 54, 82, 33, 28, 2, 45, 13, 47, 99, 40, 70, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 72, 68, 63, 39, 53, 84, 67, 38, 29, 42, 61, 59, 76, 22, 97, 90, 31, 44, 66, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 46, 90, 97, 22, 44, 31, 76, 59, 61, 85, 34, 19, 56, 8, 6, 86, 50, 24, 80, 68, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 49, 43, 1, 63, 39, 53, 66, 27, 92, 57, 60, 82, 54, 33, 28, 45, 2, 13, 70, 40, 99, 47, 42, 11, 26, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 66, 80, 24, 68, 72, 49, 43, 1, 63, 39, 53, 81, 94, 12, 32, 75, 4, 36, 51, 77, 95, 38, 29, 84, 67, 60, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 47, 99, 70, 40, 11, 26, 85, 34, 19, 76, 59, 61, 22, 97, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 66, 57, 60, 50, 24, 80, 72, 49, 43, 1, 63, 39, 53, 81, 94, 32, 12, 75, 4, 36, 51, 77, 95, 38, 29, 84, 67, 68, 76, 59, 61, 85, 26, 34, 19, 11, 54, 82, 33, 45, 2, 42, 70, 40, 99, 47, 13, 28, 56, 6, 8, 86, 90, 22, 97, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 66, 80, 24, 60, 50, 86, 8, 6, 56, 11, 26, 85, 34, 61, 59, 76, 19, 54, 82, 33, 45, 28, 2, 42, 13, 70, 40, 99, 47, 29, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 1, 63, 39, 53, 43, 49, 72, 67, 84, 38, 68, 22, 97, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 66, 60, 24, 80, 68, 63, 39, 53, 1, 72, 49, 43, 38, 95, 51, 77, 4, 36, 12, 75, 32, 94, 81, 67, 84, 29, 13, 47, 99, 40, 70, 2, 45, 28, 42, 54, 82, 33, 6, 8, 56, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 31, 44, 19, 86, 50, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 8, 6, 56, 11, 26, 85, 34, 61, 59, 76, 19, 54, 82, 33, 28, 2, 45, 42, 13, 70, 40, 99, 47, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 53, 39, 68, 72, 67, 84, 80, 24, 66, 97, 90, 44, 22, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 8, 6, 54, 82, 33, 11, 26, 34, 85, 19, 76, 61, 59, 22, 97, 90, 44, 31, 46, 66, 80, 24, 68, 72, 67, 49, 43, 1, 53, 39, 63, 81, 94, 12, 32, 75, 36, 4, 51, 77, 95, 38, 29, 84, 2, 45, 28, 13, 99, 47, 40, 70, 42, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 82, 54, 33, 45, 2, 42, 28, 13, 99, 40, 70, 47, 77, 95, 4, 36, 51, 29, 84, 67, 72, 49, 43, 1, 63, 39, 53, 66, 80, 24, 68, 38, 75, 32, 12, 94, 81, 26, 85, 11, 19, 34, 61, 76, 59, 97, 90, 31, 44, 22, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 76, 59, 61, 34, 26, 85, 82, 54, 33, 45, 2, 42, 28, 13, 70, 40, 99, 47, 29, 38, 95, 51, 77, 4, 36, 32, 75, 12, 94, 81, 1, 39, 53, 63, 68, 80, 24, 67, 84, 72, 49, 43, 66, 90, 97, 22, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 85, 34, 26, 11, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 53, 39, 68, 24, 80, 72, 84, 67, 38, 29, 42, 61, 76, 59, 22, 97, 90, 44, 31, 46, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 39, 53, 63, 68, 72, 67, 84, 29, 38, 80, 24, 85, 26, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 26, 85, 61, 59, 76, 44, 22, 97, 90, 31, 46, 66, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 84, 67, 80, 24, 54, 82, 33, 45, 28, 2, 13, 70, 40, 99, 47, 29, 42, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 28, 45, 2, 42, 13, 99, 47, 29, 95, 51, 77, 4, 36, 75, 12, 32, 94, 81, 1, 63, 39, 53, 68, 80, 24, 72, 49, 43, 67, 84, 38, 70, 40, 61, 59, 76, 22, 97, 44, 31, 90, 46, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 33, 82, 54, 29, 38, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 39, 53, 66, 63, 68, 80, 24, 67, 84, 72, 28, 2, 42, 45, 13, 70, 40, 99, 47, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 54, 82, 33, 45, 28, 13, 70, 40, 47, 99, 42, 2, 29, 84, 38, 95, 51, 77, 4, 36, 75, 32, 12, 94, 81, 49, 72, 43, 67, 80, 24, 68, 63, 39, 53, 1, 66, 97, 90, 44, 31, 46, 22, 59, 61, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 49, 43, 72, 68, 63, 53, 39, 1, 24, 80, 66, 76, 59, 61, 44, 90, 97, 22, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 28, 2, 45, 42, 40, 70, 99, 47, 13, 29, 84, 67, 49, 72, 68, 24, 80, 66, 53, 63, 39, 1, 43, 38, 4, 36, 51, 77, 95, 32, 75, 12, 94, 81, 76, 59, 61, 22, 97, 90, 31, 44, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 28, 13, 47, 99, 70, 40, 42, 2, 29, 95, 51, 77, 4, 36, 12, 75, 32, 94, 81, 38, 84, 67, 49, 72, 43, 1, 39, 63, 53, 68, 24, 80, 66, 76, 61, 59, 22, 97, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 28, 42, 2, 13, 99, 70, 40, 47, 29, 95, 77, 51, 4, 36, 32, 75, 12, 81, 94, 84, 67, 49, 43, 1, 63, 39, 53, 68, 72, 38, 80, 24, 66, 76, 59, 61, 22, 97, 90, 31, 44, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 28, 13, 99, 40, 70, 47, 29, 38, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 49, 72, 43, 67, 84, 24, 80, 68, 66, 39, 63, 53, 1, 76, 59, 61, 22, 97, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 28, 13, 99, 70, 40, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 80, 24, 66, 97, 90, 44, 31, 46, 59, 76, 61, 22, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 99, 70, 40, 47, 29, 95, 77, 51, 36, 4, 12, 32, 75, 94, 81, 38, 28, 84, 80, 24, 67, 49, 43, 72, 68, 63, 39, 53, 1, 76, 59, 61, 44, 90, 97, 22, 46, 31, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 47, 51, 77, 95, 4, 36, 32, 12, 94, 75, 81, 38, 84, 67, 80, 24, 68, 63, 39, 53, 1, 49, 43, 72, 28, 29, 99, 70, 40, 61, 76, 59, 22, 97, 90, 31, 44, 46, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 99, 40, 47, 29, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 94, 81, 12, 75, 32, 36, 4, 95, 77, 51, 38, 28, 80, 24, 66, 46, 31, 90, 97, 22, 44, 59, 76, 61, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 72, 43, 49, 63, 39, 53, 1, 81, 94, 32, 12, 75, 36, 4, 51, 77, 95, 38, 28, 80, 24, 68, 66, 46, 31, 90, 97, 22, 44, 61, 76, 59, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 12, 75, 94, 81, 1, 43, 72, 49, 67, 84, 29, 38, 28, 80, 24, 68, 63, 39, 53, 66, 76, 59, 61, 44, 90, 97, 22, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 1, 63, 39, 53, 68, 72, 43, 49, 67, 84, 38, 24, 80, 66, 46, 31, 90, 97, 22, 44, 76, 59, 61, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 67, 80, 24, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 75, 32, 12, 4, 36, 51, 77, 95, 29, 38, 66, 90, 97, 22, 31, 46, 59, 61, 76, 44, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 1, 53, 63, 39, 43, 49, 72, 67, 68, 80, 24, 66, 46, 31, 90, 97, 22, 59, 61, 76, 44, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 51, 95, 77, 4, 36, 12, 75, 32, 94, 81, 49, 43, 63, 39, 53, 1, 72, 67, 24, 80, 68, 66, 46, 90, 97, 22, 59, 61, 76, 44, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 49, 72, 68, 80, 24, 67, 43, 1, 53, 39, 63, 66, 76, 61, 59, 22, 97, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 49, 43, 63, 39, 53, 1, 72, 67, 24, 80, 68, 66, 46, 97, 90, 44, 31, 76, 61, 59, 22, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 49, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 66, 31, 44, 90, 97, 22, 76, 61, 59, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 1, 43, 49, 72, 68, 80, 24, 67, 39, 63, 53, 66, 76, 59, 61, 22, 97, 90, 44, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 49, 72, 67, 68, 80, 24, 63, 39, 53, 66, 90, 46, 31, 44, 22, 97, 59, 61, 76, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 72, 49, 67, 68, 80, 24, 63, 39, 53, 66, 90, 31, 44, 59, 61, 76, 22, 97, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 43, 49, 67, 68, 80, 24, 72, 63, 39, 53, 1, 66, 76, 59, 61, 22, 90, 31, 44, 97, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 43, 63, 39, 53, 68, 72, 49, 67, 24, 80, 66, 76, 59, 61, 44, 97, 22, 46, 31, 90, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 1, 53, 39, 63, 68, 80, 24, 72, 67, 49, 43, 76, 59, 61, 22, 44, 97, 90, 31, 46, 66, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 63, 39, 68, 80, 24, 67, 72, 66, 97, 90, 44, 31, 46, 22, 76, 61, 59, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 72, 43, 1, 63, 39, 53, 68, 24, 80, 67, 66, 46, 31, 44, 59, 61, 76, 22, 90, 97, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 53, 63, 39, 68, 72, 67, 80, 24, 66, 46, 97, 90, 31, 44, 59, 61, 76, 22, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 24, 67, 72, 80, 66, 76, 61, 59, 22, 97, 90, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 67, 80, 24, 68, 63, 39, 53, 1, 66, 46, 31, 90, 97, 22, 59, 61, 76, 44, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 39, 63, 1, 53, 66, 46, 90, 97, 22, 59, 61, 76, 44, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 63, 39, 53, 66, 90, 97, 22, 44, 59, 61, 76, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 97, 90, 44, 22, 59, 61, 76, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 76, 59, 61, 44, 22, 97, 90, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 59, 61, 76, 97, 22, 44, 90, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 76, 59, 61, 44, 22, 97, 90, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 76, 61, 59, 44, 90, 97, 22, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 59, 61, 76, 90, 97, 22, 31, 46, 44, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 59, 61, 76, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 59, 76, 61, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 59, 61, 76, 46, 44, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 59, 61, 76, 46, 44, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 31, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 46, 44, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 31, 44, 46, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 31, 10]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[10, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 31, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[10, 16, 14, 20, 73, 58, 71, 83, 9, 89, 5, 48, 62, 0, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 25, 69, 21, 93, 87, 15, 78, 17, 35, 98, 37, 23, 52, 18, 74, 27, 92, 57, 60, 50, 86, 56, 6, 8, 11, 19, 34, 85, 26, 82, 54, 33, 45, 2, 42, 13, 70, 40, 99, 47, 28, 84, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 72, 68, 80, 24, 67, 1, 53, 39, 63, 66, 90, 97, 22, 61, 76, 59, 44, 46, 31, 10]");

    }

}
