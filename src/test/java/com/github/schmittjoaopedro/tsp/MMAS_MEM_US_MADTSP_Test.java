package com.github.schmittjoaopedro.tsp;

import com.github.schmittjoaopedro.tsp.algorithms.MMAS_MEM_US_MADTSP;
import com.github.schmittjoaopedro.tsp.graph.Graph;
import com.github.schmittjoaopedro.tsp.graph.GraphFactory;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.assertj.core.api.Assertions.assertThat;

public class MMAS_MEM_US_MADTSP_Test {

    private String kroA100;

    private String kroA150;

    @Before
    public void beforeClass() {
        kroA100 = getClass().getClassLoader().getResource("tsp/KroA100.tsp").getFile();
        kroA150 = getClass().getClassLoader().getResource("tsp/KroA150.tsp").getFile();
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 10, 1.0, 5.0);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(23823.14606758991);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(23823.14606758991);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");

        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 31609.844507537066, 2056.349315821938, 0.0, 54.755918367346936, 25325.55591839433);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 5, 26894.053006187714, 1497.906903570778, 0.7, 19.325714285714287, 24581.351137237063);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 10, 25458.250290322187, 1682.0623217665498, 0.515, 6.940408163265306, 23903.763443059805);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 11, 26784.7281788315, 1989.3470879727863, 0.525, 18.555918367346937, 24234.524689431262);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 15, 28138.05164277909, 1906.2861794141597, 0.65, 20.893061224489795, 24118.524689431262);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 20, 27232.005928317063, 2117.9386622017596, 0.885, 18.455510204081634, 23566.470526253495);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 21, 28734.151861468457, 2435.4519193812516, 0.88, 20.94938775510204, 24155.667389320755);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 25, 26555.284028394475, 2163.9847053169665, 1.0, 16.92734693877551, 23673.012452850213);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 30, 25642.571629386075, 1724.0889486983353, 1.0, 14.390204081632653, 23673.012452850213);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 31, 28272.45327742898, 1590.0856153599593, 0.97, 21.358367346938774, 23958.69072723804);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 35, 27540.056998751348, 1356.4335543038658, 0.97, 19.649795918367346, 23958.69072723804);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 40, 27745.73023059524, 1750.7019046233054, 0.97, 21.19265306122449, 23958.69072723804);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 41, 27012.119666830855, 1435.5117701490053, 1.02, 18.88734693877551, 23705.00925109647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 45, 26598.23584696775, 1497.1026592496833, 1.02, 17.88408163265306, 23705.00925109647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 26350.32491430654, 1465.0454594825005, 1.02, 19.18285714285714, 23705.00925109647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 51, 27520.797317334112, 1422.9901955486705, 1.075, 21.24, 24348.65179903309);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 55, 27717.72972597523, 1925.580466143064, 1.15, 21.554285714285715, 23932.65179903309);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 60, 27870.74737025589, 1938.8669639489667, 1.165, 21.69142857142857, 23805.65179903309);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 61, 27538.880858753688, 1409.107985810844, 1.185, 23.019591836734694, 24220.54240152716);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 65, 28110.60071273719, 1724.217655783476, 1.185, 25.321632653061226, 24220.54240152716);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 70, 27172.148226339883, 1692.41856079451, 1.185, 23.455510204081634, 24220.54240152716);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 71, 29014.35482230237, 2620.9831677334105, 1.37, 25.91265306122449, 24105.916952772477);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 75, 29488.499266069666, 2098.516508554747, 1.37, 23.703673469387756, 24105.916952772477);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 80, 28896.800168923564, 1919.0893902597431, 1.37, 21.773061224489798, 24105.916952772477);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 81, 30440.198177884206, 1906.9568063541633, 1.495, 18.060408163265308, 24190.281424223154);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 85, 29192.602845334444, 2492.761326512701, 1.495, 22.186938775510203, 24190.281424223154);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 90, 28568.967840565914, 2511.107715948536, 1.495, 20.10938775510204, 24190.281424223154);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 91, 29101.125538396576, 1869.7806323551063, 1.55, 22.587755102040816, 24096.64018804722);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 95, 29356.95888604041, 1485.162640881861, 1.55, 22.372244897959185, 24096.64018804722);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 29088.776993576204, 1554.3053771174139, 1.625, 20.820408163265306, 24096.64018804722);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 29251.860150411176, 1533.5956680493043, 1.63, 21.604897959183674, 23625.162077198816);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 105, 29968.67095737588, 2459.4373052133433, 1.63, 23.489795918367346, 23625.162077198816);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 110, 29176.1398902112, 1705.661709303327, 1.63, 22.419591836734693, 23625.162077198816);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 111, 29126.611348165196, 1445.651812075011, 1.615, 21.922448979591838, 24003.49469458038);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 115, 28948.922759340658, 1934.2966993461719, 1.615, 21.85469387755102, 24003.49469458038);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 120, 29155.539711712583, 1657.4367833853933, 1.615, 20.97714285714286, 24003.49469458038);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 121, 27158.48970162829, 2110.250203689209, 1.62, 16.143673469387757, 23618.626068114474);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 125, 27392.555450926015, 2207.341568695406, 1.62, 15.191836734693878, 23618.626068114474);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 130, 27317.564265477493, 2253.39078846892, 1.6, 15.12734693877551, 23384.626068114474);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 131, 29079.75041139628, 1326.1906311455436, 1.58, 18.008163265306123, 25160.142959179462);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 135, 28811.420369816256, 1103.1212404916473, 1.58, 16.48734693877551, 25160.142959179462);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 140, 28721.06985484831, 1377.8546610856554, 1.585, 14.75673469387755, 24382.08509015526);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 141, 26563.383644488003, 1808.491273821557, 1.595, 13.40326530612245, 23304.698833702805);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 145, 26535.272825944805, 1733.7338774572645, 1.57, 12.711836734693877, 23111.698833702805);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 26115.515066472264, 1788.1760238370175, 1.57, 11.582857142857144, 23111.698833702805);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 151, 28350.62589354061, 1544.0629982843784, 1.545, 16.02938775510204, 23744.399598113603);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 155, 28777.16624559577, 1545.8603871529197, 1.545, 15.763265306122449, 23744.399598113603);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 160, 28469.268199583676, 1609.2872198938671, 1.545, 16.697142857142858, 23744.399598113603);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 161, 29758.940193000642, 1515.8893017630112, 1.53, 19.921632653061224, 24712.99337136463);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 165, 29648.852795452894, 1293.9922698474684, 1.53, 17.69061224489796, 24712.99337136463);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 170, 29470.74117517138, 1463.727667650086, 1.53, 18.908571428571427, 24712.99337136463);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 171, 28381.798073332502, 1972.9666534382716, 1.51, 14.09061224489796, 23454.21469762217);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 175, 27958.739793122877, 1458.7858302471996, 1.51, 12.8, 23454.21469762217);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 180, 28202.92369334279, 1511.4044865658063, 1.51, 12.31265306122449, 23454.21469762217);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 181, 29732.36808187819, 3023.98549656257, 1.5, 19.87673469387755, 24382.89671601435);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 185, 29538.8827935892, 2773.6265695415427, 1.5, 17.914285714285715, 24382.89671601435);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 190, 28522.58737539713, 1868.9175980625896, 1.5, 17.726530612244897, 24382.89671601435);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 191, 28619.679766458492, 2485.450457088267, 1.505, 15.968163265306123, 23691.97316568142);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 195, 29172.333543311608, 2040.410380048689, 1.505, 18.10938775510204, 23691.97316568142);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 28326.660050431485, 1976.114122487732, 1.49, 17.506122448979593, 23691.97316568142);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 29264.668134987252, 1977.4268542744544, 1.475, 19.58122448979592, 24245.178376052394);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 205, 29311.024139864094, 2284.3590150354657, 1.475, 19.306938775510204, 24245.178376052394);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 210, 29297.41637524249, 1896.43328875993, 1.475, 20.15918367346939, 24245.178376052394);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 211, 28112.841798867146, 2086.061930010671, 1.49, 14.627755102040817, 23777.336093732454);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 215, 28207.341054548862, 2040.7124647271282, 1.485, 14.820408163265306, 23255.41309307653);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 220, 28084.14960594676, 1840.8759900573286, 1.485, 14.281632653061225, 23255.41309307653);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 221, 28547.776932432647, 1908.2322464134595, 1.465, 16.532244897959185, 24199.842539013338);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 225, 28819.82451198752, 1876.2483982709175, 1.465, 15.382857142857143, 24199.842539013338);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 230, 28858.88979538302, 1556.8259581259251, 1.465, 15.51265306122449, 24199.842539013338);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 231, 26967.575876231836, 1925.8438362025206, 1.41, 12.351020408163265, 23289.466694015107);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 235, 27614.599824245335, 1876.2242566016037, 1.41, 13.47265306122449, 23289.466694015107);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 240, 27552.081546051348, 2045.737803351313, 1.41, 13.244081632653062, 23289.466694015107);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 241, 30514.409848120285, 2408.666326978935, 1.355, 18.66122448979592, 24905.928770283568);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 245, 29276.943312773088, 2823.698418517402, 1.36, 16.86938775510204, 24420.13858100042);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 28514.532221395504, 2859.1608387386887, 1.315, 15.864489795918367, 23995.285620584094);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 251, 30088.60113146223, 2440.0871171075537, 1.3, 15.916734693877551, 25154.594317408886);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 255, 29700.438063469875, 2417.4638549538017, 1.31, 17.031020408163265, 24476.357350850827);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 260, 29715.71563080945, 2403.034947411449, 1.31, 15.361632653061225, 24476.357350850827);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 261, 28821.536149147018, 1904.6378799808954, 1.275, 15.93469387755102, 23398.295171063404);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 265, 28111.809453725487, 1875.0941259338806, 1.275, 14.93061224489796, 23398.295171063404);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 270, 27978.11732490238, 1923.0693622630254, 1.275, 14.651428571428571, 23398.295171063404);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 271, 28336.524672878728, 2153.561097975127, 1.285, 16.63020408163265, 24745.283951501868);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 275, 27651.82665965036, 2102.346535703911, 1.285, 14.264489795918367, 24745.283951501868);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 280, 27688.510662500543, 1785.7869053232682, 1.29, 13.70204081632653, 23420.772185821465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 281, 27122.059200148724, 2122.130464252871, 1.235, 14.01469387755102, 23676.68201989045);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 285, 26276.061999670965, 2039.9127971504322, 1.245, 12.205714285714286, 23232.0401002002);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 290, 26616.925395015547, 1981.4682637446897, 1.245, 12.946938775510205, 23232.0401002002);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 291, 27886.86244012979, 1982.261476461351, 1.235, 11.831836734693878, 23809.035888355214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 295, 27609.822442282573, 2011.6145869726422, 1.235, 10.416326530612245, 23809.035888355214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 27667.8837880316, 2251.3405615651795, 1.225, 11.900408163265306, 23809.035888355214);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 29130.828603461654, 2599.035668972075, 1.19, 15.791020408163265, 23583.14486192829);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 305, 29447.860083207474, 2472.1957206080124, 1.19, 16.175510204081633, 23583.14486192829);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 310, 29084.29748519605, 2439.8304157112148, 1.19, 13.808979591836735, 23583.14486192829);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 311, 28674.417645908088, 1085.6299677323448, 1.18, 14.717551020408163, 23903.650232916712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 315, 28533.309482078796, 1217.2980384907407, 1.18, 14.393469387755102, 23903.650232916712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 320, 28602.30632874485, 1546.3752169568922, 1.18, 13.918367346938776, 23903.650232916712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 321, 28148.509301633603, 1246.2686519439392, 1.245, 12.947755102040816, 24545.870779026485);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 325, 28165.408666951895, 1293.6627944877544, 1.26, 12.498775510204082, 24037.870779026485);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 330, 27994.81728173334, 2173.0395173793995, 1.26, 12.277551020408163, 23606.385925889244);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 331, 27959.81352664791, 2590.839851178491, 1.21, 11.136326530612244, 23620.329148499797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 335, 28092.13602415068, 2736.8971398482945, 1.21, 11.82938775510204, 23620.329148499797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 340, 27858.377592049404, 2220.9978799169658, 1.21, 10.940408163265307, 23620.329148499797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 341, 28336.270025572285, 1565.4965348208545, 1.16, 14.511020408163265, 24656.43283361573);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 345, 27988.59690190586, 1433.6421666766676, 1.16, 15.550204081632653, 24656.43283361573);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 28081.48830649101, 2093.903932459817, 1.16, 13.691428571428572, 24656.43283361573);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 351, 27351.791899577045, 2060.340420895934, 1.265, 10.478367346938775, 23760.623337343968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 355, 26901.854442653283, 2228.865621369407, 1.265, 9.19591836734694, 23760.623337343968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 360, 26952.644045863934, 2331.6010499128447, 1.265, 10.556734693877551, 23760.623337343968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 361, 26667.839179705334, 1734.5162628760147, 1.25, 9.456326530612245, 23579.43036783479);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 365, 26489.974980104515, 1573.525062578482, 1.25, 9.164897959183673, 23579.43036783479);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 370, 26333.581044407583, 1262.0734268963224, 1.25, 8.026122448979592, 23579.43036783479);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 371, 27997.21675294971, 1483.4321137770455, 1.19, 12.64, 24566.48484647304);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 375, 27914.867845475263, 1339.9178447656955, 1.19, 12.575510204081633, 24566.48484647304);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 380, 27840.015639728124, 1774.974323155798, 1.19, 12.53795918367347, 24566.48484647304);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 381, 27286.77868099183, 1737.7655324777832, 1.19, 10.948571428571428, 23262.87642453343);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 385, 27537.846200436954, 1894.0200879064107, 1.19, 11.135510204081633, 23262.87642453343);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 390, 27108.651830074115, 1672.6312007718136, 1.19, 9.569795918367348, 23262.87642453343);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 391, 28920.289257093777, 1621.0282801116027, 1.085, 10.561632653061224, 23726.860849423843);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 395, 29160.08158681321, 1515.2766606884718, 1.085, 10.285714285714286, 23726.860849423843);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 28859.50527944636, 1711.4924581871337, 1.125, 9.404081632653062, 23726.860849423843);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 27283.518875938225, 1672.4368028516362, 1.15, 11.56, 24174.206959754192);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 405, 27402.392113259077, 1883.2164299279555, 1.15, 11.19265306122449, 24174.206959754192);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 410, 27980.984795689918, 1927.2011974483516, 1.15, 11.288979591836735, 24174.206959754192);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 411, 29427.154321314763, 2793.92093512913, 1.08, 11.583673469387755, 24281.7230874682);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 415, 29085.95655147779, 2517.6042494277526, 1.08, 12.577142857142857, 24281.7230874682);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 420, 29320.271856614287, 2564.58893391786, 1.08, 13.009795918367347, 24281.7230874682);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 421, 27090.48774578688, 1683.0455462931757, 1.08, 8.022857142857143, 23569.13910662827);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 425, 26271.443565583682, 1539.6053356789773, 1.08, 7.8579591836734695, 23569.13910662827);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 430, 25862.416637894916, 1392.8055963037903, 1.08, 6.6604081632653065, 23569.13910662827);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 431, 28942.540604530986, 1387.963994130842, 1.065, 9.373877551020408, 24497.230746757028);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 435, 28423.461330232643, 1429.6543489489043, 1.065, 8.075918367346938, 24497.230746757028);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 440, 27996.07398247361, 2154.328849703673, 1.095, 7.863673469387755, 23861.230746757028);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 441, 28301.9582651968, 1731.1357490541568, 1.05, 11.45795918367347, 23621.41113777924);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 445, 27897.374732353303, 1725.3149379812696, 1.05, 11.013061224489796, 23621.41113777924);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 27550.979025109173, 1804.8138856174703, 1.05, 9.819591836734693, 23621.41113777924);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 451, 28020.80850816649, 1393.5022269886583, 1.08, 11.620408163265306, 23614.776134902117);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 455, 28180.51077406156, 1372.2373792946871, 1.08, 11.461224489795919, 23614.776134902117);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 460, 27735.779551515992, 1578.8674958808735, 1.08, 10.851428571428572, 23614.776134902117);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 461, 26345.975915250623, 1694.6420459602996, 1.065, 7.884081632653062, 23574.05726798728);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 465, 25918.762754460302, 1581.1386502029845, 1.065, 7.1289795918367345, 23574.05726798728);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 470, 25941.89009939886, 1602.6868424957577, 1.065, 6.913469387755102, 23574.05726798728);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 471, 26979.45871871256, 1640.4603891012168, 0.95, 9.230204081632653, 23809.52838304149);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 475, 26570.717502818814, 1330.4500668736857, 0.95, 9.311020408163266, 23809.52838304149);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 480, 26955.368682606313, 1849.8190536048076, 0.95, 9.118367346938776, 23809.52838304149);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 481, 26503.220003595405, 1605.8821841882582, 0.965, 6.270204081632653, 23933.419410202227);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 485, 25909.843145818377, 1589.2803750267838, 0.965, 6.402448979591837, 23933.419410202227);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 490, 26141.13936676028, 1920.310048760498, 0.965, 6.342040816326531, 23933.419410202227);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 491, 26630.99785782976, 1591.4247147662895, 0.875, 8.88408163265306, 23476.592716942017);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 495, 26610.382285499367, 1495.0128148649287, 0.875, 9.54204081632653, 23476.592716942017);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 26284.329403044623, 1628.189630555701, 0.86, 8.467755102040817, 23476.592716942017);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 25504.95815937445, 1169.9263340572168, 0.88, 6.2024489795918365, 23353.51942870539);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 505, 25562.312965166333, 1264.5018451151539, 0.88, 6.68, 23353.51942870539);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 510, 25628.92391542083, 1361.889997196089, 0.88, 5.81469387755102, 23353.51942870539);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 511, 25385.612749168522, 1258.2273079399845, 0.86, 4.674285714285714, 23825.932946168625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 515, 25921.34973728115, 1425.3386906633336, 0.86, 5.724897959183673, 23825.932946168625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 520, 25575.447482634525, 1483.800578079341, 0.86, 6.566530612244898, 23825.932946168625);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 521, 26670.37778587835, 942.2601781824281, 0.86, 3.6040816326530614, 23583.098905397812);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 525, 26847.094278979333, 982.3089104443316, 0.86, 4.7240816326530615, 23583.098905397812);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 530, 26475.645696543867, 710.652904928977, 0.86, 3.2122448979591836, 23583.098905397812);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 531, 26066.780873631727, 1843.1960086125234, 0.84, 6.36, 23455.680829144778);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 535, 26022.19631803131, 1633.2721655334706, 0.84, 6.0081632653061225, 23455.680829144778);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 540, 25632.057629772364, 1592.9966570768875, 0.84, 6.053061224489796, 23455.680829144778);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 541, 25509.86863505822, 1039.1581393607926, 0.8, 5.351836734693878, 23669.699290127628);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 545, 25413.65142774409, 1157.4319704587517, 0.8, 6.308571428571429, 23669.699290127628);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 25153.82334852188, 1154.7858067666052, 0.8, 5.957551020408164, 23669.699290127628);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 551, 25658.557471622196, 1785.9384398982168, 0.8, 3.786122448979592, 23785.286559490734);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 555, 26215.94657145333, 1873.4353621768748, 0.8, 4.094693877551021, 23785.286559490734);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 560, 25667.20202292074, 1815.335526231674, 0.8, 3.0318367346938775, 23785.286559490734);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 561, 26578.730053558495, 1459.9375521058603, 0.785, 5.285714285714286, 23417.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 565, 26822.38928120834, 1452.9921645204795, 0.785, 4.786122448979592, 23417.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 570, 26659.24938921789, 1525.3200804620565, 0.785, 5.061224489795919, 23417.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 571, 25515.726173696155, 1066.932254701289, 0.79, 5.493877551020408, 23557.945291566994);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 575, 25952.629975871554, 860.6873759306251, 0.79, 4.808979591836735, 23557.945291566994);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 580, 25779.622662236183, 899.6758350941303, 0.79, 5.524897959183673, 23557.945291566994);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 581, 25779.835792524344, 1179.6968490509391, 0.785, 6.939591836734694, 24220.7628877223);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 585, 25300.49654324377, 1126.3828778574875, 0.785, 5.577142857142857, 24220.7628877223);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 590, 25734.028894073974, 1188.5945277802925, 0.78, 7.1020408163265305, 24070.7628877223);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 591, 25404.31900146783, 1771.756540855668, 0.795, 5.0285714285714285, 23670.253656726272);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 595, 25558.170279617018, 1704.6474115603864, 0.795, 4.94204081632653, 23670.253656726272);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 25492.376801569353, 1441.1014830099873, 0.79, 5.979591836734694, 23670.253656726272);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 25451.22421956689, 1062.624444026443, 0.79, 4.315918367346939, 23300.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 605, 25288.47366199781, 1091.6979641465398, 0.79, 3.6318367346938776, 23300.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 610, 25221.629663231, 1067.8713158245107, 0.79, 3.166530612244898, 23300.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 611, 26427.154390209776, 1386.4047064905394, 0.775, 4.448163265306122, 23760.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 615, 26246.02413262993, 1142.5192240677793, 0.775, 5.2726530612244895, 23760.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 620, 26783.958524424117, 1431.8936492487865, 0.775, 5.147755102040817, 23760.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 621, 26689.013087973824, 748.458514956647, 0.775, 6.074285714285714, 23566.031126280777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 625, 26700.92765223219, 499.6158203977488, 0.775, 5.215510204081633, 23566.031126280777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 630, 26628.56044337919, 629.2795314615555, 0.775, 4.94204081632653, 23566.031126280777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 631, 27701.92110201992, 1343.3694544939522, 0.74, 6.561632653061224, 23754.533591528114);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 635, 27301.49806969052, 1100.404035307761, 0.74, 6.037551020408163, 23754.533591528114);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 640, 26904.564218460313, 1476.149697752351, 0.74, 5.203265306122449, 23754.533591528114);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 641, 25845.002149818414, 958.7338866436957, 0.75, 4.74204081632653, 23451.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 645, 25765.543974098517, 1097.2177611715974, 0.75, 4.64, 23451.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 25675.154653655045, 1038.976829589014, 0.75, 3.20734693877551, 23451.27682849586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 651, 25985.30987836899, 1245.9614377567348, 0.73, 3.780408163265306, 23563.011294724132);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 655, 25689.08486627357, 1167.5566776360065, 0.73, 3.4244897959183676, 23563.011294724132);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 660, 25782.415485904072, 1077.1792892973635, 0.73, 3.813061224489796, 23563.011294724132);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 661, 25395.558678226767, 1229.053946798659, 0.75, 5.391836734693878, 23463.847185927225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 665, 25043.61201027911, 1177.3495047817623, 0.75, 5.151020408163265, 23463.847185927225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 670, 25375.03747975434, 1112.1868818436403, 0.75, 5.040816326530612, 23463.847185927225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 671, 26272.237902870052, 1042.330558290201, 0.715, 5.424489795918367, 24003.11548734857);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 675, 26425.858100645622, 967.6246842974504, 0.715, 5.682448979591837, 24003.11548734857);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 680, 26123.35156816461, 824.1716337547964, 0.715, 4.237551020408163, 24003.11548734857);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 681, 26886.15231801792, 1469.8256424471886, 0.72, 5.128163265306123, 23667.636824829413);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 685, 26429.250757999496, 1580.3294040280261, 0.72, 5.243265306122449, 23667.636824829413);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 690, 25624.380851385235, 1506.7227964320332, 0.72, 4.884897959183673, 23667.636824829413);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 691, 25874.357397807576, 681.0514429098994, 0.675, 3.1812244897959183, 23832.86723378561);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 695, 26225.25322747888, 954.5075977758178, 0.675, 4.193469387755102, 23832.86723378561);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 25987.000452090415, 792.9158773174939, 0.67, 3.3477551020408165, 23832.86723378561);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 25751.531732647745, 826.7791306298734, 0.675, 4.91265306122449, 23552.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 705, 25403.306843849943, 867.2886202177922, 0.675, 4.14938775510204, 23552.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 710, 25360.352205652962, 871.4825687872577, 0.675, 5.071020408163266, 23552.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 711, 25936.590003792768, 804.3645592221541, 0.705, 4.1355102040816325, 23534.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 715, 26181.54701399186, 1020.7330175405831, 0.705, 4.709387755102041, 23534.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 720, 26264.174376950177, 723.3335132633034, 0.705, 3.5281632653061226, 23534.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 721, 25801.841726600032, 652.3818445654599, 0.68, 2.633469387755102, 23817.443395848233);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 725, 25849.8563724708, 487.52891419902, 0.68, 1.9159183673469389, 23817.443395848233);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 730, 25636.2021435689, 477.48752964660093, 0.655, 1.5224489795918368, 23754.50973426599);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 731, 25696.228908040506, 489.90472030799856, 0.665, 3.5795918367346937, 23451.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 735, 25658.54180732171, 687.9244146759513, 0.665, 4.332244897959184, 23451.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 740, 25660.4135067097, 673.1674870121947, 0.665, 3.4244897959183676, 23451.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 741, 26656.658195136246, 586.5346156921494, 0.655, 3.8955102040816327, 23666.288996451916);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 745, 26156.034737936025, 753.8641060259833, 0.655, 4.601632653061224, 23666.288996451916);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 25974.385811224496, 775.694364846471, 0.655, 4.650612244897959, 23666.288996451916);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 751, 26434.53714802896, 687.1564437272435, 0.685, 4.768979591836735, 23754.136097151084);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 755, 26727.921631404966, 544.011984271073, 0.685, 5.043265306122449, 23754.136097151084);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 760, 26517.98486553947, 728.3785958224322, 0.685, 5.429387755102041, 23754.136097151084);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 761, 26247.94699810498, 1226.8717059358858, 0.69, 5.217142857142857, 23687.065314471958);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 765, 26111.243066167066, 1253.9520946150813, 0.69, 5.717551020408163, 23687.065314471958);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 770, 26067.610946235225, 1215.7461351107422, 0.69, 4.9648979591836735, 23687.065314471958);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 771, 27080.95020366698, 1468.461365939428, 0.69, 2.1412244897959183, 23522.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 775, 27325.146595928934, 964.275518152169, 0.69, 1.9183673469387754, 23522.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 780, 27290.37466747176, 1273.266306404229, 0.69, 1.849795918367347, 23522.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 781, 26039.13872335934, 531.9816625251754, 0.685, 2.8857142857142857, 23881.747173364896);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 785, 26062.67915335826, 386.8625984815625, 0.685, 3.5175510204081633, 23881.747173364896);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 790, 25952.217870624016, 669.6292915030251, 0.685, 3.183673469387755, 23881.747173364896);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 791, 25360.609728709984, 582.189081673146, 0.67, 1.5779591836734694, 23584.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 795, 25157.372356905613, 733.9665059724937, 0.67, 1.7118367346938776, 23584.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 25301.000937276116, 561.8517565395077, 0.645, 0.9722448979591837, 23584.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 25973.780598065354, 429.23104484939716, 0.635, 1.1493877551020408, 23548.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 805, 25895.99791232932, 299.1472015806633, 0.635, 1.5485714285714285, 23548.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 810, 25894.633272497485, 351.8820477758511, 0.635, 1.4620408163265306, 23548.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 811, 24995.143504774558, 781.179720776842, 0.67, 1.9314285714285715, 23584.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 815, 25280.123504774558, 560.2967701780485, 0.67, 1.2930612244897959, 23584.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 820, 25083.73629098149, 748.6725277876498, 0.67, 1.5583673469387755, 23584.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 821, 25841.465009047584, 578.4472272940218, 0.66, 1.3551020408163266, 23864.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 825, 26003.36383599124, 362.37256541389274, 0.66, 0.9657142857142857, 23864.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 830, 25845.892044995424, 655.5624306061669, 0.66, 1.3689795918367347, 23864.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 831, 26338.022730250428, 504.62784486688514, 0.665, 4.307755102040816, 23897.893777406527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 835, 26091.916403655778, 636.0260700420337, 0.665, 3.796734693877551, 23897.893777406527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 840, 25970.71788676138, 772.0610254157885, 0.665, 3.179591836734694, 23897.893777406527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 841, 25736.61741778371, 547.2314434895029, 0.665, 0.8938775510204081, 23843.97581732704);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 845, 25825.931270813384, 412.1543119112544, 0.665, 0.5077551020408163, 23843.97581732704);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 25727.880120735954, 638.739894509895, 0.665, 1.5697959183673469, 23843.97581732704);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 851, 25874.449706690535, 449.7353789237863, 0.65, 3.0628571428571427, 23800.274705059484);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 855, 25834.019400877525, 402.1984187111338, 0.65, 1.7681632653061226, 23800.274705059484);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 860, 25769.676426718874, 378.59100925207775, 0.65, 1.4155102040816328, 23800.274705059484);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 861, 26606.88176295317, 681.1065154116295, 0.63, 1.3142857142857143, 23701.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 865, 26433.28131217301, 953.4599001533795, 0.63, 1.2889795918367346, 23701.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 870, 26588.084143746994, 683.8426308656188, 0.63, 0.7714285714285715, 23701.54093727615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 871, 25297.8276974768, 426.50474757032816, 0.655, 0.5379591836734694, 23640.623969234242);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 875, 25397.545584501113, 420.89667190600994, 0.655, 0.9918367346938776, 23640.623969234242);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 880, 25409.182597915278, 380.49223316177427, 0.655, 0.9983673469387755, 23640.623969234242);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 881, 25001.70736111389, 851.7121326890712, 0.635, 3.0595918367346937, 23899.868417722788);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 885, 24788.84936792625, 843.2808328367427, 0.635, 3.1314285714285712, 23893.868417722788);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 890, 24768.351344843406, 851.869999362901, 0.635, 3.5183673469387755, 23893.868417722788);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 891, 24190.05073429455, 341.1615939339712, 0.63, 1.2359183673469387, 24031.804594357982);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 895, 24195.652503139172, 361.2068514377778, 0.63, 1.343673469387755, 24031.804594357982);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 24146.596098421036, 278.6580937540057, 0.63, 0.9771428571428571, 24031.804594357982);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 24303.727324601026, 443.37559192852075, 0.635, 2.1787755102040816, 23791.623969234242);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 905, 24057.274671828418, 358.188460550102, 0.635, 2.2081632653061223, 23791.623969234242);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 910, 24134.501713887967, 472.8639144858814, 0.635, 2.089795918367347, 23791.623969234242);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 911, 23920.286067589906, 272.7334805786986, 0.625, 0.8204081632653061, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 915, 23935.174988629333, 350.522513042377, 0.625, 0.8726530612244898, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 920, 23902.085430596446, 291.21363842216215, 0.625, 0.6751020408163265, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 921, 23866.7260675899, 196.35298181944603, 0.625, 0.31183673469387757, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 925, 23937.084202210015, 322.185181784153, 0.625, 0.7208163265306122, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 930, 23858.63513489996, 170.13006406476796, 0.625, 0.35346938775510206, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 931, 24173.56977329836, 242.5513200482382, 0.625, 0.6522448979591837, 24096.569773298364);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 935, 24163.329773298363, 251.33363142586845, 0.625, 0.46775510204081633, 24096.569773298364);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 940, 24177.469773298362, 277.43484250673106, 0.625, 0.4579591836734694, 24096.569773298364);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 941, 23907.565563164822, 263.64207194301486, 0.6, 0.23510204081632652, 23854.290725742736);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 945, 23880.928144453774, 188.35499403890162, 0.6, 0.12, 23854.290725742736);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 23884.957196079926, 189.92166544894363, 0.6, 0.1983673469387755, 23854.290725742736);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 951, 23823.146067589903, 7.34982709802142E-12, 0.595, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 955, 23862.546067589905, 194.97943376632514, 0.595, 0.23510204081632652, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 960, 23870.9060675899, 197.62679319301603, 0.595, 0.3853061224489796, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 961, 23823.146067589903, 7.34982709802142E-12, 0.595, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 965, 23823.146067589903, 7.34982709802142E-12, 0.595, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 970, 23823.146067589903, 7.34982709802142E-12, 0.595, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 971, 24071.720127530658, 2.939930839208568E-11, 0.58, 0.0, 24071.720127530687);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 975, 24071.720127530658, 2.939930839208568E-11, 0.58, 0.0, 24071.720127530687);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 980, 24071.720127530658, 2.939930839208568E-11, 0.58, 0.0, 24071.720127530687);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 981, 23823.146067589903, 7.34982709802142E-12, 0.58, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 985, 23823.146067589903, 7.34982709802142E-12, 0.58, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 990, 23823.146067589903, 7.34982709802142E-12, 0.58, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 991, 23823.146067589903, 7.34982709802142E-12, 0.56, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 995, 23823.146067589903, 7.34982709802142E-12, 0.56, 0.0, 23823.14606758991);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 23823.146067589903, 7.34982709802142E-12, 0.545, 0.0, 23823.14606758991);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 89, 48, 91, 7, 30, 79, 88, 41, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 44, 22, 97, 46, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 62, 48, 5, 89, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 22, 44, 59, 76, 61, 34, 85, 26, 11, 19, 8, 6, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 40, 70, 99, 13, 2, 42, 45, 28, 82, 54, 33, 57, 92, 27, 66, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 62, 5, 89, 48, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 65, 25, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 97, 22, 44, 59, 61, 76, 19, 8, 6, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 82, 54, 33, 11, 26, 85, 34, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 62, 5, 89, 48, 55, 79, 30, 88, 41, 7, 91, 74, 96, 18, 3, 64, 25, 65, 69, 21, 93, 87, 15, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 44, 97, 22, 59, 61, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 34, 85, 76, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 91, 7, 41, 88, 30, 79, 55, 96, 3, 25, 64, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 97, 22, 44, 59, 61, 76, 19, 85, 26, 11, 54, 82, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 49, 72, 67, 84, 38, 43, 63, 39, 53, 1, 68, 80, 24, 60, 50, 86, 56, 6, 8, 34, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 8, 6, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 44, 90, 97, 46, 31, 10, 16, 14, 20, 58, 73, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 8, 6, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 44, 90, 46, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 23, 37, 17, 78, 52, 15, 87, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 60, 24, 80, 68, 63, 53, 39, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 36, 4, 32, 75, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 11, 26, 34, 85, 19, 56, 8, 6, 86, 50, 76, 59, 61, 97, 22, 44, 90, 46, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 3, 64, 65, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 60, 50, 86, 6, 8, 56, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 19, 26, 34, 85, 61, 59, 76, 22, 44, 90, 97, 46, 31, 14, 16, 10, 73, 58, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 86, 56, 8, 6, 19, 85, 34, 26, 11, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 29, 38, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 72, 67, 84, 49, 43, 63, 39, 53, 1, 68, 80, 24, 60, 76, 61, 59, 22, 97, 90, 44, 31, 46, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 56, 86, 8, 6, 19, 11, 26, 85, 34, 61, 76, 59, 22, 44, 31, 46, 90, 97, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 3, 64, 65, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 54, 82, 33, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 46, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 3, 64, 65, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 36, 4, 32, 12, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 56, 6, 8, 86, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 23, 37, 17, 78, 52, 15, 87, 93, 21, 69, 3, 64, 65, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 46, 83, 9, 71, 20, 73, 58, 98, 35, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 44, 90, 97, 46, 31, 10, 16, 14, 20, 73, 58, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 29, 38, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 8, 6, 56, 86, 19, 11, 26, 85, 34, 61, 59, 76, 90, 97, 22, 44, 46, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 29, 47, 99, 40, 70, 13, 28, 45, 42, 2, 33, 82, 54, 6, 8, 56, 86, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 46, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 3, 64, 65, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 8, 86, 19, 11, 26, 85, 34, 61, 59, 76, 22, 44, 90, 97, 46, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 4, 36, 32, 75, 12, 94, 81, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 19, 56, 6, 8, 86, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 13, 99, 70, 40, 47, 42, 2, 45, 28, 33, 82, 54, 6, 8, 56, 86, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 12, 75, 32, 36, 4, 77, 95, 51, 47, 99, 40, 70, 13, 2, 42, 28, 45, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 11, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 40, 70, 99, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 86, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 8, 86, 19, 85, 26, 11, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 16, 14, 20, 73, 58, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 28, 45, 33, 54, 82, 6, 8, 56, 86, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 37, 35, 98, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 12, 32, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 11, 6, 8, 86, 56, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 55, 79, 30, 88, 41, 7, 91, 96, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 56, 11, 19, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 73, 58, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 16, 14, 58, 20, 73, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 77, 95, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 86, 8, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 54, 82, 8, 86, 56, 6, 11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 20, 73, 58, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 25, 64, 3, 65, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 26, 34, 85, 19, 11, 6, 8, 86, 56, 76, 61, 59, 22, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 23, 37, 98, 35, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 11, 19, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 56, 86, 8, 6, 11, 26, 19, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 16, 14, 10, 58, 73, 20, 9, 71, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 64, 3, 25, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 40, 70, 99, 13, 2, 42, 45, 28, 33, 82, 54, 8, 86, 56, 6, 11, 26, 34, 85, 19, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 8, 6, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 86, 56, 8, 6, 19, 11, 26, 34, 85, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 8, 86, 56, 6, 19, 11, 26, 34, 85, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 42, 2, 13, 28, 45, 33, 54, 82, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 20, 73, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 14, 16, 10, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 97, 22, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 3, 64, 65, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 28, 45, 33, 82, 54, 8, 86, 56, 6, 11, 19, 85, 26, 34, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 33, 45, 28, 82, 54, 11, 6, 8, 86, 56, 19, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 83, 9, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 54, 82, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 46, 31, 10, 14, 16, 58, 73, 20, 71, 83, 9, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 54, 82, 8, 86, 56, 6, 11, 19, 34, 26, 85, 61, 76, 59, 22, 97, 44, 90, 46, 31, 10, 16, 14, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 86, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 11, 6, 8, 86, 56, 19, 26, 85, 34, 61, 59, 76, 22, 97, 90, 46, 31, 44, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 21, 93, 87, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 34, 85, 61, 59, 76, 22, 97, 90, 44, 31, 14, 16, 10, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 11, 19, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 64, 25, 65, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 11, 19, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 44, 90, 97, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 34, 85, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 34, 85, 61, 76, 59, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 52, 78, 87, 93, 21, 15, 69, 65, 64, 25, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 3, 25, 96, 55, 79, 30, 88, 41, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 44, 90, 46, 31, 10, 14, 16, 73, 58, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 3, 64, 65, 25, 96, 55, 79, 30, 88, 41, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 44, 22, 97, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 25, 64, 65, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 44, 90, 46, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 64, 25, 3, 96, 55, 79, 30, 41, 88, 7, 91, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 83, 9, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 93, 21, 15, 69, 65, 25, 64, 3, 96, 55, 79, 30, 41, 88, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 83, 9, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 83, 9, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 37, 98, 35, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 93, 21, 15, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 15, 87, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 93, 21, 15, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 21, 93, 69, 65, 64, 25, 3, 96, 55, 41, 88, 30, 79, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 64, 25, 65, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 41, 88, 30, 79, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 88, 30, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 30, 79, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 62, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 62, 5, 89, 48, 18, 74, 27, 92, 66, 57, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 38, 81, 94, 75, 32, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 8, 86, 56, 19, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 46, 10, 14, 16, 58, 73, 20, 71, 9, 83, 98, 35, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 25, 65, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 100, 1.0, 5.0);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(23153.5260610576);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(23153.5260610576);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");

        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 31609.844507537066, 2056.349315821938, 0.0, 54.755918367346936, 25325.55591839433);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 23449.445561643064, 1260.2670403371687, 0.51, 1.9975510204081632, 22812.601544071942);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 23673.68655215758, 1739.6070864059893, 0.5, 3.086530612244898, 22775.787921968014);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 25500.125213264455, 2039.2478129713604, 0.5, 7.4130612244897955, 23193.90468263777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 24927.088753929806, 2113.7092062034426, 0.605, 8.325714285714286, 22900.321151245887);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 23864.296448878467, 1638.6507488643558, 0.765, 8.806530612244899, 22400.24898614342);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 25581.899154441664, 2169.744465231311, 0.745, 12.033469387755103, 22758.336783494717);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 23942.03978079386, 1696.036348654715, 0.77, 9.382857142857143, 22547.22398738269);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 23808.682655580742, 1521.725455416874, 0.75, 8.059591836734693, 22498.40104570644);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 25485.447488893, 1291.1595435795161, 0.755, 12.547755102040817, 23216.76524469042);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 24476.816629946577, 1771.0170110016636, 0.855, 10.791836734693877, 22662.337302978936);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 24633.730586572517, 1746.9319387230396, 0.705, 8.94204081632653, 22662.337302978936);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 25804.753904441255, 2478.8313903652365, 0.74, 9.169795918367347, 22686.088233774684);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 25279.88424066383, 2806.5139803952, 0.725, 8.982857142857142, 22116.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 24555.814910523426, 2445.418604618334, 0.655, 4.980408163265306, 22116.0);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 25598.90910726594, 1574.9466714681328, 0.625, 6.427755102040816, 22729.39729390675);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 24681.96367356201, 1869.379647407932, 0.65, 5.368979591836735, 22328.03651844785);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 24555.39581353932, 1924.675882901523, 0.625, 4.231020408163265, 22203.668316940377);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 26168.373574719484, 1994.8219930738774, 0.615, 11.186122448979592, 22981.62490488177);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 23563.977304276745, 1392.9705420737455, 0.655, 1.729795918367347, 22916.62490488177);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 24240.856418857835, 1984.077073343618, 0.61, 4.320816326530612, 22916.62490488177);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 25949.464753622575, 1646.2599058836317, 0.62, 6.537959183673469, 23171.75375447368);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 23915.947331284042, 577.7535480711462, 0.62, 2.436734693877551, 23171.75375447368);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 23945.33555712094, 1356.7815910743825, 0.575, 2.533061224489796, 23171.75375447368);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 25389.41524884966, 2089.4136264717004, 0.57, 4.533061224489796, 22852.88499091697);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 24142.810483054574, 2357.467324735702, 0.57, 2.5085714285714285, 22852.88499091697);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 22863.276323957904, 51.42376224363108, 0.545, 0.156734693877551, 22852.88499091697);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 23666.46658892828, 318.3725611617821, 0.545, 2.2351020408163267, 23153.5260610576);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 23369.270182602693, 263.88768875243903, 0.545, 1.5657142857142856, 23153.5260610576);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 23153.52606105759, 1.102474064703213E-11, 0.52, 0.0, 23153.5260610576);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 89, 48, 91, 7, 30, 79, 88, 41, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 44, 22, 97, 46, 59, 61, 76, 34, 45, 2, 13, 99, 70, 40, 47, 28, 82, 54, 33, 42, 11, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 72, 67, 84, 38, 29, 51, 77, 95, 4, 36, 12, 75, 32, 94, 81, 43, 49, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 90, 97, 22, 44, 59, 76, 61, 85, 26, 11, 34, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 40, 70, 99, 13, 2, 42, 45, 28, 82, 54, 33, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 82, 54, 33, 56, 19, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 56, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 54, 82, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 54, 82, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 54, 82, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 12, 75, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 54, 82, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 54, 82, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 38, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 54, 82, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 38, 29, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 46, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 38, 29, 95, 77, 51, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 4, 36, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 81, 94, 12, 75, 32, 4, 36, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 72, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 72, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 72, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 54, 82, 33, 84, 67, 72, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 19, 56, 6, 8, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 49, 43, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 12, 75, 32, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 11, 26, 85, 34, 61, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 80, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 54, 82, 84, 67, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 84, 67, 80, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 59, 61, 34, 85, 26, 11, 19, 56, 6, 8, 86, 50, 24, 68, 63, 39, 53, 1, 49, 72, 43, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 84, 67, 80, 60, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 54, 82, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 38, 29, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 84, 67, 72, 43, 1, 53, 39, 63, 68, 80, 24, 60, 50, 86, 8, 6, 56, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 75, 32, 12, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 4, 36, 75, 32, 12, 94, 81, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 4, 36, 75, 32, 12, 94, 81, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 4, 36, 75, 32, 12, 94, 81, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 4, 36, 75, 32, 12, 94, 81, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 4, 36, 75, 32, 12, 94, 81, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 4, 36, 75, 32, 12, 94, 81, 95, 77, 51, 47, 70, 40, 99, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 70, 40, 13, 2, 42, 45, 28, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 57, 66, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 62, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 62, 89, 48, 5, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 3, 64, 25, 65, 69, 21, 93, 15, 87, 52, 78, 17, 23, 37, 98, 35, 9, 83, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 59, 61, 34, 85, 26, 11, 6, 8, 56, 86, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 29, 95, 77, 51, 4, 36, 75, 32, 12, 94, 81, 47, 99, 40, 70, 13, 28, 2, 42, 45, 33, 82, 54, 19, 76, 66, 57, 27, 92, 46, 0]");
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 10, 1.0, 5.0);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(29758.18966200986);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(29758.18966200986);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");

        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 40248.55777154385, 2529.8649955440183, 0.0, 80.83591836734693, 34751.04929171269);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 5, 36056.20571593482, 2120.966565233629, 0.49, 23.38530612244898, 31746.128794490905);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 10, 35600.01174297381, 2017.6264499032152, 0.5, 10.28734693877551, 31628.71049880187);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 11, 38424.2594327183, 2385.0164424986656, 0.51, 39.46204081632653, 33912.33167895023);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 15, 36418.15914210926, 2060.416521593312, 1.09, 47.794285714285714, 31825.81171383157);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 20, 36001.950341491145, 1667.1086652121478, 1.35, 43.199183673469385, 31260.485900714673);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 21, 37416.153262455024, 1930.7858922975818, 1.2666666666666666, 48.75020408163265, 31300.876875339178);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 25, 35761.66265138766, 1563.4705499072716, 1.2666666666666666, 47.20979591836735, 31300.876875339178);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 30, 35009.2807409956, 1583.7382215416915, 1.2666666666666666, 42.835102040816324, 31300.876875339178);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 31, 36902.99865219956, 2141.345604687619, 1.5366666666666666, 46.16244897959184, 32657.915355014175);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 35, 35635.72662978562, 1989.91636794427, 1.62, 43.38367346938775, 31983.594124035237);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 40, 35716.40840527573, 1844.7012186340698, 1.6466666666666667, 40.99918367346939, 30732.21602318318);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 41, 36909.11466777606, 2349.31654874449, 1.68, 46.81224489795918, 30938.728447470465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 45, 36507.166114148575, 2502.7078857997044, 1.68, 44.72489795918367, 30938.728447470465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 36176.16469921547, 3123.7077457245596, 1.68, 40.74530612244898, 30938.728447470465);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 51, 36371.27731680969, 1643.1282686112042, 1.85, 41.646530612244895, 31818.13751483136);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 55, 36183.391765907974, 1895.8213295043715, 1.85, 40.64244897959183, 31818.13751483136);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 60, 35696.949705000385, 1535.6361128503418, 1.85, 42.20326530612245, 31818.13751483136);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 61, 35922.220092657815, 1920.3258344287242, 1.85, 40.879183673469385, 31414.582495253544);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 65, 35301.614436975804, 1816.8281604373828, 1.87, 39.67673469387755, 30351.30588495528);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 70, 35220.28688650451, 1752.954282326033, 1.87, 39.38938775510204, 30351.30588495528);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 71, 36661.745395026264, 1934.3660105852073, 1.9, 43.6995918367347, 30648.696410544064);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 75, 36255.43918120171, 1722.2340307709885, 1.9, 45.57551020408163, 30648.696410544064);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 80, 36472.13437159163, 1793.825996113267, 1.9, 44.61469387755102, 30648.696410544064);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 81, 36062.370492559014, 1894.5906817980945, 1.9433333333333334, 42.03265306122449, 30848.307110405713);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 85, 36376.473121765885, 2108.9220139956233, 1.9433333333333334, 42.559183673469384, 30848.307110405713);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 90, 35558.31393122325, 1867.829610398954, 1.9433333333333334, 39.93224489795919, 30848.307110405713);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 91, 36392.748383210026, 1735.2325119340146, 1.9333333333333333, 40.12408163265306, 31325.115839734874);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 95, 36148.61052551569, 1457.52884702847, 1.9333333333333333, 39.61632653061225, 31325.115839734874);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 36036.957887370845, 1424.748351862259, 1.9466666666666668, 36.74204081632653, 31325.115839734874);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 36512.08361167194, 2747.598288697098, 1.9766666666666666, 39.38040816326531, 30833.85366435555);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 105, 35857.13980988853, 2504.399515461126, 1.9766666666666666, 37.92408163265306, 30833.85366435555);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 110, 35177.52991341717, 2259.515356015493, 1.98, 38.6204081632653, 30331.995459843336);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 111, 36096.40107255137, 1972.4262493162514, 1.96, 41.52979591836735, 30902.206353284975);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 115, 37087.692080392095, 1820.9478239816938, 1.96, 43.46367346938776, 30902.206353284975);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 120, 36958.446296174225, 1768.9152739936299, 1.96, 41.8865306122449, 30902.206353284975);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 121, 36479.33906366837, 1941.6000389163632, 1.9233333333333333, 40.39265306122449, 30895.575779106694);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 125, 35917.106042195664, 2040.6067951310063, 1.9233333333333333, 38.47020408163265, 30895.575779106694);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 130, 35866.54822304458, 2145.0227432490856, 1.9233333333333333, 36.8465306122449, 30895.575779106694);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 131, 37703.37068149562, 1740.9172439062659, 1.9333333333333333, 41.1069387755102, 33683.82201872683);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 135, 37154.41447154302, 1644.7948828025424, 1.9666666666666666, 43.14693877551021, 32780.52506937011);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 140, 36856.88179011091, 1591.8269576816822, 1.9866666666666666, 41.02857142857143, 32318.984499799484);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 141, 36915.74127162639, 1741.8253426987649, 1.9666666666666666, 42.347755102040814, 31764.18299026009);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 145, 36814.97698803022, 1883.3562605165662, 1.9666666666666666, 41.91591836734694, 31764.18299026009);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 36347.35877069107, 2244.5311298740885, 1.9666666666666666, 38.73142857142857, 31764.18299026009);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 151, 37658.20397485873, 1727.075711089355, 1.9733333333333334, 42.45224489795918, 31100.02244741867);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 155, 37096.16338618889, 1693.8258429976083, 1.9733333333333334, 39.015510204081636, 31100.02244741867);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 160, 36968.77760546584, 2082.7826193707197, 1.9733333333333334, 39.241632653061224, 31100.02244741867);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 161, 36180.0343877414, 1959.1623830696449, 1.9633333333333334, 40.29877551020408, 32020.54659702238);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 165, 35887.94885051466, 2001.3624494174092, 1.99, 39.838367346938774, 31021.704389461687);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 170, 35845.847840556366, 1662.2460690224304, 1.99, 38.99755102040816, 31021.704389461687);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 171, 36481.279472943075, 1921.222738279707, 1.9366666666666668, 36.14938775510204, 31906.32289574608);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 175, 36798.59121283126, 1733.0392240018364, 1.95, 39.519183673469385, 31247.85290044557);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 180, 35755.093004893766, 1832.7465154782506, 1.95, 36.712653061224486, 31247.85290044557);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 181, 35428.58238166482, 1701.7112672231667, 2.0, 36.93224489795919, 31655.984084634325);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 185, 35713.6674398383, 2141.343318145607, 1.9933333333333334, 36.79673469387755, 30894.8201783167);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 190, 35368.47738302329, 2280.22995434944, 1.9733333333333334, 34.32081632653061, 30777.438111312007);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 191, 37081.38207301558, 1296.540157149331, 1.92, 39.2930612244898, 34138.3036912293);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 195, 36241.469864258135, 1820.5094373749341, 1.9566666666666668, 38.22204081632653, 31778.237469508946);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 36883.983863537804, 2081.823911192714, 1.9033333333333333, 37.626938775510204, 31778.237469508946);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 36128.58329302726, 1989.867794469264, 1.9033333333333333, 36.950204081632656, 30356.627919889146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 205, 35973.71012828102, 1848.5503732333875, 1.9033333333333333, 37.66448979591837, 30356.627919889146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 210, 35550.77921147289, 1948.1919551262333, 1.9033333333333333, 37.86775510204082, 30356.627919889146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 211, 36851.27489614957, 1610.1218260391254, 1.9233333333333333, 41.458775510204084, 32516.773219630744);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 215, 36892.31193460713, 1851.2189073157929, 1.9566666666666668, 39.95918367346939, 32306.425628557812);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 220, 36327.964439499076, 1447.9771650309801, 1.9566666666666668, 39.120816326530615, 32306.425628557812);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 221, 37327.962426587466, 2325.475391781009, 1.93, 36.18448979591837, 32075.15886746921);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 225, 36690.32725132344, 1705.0437024033922, 1.93, 36.52, 32075.15886746921);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 230, 36685.710236255014, 2210.6506353346285, 1.9533333333333334, 34.9730612244898, 31489.823534051444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 231, 35998.4162070592, 2213.7620185410137, 1.9033333333333333, 34.412244897959184, 31877.7355168654);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 235, 35373.62749895575, 1991.6140679001483, 1.89, 32.842448979591836, 30737.636183354032);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 240, 35382.31125973977, 2257.1850508550497, 1.89, 34.25551020408163, 30737.636183354032);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 241, 35404.92072878799, 1554.6192820910785, 1.8766666666666667, 34.60979591836735, 31815.314034713483);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 245, 36076.114315401115, 1600.7088363292942, 1.8766666666666667, 34.72081632653061, 31815.314034713483);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 35461.39302009553, 1752.9283303844552, 1.8466666666666667, 35.04081632653061, 31643.10921412006);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 251, 35313.14799184292, 1386.1200370859221, 1.8566666666666667, 35.21632653061224, 31842.39822181074);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 255, 34926.03253392512, 1873.0593008818162, 1.84, 29.562448979591835, 31189.212271489272);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 260, 35248.31568540693, 1408.0020418945412, 1.84, 32.114285714285714, 31189.212271489272);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 261, 34758.96400935711, 1631.979689132123, 1.82, 31.791836734693877, 31797.85209646478);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 265, 35259.99518497838, 1569.4015307909272, 1.8133333333333332, 31.1934693877551, 30516.406869615064);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 270, 34476.34044514692, 1665.8162150177754, 1.7833333333333334, 29.041632653061225, 30505.406869615064);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 271, 34439.031977042534, 1341.99110830813, 1.7833333333333334, 28.913469387755104, 30898.665184214427);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 275, 34919.79932292693, 1639.8543947961377, 1.7833333333333334, 29.70530612244898, 30898.665184214427);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 280, 34034.63294487808, 1768.8023016785467, 1.7833333333333334, 28.572244897959184, 30898.665184214427);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 281, 34538.19982845233, 1672.6932357495837, 1.7666666666666666, 30.525714285714287, 31387.73091638477);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 285, 34585.012041491966, 2134.2355328646568, 1.7333333333333334, 27.859591836734694, 30927.73091638477);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 290, 34568.92515491797, 2084.247004944839, 1.7333333333333334, 27.002448979591836, 30927.73091638477);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 291, 34452.48337957101, 1661.773563943626, 1.72, 30.22204081632653, 30890.232274454163);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 295, 34182.83698285259, 1806.6668038028395, 1.7133333333333334, 27.921632653061224, 30783.932228724883);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 34186.00199890553, 1808.567878971933, 1.6766666666666667, 28.273469387755103, 30346.3610669143);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 35244.709591886865, 1531.54518461177, 1.6933333333333334, 32.12979591836735, 32394.13012085647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 305, 34827.583878883466, 1751.1339164662234, 1.7033333333333334, 30.853877551020407, 30833.102015950266);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 310, 34197.76695438485, 1690.8070013904025, 1.7033333333333334, 29.555918367346937, 30833.102015950266);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 311, 34195.17656670584, 2377.7905986987885, 1.6633333333333333, 27.22530612244898, 31231.578024437527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 315, 33773.44581263657, 1805.7570537383158, 1.66, 27.52408163265306, 31065.483798302164);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 320, 33874.81700662029, 1633.2549500039522, 1.65, 27.04326530612245, 31040.578024437527);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 321, 33281.86837968932, 1592.7457714742432, 1.6233333333333333, 25.56326530612245, 30116.296009649373);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 325, 33170.144842642716, 1779.0960577814221, 1.6233333333333333, 24.169795918367345, 30116.296009649373);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 330, 33595.46169698638, 1734.9968658167902, 1.6233333333333333, 24.958367346938775, 30116.296009649373);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 331, 34581.65683247741, 1765.722539978849, 1.5533333333333332, 29.08, 30950.525820321163);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 335, 34486.647792979864, 2053.337852360924, 1.56, 28.653061224489797, 30516.81971782654);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 340, 34471.782569475705, 1852.845420132262, 1.56, 29.356734693877552, 30516.81971782654);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 341, 34233.92628695778, 1488.1270384693821, 1.57, 26.698775510204083, 31621.463689951637);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 345, 34243.47479040192, 1093.6381680738293, 1.55, 26.779591836734692, 30551.660710025066);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 34212.191372495, 1358.666318871855, 1.55, 25.69142857142857, 30551.660710025066);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 351, 34561.05949655458, 1864.5093875464138, 1.5633333333333332, 27.73795918367347, 30915.00692732993);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 355, 34032.35980695863, 1741.3103349307537, 1.5633333333333332, 25.996734693877553, 30915.00692732993);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 360, 34444.03070571334, 1613.7724604732196, 1.5466666666666666, 26.060408163265308, 30765.00692732993);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 361, 34794.305549490375, 2070.060853540731, 1.53, 25.395102040816326, 30585.165943702388);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 365, 34355.94699937475, 1775.403172400336, 1.53, 25.080816326530613, 30585.165943702388);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 370, 34594.01398195448, 1735.1343409475621, 1.53, 24.20408163265306, 30585.165943702388);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 371, 34793.06882540414, 1660.03203005172, 1.4833333333333334, 29.517551020408163, 31833.05312451131);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 375, 34391.25449825981, 1559.0077453493943, 1.5066666666666666, 27.95673469387755, 30669.99870738321);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 380, 34287.33543371641, 1291.7176221725454, 1.5066666666666666, 27.408979591836733, 30669.99870738321);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 381, 35457.42958781992, 1467.7641140862404, 1.4766666666666666, 30.218775510204082, 30868.432414675248);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 385, 35238.36156721984, 1358.093908940072, 1.4766666666666666, 28.284081632653063, 30868.432414675248);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 390, 35462.7448953629, 1082.2889419870844, 1.4766666666666666, 29.68, 30868.432414675248);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 391, 33891.45472650379, 1986.3595476346118, 1.5033333333333334, 26.782857142857143, 30167.10613538303);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 395, 34040.30116181084, 1977.4513935043608, 1.5033333333333334, 25.554285714285715, 30167.10613538303);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 34033.14089899449, 2394.0153359551236, 1.45, 25.505306122448978, 30167.10613538303);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 34346.59474961869, 1847.008433109811, 1.4566666666666668, 21.67265306122449, 30893.732885178873);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 405, 33851.934355227066, 1647.8499538298865, 1.4566666666666668, 21.57061224489796, 30358.18756741024);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 410, 34403.213464037006, 1882.1937670218867, 1.4566666666666668, 22.313469387755102, 30358.18756741024);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 411, 34451.37169739746, 1646.3527680085172, 1.4133333333333333, 19.930612244897958, 31315.82577517301);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 415, 34106.2119662699, 1828.016424753384, 1.4033333333333333, 20.307755102040815, 29971.987320772765);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 420, 33879.64087375706, 1630.441687170737, 1.4033333333333333, 18.515918367346938, 29971.987320772765);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 421, 34571.8136048439, 1550.0362693407933, 1.3866666666666667, 18.573061224489795, 30952.982371456226);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 425, 34587.205371537595, 1210.9506484277401, 1.3866666666666667, 20.720816326530613, 30952.982371456226);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 430, 34806.54947494474, 2115.050090104601, 1.39, 19.017142857142858, 30778.626513372223);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 431, 33483.47935264305, 1900.6529144529804, 1.3866666666666667, 20.95265306122449, 30486.65017925398);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 435, 34075.19681101294, 2087.4207505137033, 1.3866666666666667, 22.558367346938777, 30486.65017925398);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 440, 33582.72398266383, 2005.2177990375517, 1.3866666666666667, 20.34857142857143, 30486.65017925398);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 441, 33656.27200530909, 1848.8632220195059, 1.3866666666666667, 23.24, 30638.75909989363);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 445, 32775.29587355558, 1585.5302091658455, 1.3966666666666667, 22.853061224489796, 30050.55442498321);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 33469.71672513659, 2167.840295044907, 1.3966666666666667, 21.106938775510205, 30050.55442498321);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 451, 33711.57350583778, 1669.5826213237328, 1.3166666666666667, 22.708571428571428, 30496.037693330178);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 455, 33643.22728950642, 1879.0521614515765, 1.3166666666666667, 21.36408163265306, 30496.037693330178);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 460, 34645.63571326771, 2438.0720276991565, 1.3166666666666667, 22.22122448979592, 30496.037693330178);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 461, 34364.153073082554, 2089.065299714099, 1.33, 19.301224489795917, 30605.324916418693);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 465, 33133.9255391395, 1959.2254092283463, 1.3333333333333333, 20.22122448979592, 29687.609916030488);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 470, 33849.654270419625, 1975.1955579828943, 1.3333333333333333, 19.25795918367347, 29687.609916030488);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 471, 34945.418692895764, 1609.4179464850702, 1.2966666666666666, 19.139591836734695, 30951.25857285231);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 475, 34430.12084531138, 1623.5955975460627, 1.3133333333333332, 18.871020408163265, 30561.35789328881);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 480, 34744.07973824331, 1775.3749364598716, 1.3133333333333332, 19.877551020408163, 30561.35789328881);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 481, 34259.1414338998, 2150.5773711306206, 1.27, 19.742857142857144, 30329.25992845983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 485, 35040.84502618732, 2097.782707611816, 1.27, 22.703673469387756, 30329.25992845983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 490, 34516.80127046637, 2472.990731792574, 1.27, 20.566530612244897, 30329.25992845983);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 491, 33587.852281658335, 1866.258544486044, 1.2333333333333334, 20.620408163265306, 30694.052319416307);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 495, 33940.94552633538, 1944.0449471517593, 1.24, 21.943673469387754, 30205.78677237942);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 33979.5254720522, 1655.1241355790905, 1.25, 20.284897959183674, 30205.78677237942);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 34576.00711209268, 2330.186564182264, 1.2466666666666666, 19.485714285714284, 30866.20237679333);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 505, 34457.240693358945, 2429.05623543496, 1.2466666666666666, 20.335510204081633, 30866.20237679333);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 510, 34420.2805686024, 2460.085398790481, 1.2366666666666666, 20.099591836734692, 30415.055762076456);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 511, 32886.95359822614, 1923.1232274751583, 1.24, 18.173061224489796, 30265.773951879233);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 515, 33037.735448340696, 2047.1913789090615, 1.2466666666666666, 14.358367346938776, 30025.335695808662);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 520, 33562.153590713286, 1981.1343345594955, 1.2466666666666666, 14.724897959183673, 30025.335695808662);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 521, 34644.211032548425, 1860.2936799243087, 1.2033333333333334, 24.68326530612245, 30460.26506897461);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 525, 34461.939415744455, 1617.723947316771, 1.2033333333333334, 23.408163265306122, 30460.26506897461);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 530, 34242.69961271246, 1346.8031207196584, 1.2033333333333334, 21.24734693877551, 30460.26506897461);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 531, 33954.24786756282, 1556.3966422264457, 1.1833333333333333, 18.3265306122449, 30283.805702285255);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 535, 34620.96541365149, 1744.4449112548102, 1.1833333333333333, 18.085714285714285, 30283.805702285255);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 540, 34564.443081981655, 1264.8993583826116, 1.18, 20.61469387755102, 29845.57085486373);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 541, 34046.840162229746, 1817.4944574824508, 1.17, 17.583673469387755, 30370.941569312054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 545, 33625.86822612796, 1729.3972863190252, 1.1766666666666667, 17.639183673469386, 29647.14620935585);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 33494.55047504378, 1878.2191458913476, 1.1766666666666667, 16.17795918367347, 29647.14620935585);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 551, 33822.02136544985, 1741.7226229851995, 1.1166666666666667, 18.5534693877551, 30264.82176964953);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 555, 34796.74785893163, 1828.6741052846123, 1.13, 18.08734693877551, 30041.46606278691);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 560, 33929.29861340565, 1909.3359056581012, 1.0766666666666667, 15.511020408163265, 29817.82176964953);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 561, 33915.71436073846, 2432.1133060029697, 1.0766666666666667, 15.800816326530612, 30512.32668875024);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 565, 35151.27599690753, 1826.7774769298262, 1.0766666666666667, 16.411428571428573, 30512.32668875024);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 570, 34276.12548653238, 2343.8948103391576, 1.0766666666666667, 15.26204081632653, 30512.32668875024);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 571, 33842.39470407444, 1846.9018890772925, 1.06, 13.437551020408163, 29995.92967735783);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 575, 33598.561030207544, 1717.9389194371897, 1.06, 13.100408163265307, 29911.92967735783);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 580, 33372.41524210419, 1846.487572240193, 1.06, 11.241632653061224, 29911.92967735783);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 581, 34987.5353794616, 1568.163594832104, 1.0066666666666666, 15.586122448979593, 29795.25869736772);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 585, 35128.08679195172, 1382.9455839324457, 1.0066666666666666, 16.644897959183673, 29795.25869736772);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 590, 33958.067721910906, 2167.053207173855, 1.0066666666666666, 14.896326530612244, 29795.25869736772);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 591, 33889.5748345025, 2364.087039848166, 1.0333333333333334, 15.786938775510205, 29775.040489939372);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 595, 33862.08757581303, 2472.428487317132, 1.0333333333333334, 15.548571428571428, 29775.040489939372);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 33389.796489975844, 2383.150940932221, 1.0166666666666666, 13.986938775510204, 29775.040489939372);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 34525.10226611673, 1867.0284648006907, 1.04, 17.129795918367346, 30301.229999223895);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 605, 34738.63528106773, 2182.0411830493567, 1.04, 15.178775510204082, 30301.229999223895);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 610, 34655.678170925836, 1524.23421372636, 1.04, 14.830204081632653, 30301.229999223895);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 611, 34243.01109910593, 1943.4421819124236, 1.02, 17.079183673469387, 30723.186553612675);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 615, 33581.104340943806, 1995.5181422637654, 1.0266666666666666, 14.10204081632653, 30357.186553612675);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 620, 33693.90043551896, 2105.21567044913, 1.0266666666666666, 14.266938775510203, 30357.186553612675);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 621, 33788.51946201234, 2749.2361908505527, 1.0066666666666666, 15.16734693877551, 30215.450448158645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 625, 33547.912514279335, 2259.300776380374, 1.0066666666666666, 15.346122448979592, 30215.450448158645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 630, 32947.11662729921, 2145.310993087511, 1.0066666666666666, 15.288979591836735, 30215.450448158645);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 631, 33484.12088917697, 1884.2503534798795, 0.9433333333333334, 13.910204081632653, 30318.31142531979);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 635, 33123.415715802585, 1951.2649479606025, 0.94, 12.998367346938776, 29859.045975208137);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 640, 32618.426641924572, 2067.8269852085928, 0.94, 11.100408163265307, 29859.045975208137);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 641, 33722.778000983584, 1625.7149545230466, 0.9433333333333334, 11.54204081632653, 30023.496147497346);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 645, 33312.013233607475, 1669.9747182202132, 0.9433333333333334, 11.008979591836734, 30023.496147497346);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 33761.438672304736, 1900.811998719145, 0.9433333333333334, 10.132244897959184, 30023.496147497346);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 651, 32898.40878998605, 1969.5714390488924, 0.9466666666666667, 9.958367346938775, 30232.0609136615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 655, 32197.878025200345, 1745.7327032250855, 0.9466666666666667, 7.671020408163265, 30232.0609136615);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 660, 32370.292268537512, 2232.865408282701, 0.9366666666666666, 8.288979591836735, 29691.7165467377);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 661, 32865.70567694273, 1955.0929961077825, 0.9333333333333333, 9.968163265306123, 29926.158194130447);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 665, 33073.53909753885, 1899.2153861274062, 0.9333333333333333, 10.322448979591837, 29926.158194130447);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 670, 33112.91548441882, 2111.726418420504, 0.9233333333333333, 9.395102040816326, 29705.560032892372);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 671, 32568.282533139005, 2240.320844000716, 0.9, 9.80326530612245, 29984.205330908455);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 675, 32128.160247630683, 1994.809030601281, 0.9, 9.04734693877551, 29984.205330908455);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 680, 32789.28101672582, 2375.889215545795, 0.9, 10.264489795918367, 29984.205330908455);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 681, 32616.436084510962, 1743.8907210751129, 0.89, 11.566530612244899, 29961.81781761873);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 685, 32598.831003668296, 1803.3081754068894, 0.8833333333333333, 9.88734693877551, 29924.81781761873);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 690, 32450.838589754054, 1813.3002905642081, 0.8833333333333333, 8.898775510204082, 29924.81781761873);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 691, 33502.5965872649, 2093.948038704789, 0.8833333333333333, 9.634285714285713, 29795.585961603145);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 695, 33575.17670738201, 2624.402631463945, 0.8833333333333333, 9.331428571428571, 29795.585961603145);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 33960.738779973624, 2941.2152420830466, 0.8633333333333333, 9.06938775510204, 29795.585961603145);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 31710.880400257487, 1769.2449128178657, 0.8466666666666667, 8.933877551020409, 29714.262888382862);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 705, 31788.427054097556, 1897.394050489248, 0.8466666666666667, 8.133877551020408, 29714.262888382862);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 710, 31321.047958482955, 1827.48801025422, 0.8466666666666667, 7.975510204081632, 29714.262888382862);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 711, 32496.63178704223, 1499.5545920212865, 0.85, 8.315102040816326, 30424.00398864314);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 715, 32132.35529247151, 1552.7461571547337, 0.8466666666666667, 7.16, 30405.92311969409);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 720, 31860.741702712126, 1520.8186099305708, 0.8466666666666667, 6.909387755102041, 30405.92311969409);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 721, 34115.25489876122, 1548.3340512151178, 0.83, 7.986938775510204, 29692.7165467377);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 725, 34533.90959106302, 1339.6348589207225, 0.83, 6.45469387755102, 29692.7165467377);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 730, 33791.96438398685, 1968.5243048053687, 0.83, 6.7706122448979595, 29692.7165467377);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 731, 31536.295945666454, 1498.7124727417142, 0.8133333333333334, 7.591836734693878, 30023.7165467377);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 735, 31816.158925971282, 1547.2451201267545, 0.8133333333333334, 7.319183673469388, 30023.7165467377);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 740, 31899.573722591507, 1473.3540505739477, 0.7933333333333333, 7.580408163265306, 29857.15986265531);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 741, 32714.488791375697, 1335.2277212582467, 0.7833333333333333, 8.809795918367348, 30034.010269130555);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 745, 32391.68523870088, 1481.643296516103, 0.7833333333333333, 8.773061224489796, 30034.010269130555);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 32399.253260591016, 1514.679855298802, 0.7833333333333333, 8.611428571428572, 29893.952842730174);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 751, 31755.83674404003, 1645.4266998837857, 0.7833333333333333, 4.868571428571428, 29751.305719996715);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 755, 31773.086430501415, 1566.7168200214223, 0.78, 5.029387755102041, 29717.355663509432);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 760, 31760.922480321675, 1682.4803108612746, 0.78, 5.542040816326531, 29717.355663509432);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 761, 33593.32065369238, 862.5075542293129, 0.7733333333333333, 8.281632653061225, 29936.744128814444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 765, 32926.25177170178, 1180.1831539457883, 0.7733333333333333, 8.556734693877551, 29936.744128814444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 770, 32825.23439092665, 1402.254635787368, 0.7733333333333333, 7.308571428571429, 29936.744128814444);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 771, 31317.382189292806, 1421.5955942523078, 0.7766666666666666, 5.978775510204081, 30017.756058140123);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 775, 31450.935175052524, 1459.1825905812007, 0.7766666666666666, 6.298775510204082, 29605.986334127647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 780, 30994.66925823547, 1332.6631751183386, 0.7766666666666666, 5.541224489795918, 29605.986334127647);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 781, 31536.78216641887, 2389.901715411358, 0.7766666666666666, 6.357551020408163, 29790.10332437251);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 785, 31209.31902001901, 1967.5563890311262, 0.7766666666666666, 5.515918367346939, 29790.10332437251);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 790, 31071.017178642276, 2250.0505928228417, 0.7766666666666666, 4.321632653061225, 29790.10332437251);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 791, 31947.200152107325, 1577.2546010307576, 0.7366666666666667, 6.977142857142857, 30300.631961248433);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 795, 32584.996495132902, 1440.213258610048, 0.7366666666666667, 8.140408163265306, 30300.631961248433);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 31905.272516688896, 1490.2100506246686, 0.7333333333333333, 6.762448979591837, 30300.631961248433);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 30832.36116089843, 1435.2452636638523, 0.7466666666666667, 5.090612244897959, 29845.28765875008);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 805, 30879.522484311703, 1507.4531747232868, 0.7466666666666667, 5.413877551020408, 29845.28765875008);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 810, 30474.79089567878, 1177.273720269041, 0.7466666666666667, 4.1053061224489795, 29845.28765875008);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 811, 32287.24267722917, 2427.0512700216523, 0.73, 6.3395918367346935, 29739.916571396887);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 815, 32329.298425719768, 2558.873901059942, 0.73, 6.551836734693878, 29739.916571396887);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 820, 32420.64643937268, 2132.119246418762, 0.73, 5.610612244897959, 29739.916571396887);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 821, 31044.616242021377, 1260.1383788782045, 0.7, 4.433469387755102, 30212.167257372173);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 825, 31140.742046076943, 1319.3708685113734, 0.7, 4.497959183673469, 30212.167257372173);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 830, 30864.274937925115, 1134.9599965336567, 0.7, 4.221224489795919, 30212.167257372173);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 831, 31821.616995170363, 1292.390820443859, 0.6833333333333333, 5.169795918367347, 29782.65637712512);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 835, 31261.71270966992, 1323.2812648972542, 0.6833333333333333, 5.311020408163265, 29782.65637712512);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 840, 31370.2507782865, 1469.1844003692934, 0.6833333333333333, 4.813061224489796, 29782.65637712512);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 841, 30566.524170694327, 1308.1014193742994, 0.6833333333333333, 2.537959183673469, 29740.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 845, 30571.066260551757, 1298.2049408453902, 0.6833333333333333, 2.5085714285714285, 29740.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 30559.749768919926, 1242.8765100213086, 0.6833333333333333, 2.5714285714285716, 29740.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 851, 31204.76855419947, 1020.7818961955426, 0.68, 3.466938775510204, 30148.053982623853);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 855, 31230.14664024675, 1047.0849115543222, 0.69, 4.182857142857143, 29929.227291419247);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 860, 31298.164885413033, 1131.6074234463033, 0.69, 3.9118367346938774, 29929.227291419247);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 861, 30108.248474184933, 596.9708118320258, 0.68, 2.8146938775510204, 29699.585368322067);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 865, 30088.83563007792, 654.5690922360004, 0.68, 2.230204081632653, 29699.585368322067);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 870, 30171.75166399858, 764.3578852128165, 0.68, 2.890612244897959, 29699.585368322067);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 871, 30758.299184724, 1344.9691747283578, 0.67, 3.0310204081632652, 29767.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 875, 30317.51402039279, 1004.948205840386, 0.67, 2.097142857142857, 29767.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 880, 30442.60775819893, 1106.8007369002344, 0.67, 1.926530612244898, 29767.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 881, 30974.341463088378, 1382.380877836083, 0.6633333333333333, 3.453061224489796, 29838.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 885, 31088.692893652777, 1549.9960929957035, 0.6633333333333333, 3.950204081632653, 29838.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 890, 30948.773135418538, 1557.1886166417269, 0.6633333333333333, 4.0620408163265305, 29838.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 891, 31422.43746075239, 1060.5330022175638, 0.6766666666666666, 3.5787755102040815, 30313.297968607876);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 895, 31449.14820866273, 1158.5616600929914, 0.6766666666666666, 3.393469387755102, 30313.297968607876);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 31395.656557011545, 1108.514517809001, 0.68, 3.229387755102041, 30202.297968607876);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 30036.48384400076, 678.4035966148573, 0.6833333333333333, 1.9085714285714286, 29609.99266527601);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 905, 30025.063543674136, 649.5174892120052, 0.6833333333333333, 1.373061224489796, 29609.99266527601);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 910, 30016.451047102106, 831.746462017918, 0.6833333333333333, 1.5281632653061223, 29609.99266527601);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 911, 31374.18925355764, 723.3885715934204, 0.66, 4.66530612244898, 29768.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 915, 30804.318116936272, 642.1345526908209, 0.66, 3.075918367346939, 29768.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 920, 30480.5765948283, 638.7780120113525, 0.66, 2.2914285714285714, 29768.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 921, 30049.334824916157, 582.5314344547021, 0.6466666666666666, 1.4914285714285713, 29848.96104111092);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 925, 29897.85741465657, 156.78720671675717, 0.6466666666666666, 1.3428571428571427, 29848.96104111092);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 930, 29950.255108435384, 372.16456269722596, 0.6466666666666666, 1.0122448979591836, 29848.96104111092);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 931, 29998.629662009876, 366.4139044683689, 0.6666666666666666, 1.1591836734693877, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 935, 30139.72966200988, 577.4721553495735, 0.6666666666666666, 2.1714285714285713, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 940, 29972.509662009878, 335.5673502154405, 0.6666666666666666, 1.3093877551020408, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 941, 29908.70966200988, 422.14023397783035, 0.6433333333333333, 1.1028571428571428, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 945, 29979.469662009877, 490.0139123389398, 0.6433333333333333, 1.5861224489795918, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 30044.529662009878, 539.8613053179416, 0.6433333333333333, 1.9706122448979593, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 951, 30029.789662009876, 552.7343532892837, 0.63, 1.7959183673469388, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 955, 29942.509662009878, 351.8075447903704, 0.63, 1.1689795918367347, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 960, 29900.10966200988, 278.6330217621855, 0.63, 1.066938775510204, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 961, 30137.556111274767, 150.5425259961937, 0.6133333333333333, 0.49142857142857144, 29768.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 965, 30103.196441575707, 179.7233880992502, 0.6133333333333333, 0.7004081632653061, 29768.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 970, 30108.09723331658, 530.2731270979222, 0.6133333333333333, 1.1608163265306122, 29768.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 971, 29882.129662009876, 367.93385663342104, 0.6, 1.249795918367347, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 975, 29783.88966200988, 181.72644276494265, 0.6, 0.12, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 980, 29809.58966200988, 254.36403288297225, 0.6, 0.23510204081632652, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 981, 30163.349828668168, 2.204948129406426E-11, 0.6, 0.0, 30163.349828668146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 985, 30163.349828668168, 2.204948129406426E-11, 0.6, 0.0, 30163.349828668146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 990, 30163.349828668168, 2.204948129406426E-11, 0.6, 0.0, 30163.349828668146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 991, 29758.189662009878, 1.837456774505355E-11, 0.5933333333333334, 0.0, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 995, 29758.189662009878, 1.837456774505355E-11, 0.5933333333333334, 0.0, 29758.18966200986);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 29758.189662009878, 1.837456774505355E-11, 0.59, 0.0, 29758.18966200986);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 46, 112, 71, 9, 83, 98, 110, 101, 103, 37, 23, 17, 78, 52, 133, 105, 89, 48, 18, 74, 7, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 130, 92, 27, 104, 141, 57, 107, 66, 147, 137, 132, 88, 30, 79, 121, 41, 138, 55, 118, 142, 96, 117, 3, 64, 65, 25, 123, 128, 69, 21, 93, 15, 87, 136, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 16, 14, 10, 31, 108, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 119, 114, 45, 28, 131, 111, 145, 146, 38, 100, 120, 29, 106, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 102, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 2, 127, 135, 42, 122, 33, 148, 82, 54, 11, 26, 85, 19, 56, 116, 134, 139, 6, 8, 144, 86, 124, 50, 60, 24, 80, 62, 46, 112, 71, 9, 83, 17, 78, 133, 52, 105, 89, 5, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 141, 147, 132, 137, 88, 30, 79, 121, 41, 7, 91, 48, 5, 62, 112, 71, 83, 9, 89, 105, 133, 52, 18, 74, 96, 138, 55, 142, 118, 3, 64, 117, 123, 25, 128, 65, 69, 21, 15, 93, 87, 136, 78, 17, 23, 37, 103, 110, 101, 98, 35, 126, 20, 73, 58, 140, 16, 14, 10, 31, 108, 97, 44, 46, 90, 22, 109, 76, 59, 61, 149, 85, 19, 56, 8, 6, 116, 11, 26, 34, 119, 114, 122, 42, 135, 127, 2, 45, 28, 131, 111, 33, 54, 82, 148, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 29, 120, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 47, 99, 70, 40, 13, 134, 57, 107, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 141, 147, 132, 137, 88, 41, 121, 30, 79, 138, 55, 142, 118, 96, 18, 105, 89, 48, 5, 62, 112, 71, 9, 83, 17, 23, 37, 103, 101, 98, 110, 35, 126, 58, 140, 73, 20, 16, 14, 10, 31, 108, 90, 44, 22, 97, 109, 76, 59, 61, 149, 85, 26, 11, 116, 6, 8, 56, 86, 144, 50, 124, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 33, 54, 82, 148, 114, 119, 122, 42, 135, 127, 34, 19, 139, 134, 57, 107, 46, 78, 136, 133, 52, 87, 93, 15, 21, 69, 65, 128, 25, 123, 117, 64, 3, 74, 7, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 41, 121, 7, 91, 129, 48, 5, 62, 112, 71, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 136, 78, 105, 89, 9, 83, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 34, 26, 85, 149, 19, 56, 6, 8, 116, 82, 54, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 111, 131, 28, 45, 2, 13, 70, 40, 99, 47, 135, 127, 42, 122, 114, 119, 148, 11, 57, 107, 141, 88, 30, 79, 138, 55, 142, 118, 96, 3, 64, 117, 123, 25, 128, 65, 69, 15, 87, 21, 93, 52, 133, 18, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 30, 79, 121, 41, 138, 55, 142, 118, 96, 74, 18, 117, 123, 25, 128, 65, 64, 3, 69, 21, 15, 93, 87, 52, 133, 136, 78, 105, 89, 48, 5, 62, 112, 71, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 83, 9, 46, 108, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 34, 19, 56, 8, 6, 116, 11, 54, 82, 148, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 135, 127, 42, 122, 114, 119, 44, 31, 10, 14, 16, 91, 7, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 30, 79, 121, 41, 138, 7, 91, 129, 141, 57, 107, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 111, 131, 28, 45, 2, 13, 70, 40, 99, 47, 135, 127, 42, 122, 114, 119, 148, 82, 54, 33, 134, 139, 116, 6, 8, 56, 86, 144, 50, 124, 11, 26, 85, 149, 34, 19, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 46, 112, 71, 20, 73, 140, 58, 126, 35, 83, 9, 89, 5, 48, 62, 74, 96, 55, 142, 118, 3, 64, 117, 123, 25, 128, 65, 69, 15, 21, 93, 87, 136, 78, 17, 23, 37, 103, 110, 101, 98, 105, 133, 52, 18, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 91, 7, 138, 55, 142, 118, 96, 74, 18, 3, 65, 128, 25, 123, 117, 64, 69, 87, 93, 21, 15, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 48, 5, 62, 112, 46, 90, 97, 22, 44, 108, 31, 10, 14, 16, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 116, 8, 6, 56, 54, 82, 148, 119, 114, 122, 42, 135, 127, 2, 13, 70, 40, 99, 47, 131, 111, 28, 45, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 113, 143, 43, 49, 72, 84, 67, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 1, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 7, 138, 55, 142, 118, 96, 74, 18, 3, 64, 117, 123, 25, 128, 65, 69, 21, 93, 87, 15, 52, 133, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 105, 89, 48, 5, 91, 129, 141, 107, 57, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 135, 127, 42, 122, 114, 119, 148, 82, 54, 33, 134, 139, 144, 86, 124, 50, 56, 8, 6, 116, 11, 19, 149, 85, 26, 34, 61, 59, 76, 109, 22, 97, 90, 44, 31, 10, 14, 16, 108, 46, 112, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 18, 52, 133, 78, 105, 89, 48, 5, 62, 112, 9, 83, 71, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 136, 87, 93, 21, 15, 69, 65, 128, 25, 123, 117, 64, 3, 118, 142, 138, 7, 91, 46, 108, 31, 10, 14, 16, 44, 97, 90, 22, 109, 76, 59, 61, 149, 85, 26, 11, 19, 56, 8, 6, 116, 82, 54, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 135, 127, 42, 122, 114, 119, 148, 34, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 18, 52, 133, 136, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 71, 20, 73, 140, 58, 126, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 34, 19, 56, 6, 8, 116, 82, 54, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 135, 127, 42, 122, 114, 119, 148, 11, 57, 107, 141, 129, 62, 5, 48, 89, 105, 78, 93, 87, 15, 21, 69, 117, 123, 25, 128, 65, 64, 3, 118, 142, 138, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 123, 25, 128, 65, 64, 3, 18, 52, 133, 78, 136, 87, 15, 21, 69, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 105, 89, 5, 48, 62, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 54, 82, 148, 119, 114, 122, 42, 135, 127, 2, 45, 28, 131, 111, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 68, 24, 80, 60, 124, 50, 86, 144, 56, 8, 6, 116, 134, 139, 33, 19, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 123, 25, 128, 65, 64, 3, 18, 105, 133, 52, 15, 87, 21, 69, 93, 136, 78, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 31, 10, 14, 16, 44, 90, 22, 97, 109, 76, 59, 61, 149, 19, 56, 8, 6, 116, 82, 54, 148, 11, 26, 85, 34, 119, 114, 122, 42, 135, 127, 2, 45, 28, 131, 111, 100, 38, 95, 77, 51, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 84, 67, 106, 120, 29, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 123, 25, 128, 65, 3, 64, 69, 21, 15, 87, 93, 136, 78, 105, 89, 5, 48, 62, 112, 71, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 83, 9, 52, 133, 18, 129, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 59, 61, 149, 85, 26, 34, 19, 11, 54, 82, 148, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 113, 143, 43, 49, 115, 146, 102, 145, 32, 12, 75, 94, 125, 81, 1, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 135, 127, 42, 122, 114, 119, 8, 6, 116, 56, 76, 109, 57, 107, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 123, 25, 128, 65, 64, 3, 18, 52, 133, 78, 105, 89, 48, 5, 62, 9, 83, 93, 21, 69, 15, 87, 136, 17, 23, 37, 110, 103, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 11, 19, 56, 8, 116, 6, 148, 82, 54, 33, 45, 2, 13, 135, 127, 42, 122, 119, 114, 34, 86, 144, 50, 124, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 36, 4, 95, 77, 51, 47, 99, 70, 40, 131, 28, 111, 134, 139, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 65, 64, 3, 18, 52, 133, 105, 78, 136, 87, 15, 69, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 83, 9, 89, 48, 5, 62, 112, 71, 20, 73, 126, 58, 140, 16, 14, 10, 90, 97, 22, 44, 31, 108, 46, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 148, 54, 82, 116, 8, 6, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 111, 131, 28, 45, 2, 42, 122, 119, 114, 127, 135, 13, 70, 40, 99, 47, 33, 134, 139, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 65, 64, 3, 18, 89, 105, 78, 136, 133, 52, 87, 15, 69, 21, 93, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 112, 62, 48, 5, 129, 141, 107, 57, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 134, 139, 144, 86, 124, 50, 56, 8, 6, 116, 82, 54, 148, 114, 119, 122, 42, 135, 127, 2, 45, 28, 131, 111, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 29, 120, 106, 13, 70, 40, 99, 47, 33, 19, 85, 26, 11, 34, 149, 61, 59, 76, 109, 22, 44, 90, 97, 108, 31, 10, 14, 16, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 65, 64, 3, 18, 52, 133, 83, 9, 16, 14, 10, 44, 22, 97, 90, 31, 108, 46, 112, 71, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 69, 93, 21, 15, 87, 136, 78, 105, 89, 48, 5, 62, 129, 141, 107, 57, 60, 50, 124, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 42, 122, 127, 135, 45, 28, 131, 111, 134, 139, 144, 86, 8, 6, 116, 56, 19, 85, 26, 11, 148, 82, 54, 33, 114, 119, 34, 149, 61, 59, 76, 109, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 69, 21, 93, 15, 87, 136, 133, 52, 18, 105, 78, 17, 23, 37, 98, 101, 110, 103, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 22, 97, 76, 109, 61, 149, 34, 85, 19, 56, 6, 8, 116, 82, 54, 148, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 29, 120, 100, 38, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 135, 42, 127, 119, 114, 122, 11, 26, 59, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 15, 69, 21, 93, 87, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 62, 5, 48, 89, 18, 52, 133, 78, 105, 9, 83, 129, 141, 107, 57, 60, 24, 80, 134, 139, 144, 86, 124, 50, 56, 6, 8, 116, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 46, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 33, 54, 82, 148, 114, 119, 122, 42, 127, 106, 120, 29, 100, 38, 146, 84, 67, 72, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 87, 93, 17, 136, 78, 133, 52, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 83, 9, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 82, 33, 54, 148, 114, 119, 122, 127, 42, 45, 2, 135, 40, 70, 99, 47, 13, 28, 131, 111, 106, 120, 29, 100, 38, 51, 77, 95, 4, 36, 146, 102, 145, 32, 75, 12, 94, 125, 81, 115, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 50, 124, 86, 144, 139, 134, 116, 6, 8, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 89, 48, 5, 62, 71, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 136, 78, 83, 9, 112, 46, 10, 16, 14, 31, 108, 44, 90, 97, 22, 59, 61, 149, 85, 26, 11, 148, 82, 54, 33, 134, 139, 116, 6, 8, 56, 86, 144, 50, 124, 60, 24, 80, 68, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 36, 4, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 113, 143, 63, 39, 53, 1, 43, 146, 47, 99, 40, 70, 127, 2, 135, 13, 28, 131, 111, 45, 42, 122, 114, 119, 34, 19, 76, 109, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 136, 78, 105, 89, 48, 5, 62, 9, 83, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 46, 14, 16, 10, 31, 108, 90, 97, 44, 22, 59, 61, 149, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 127, 42, 2, 45, 111, 131, 28, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 47, 99, 70, 40, 13, 135, 33, 34, 109, 76, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 136, 78, 105, 89, 48, 5, 62, 112, 71, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 83, 9, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 148, 82, 54, 33, 134, 139, 144, 86, 8, 6, 116, 56, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 32, 75, 12, 94, 125, 81, 115, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 114, 119, 127, 42, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 110, 101, 98, 103, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 5, 48, 62, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 29, 120, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 72, 67, 84, 106, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 146, 47, 99, 70, 40, 13, 135, 127, 33, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 59, 76, 109, 61, 149, 34, 85, 26, 11, 148, 54, 82, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 124, 50, 86, 144, 56, 8, 6, 116, 19, 119, 114, 122, 42, 135, 13, 70, 40, 99, 47, 127, 134, 139, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 101, 110, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 5, 48, 62, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 59, 61, 149, 34, 85, 26, 11, 148, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 113, 143, 72, 49, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 42, 122, 114, 119, 127, 2, 45, 28, 131, 111, 29, 120, 100, 38, 146, 84, 67, 106, 56, 6, 8, 116, 19, 76, 109, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 31, 10, 14, 16, 44, 90, 22, 97, 109, 76, 59, 61, 149, 34, 26, 85, 19, 11, 148, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 135, 127, 42, 122, 114, 119, 116, 6, 8, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 59, 61, 149, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 72, 67, 84, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 146, 47, 99, 70, 40, 13, 33, 34, 109, 76, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 83, 126, 58, 140, 73, 20, 71, 112, 9, 89, 48, 62, 5, 141, 107, 57, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 4, 36, 95, 77, 51, 47, 99, 70, 40, 13, 2, 45, 28, 131, 111, 33, 82, 54, 148, 114, 119, 122, 42, 127, 135, 134, 139, 144, 86, 124, 50, 116, 6, 8, 56, 19, 11, 26, 85, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 16, 14, 44, 46, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 5, 48, 62, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 113, 143, 1, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 77, 51, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 111, 131, 28, 45, 2, 42, 127, 135, 40, 99, 70, 13, 47, 33, 82, 54, 148, 114, 119, 122, 76, 109, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 59, 61, 149, 34, 85, 26, 19, 56, 6, 8, 116, 82, 54, 148, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 119, 114, 11, 76, 109, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 9, 83, 89, 48, 5, 62, 112, 46, 108, 31, 10, 14, 16, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 8, 116, 6, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 119, 114, 148, 54, 82, 33, 134, 139, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 89, 48, 5, 62, 129, 141, 107, 57, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 77, 51, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 111, 131, 28, 45, 2, 13, 47, 99, 70, 40, 135, 127, 42, 122, 114, 119, 148, 54, 82, 33, 134, 139, 144, 86, 124, 50, 56, 8, 116, 6, 149, 34, 85, 26, 11, 19, 61, 59, 76, 109, 22, 97, 90, 108, 31, 10, 14, 16, 44, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 112, 9, 83, 89, 48, 5, 62, 129, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 148, 54, 82, 33, 134, 139, 86, 144, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 102, 145, 32, 12, 75, 94, 125, 81, 115, 111, 131, 45, 2, 42, 122, 114, 119, 127, 135, 13, 47, 99, 70, 40, 28, 116, 6, 8, 56, 19, 107, 57, 141, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 59, 61, 149, 34, 85, 19, 11, 26, 148, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 114, 119, 116, 6, 8, 56, 76, 109, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 46, 112, 10, 16, 14, 31, 44, 108, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 19, 11, 116, 6, 8, 56, 50, 124, 86, 144, 139, 134, 33, 82, 54, 148, 114, 119, 127, 42, 122, 111, 131, 28, 45, 2, 135, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 31, 10, 16, 14, 44, 108, 90, 97, 22, 59, 61, 149, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 148, 114, 119, 122, 45, 2, 42, 127, 135, 13, 131, 28, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 75, 32, 145, 102, 12, 36, 4, 95, 77, 51, 47, 99, 40, 70, 111, 33, 34, 109, 76, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 16, 14, 10, 31, 108, 44, 90, 97, 22, 76, 109, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 2, 45, 28, 131, 111, 29, 120, 106, 100, 38, 95, 77, 51, 4, 36, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 47, 99, 70, 40, 13, 135, 127, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 67, 84, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 31, 10, 16, 14, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 50, 124, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 10, 16, 14, 31, 44, 108, 90, 97, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 32, 75, 12, 94, 125, 81, 115, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 119, 114, 148, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 90, 97, 22, 44, 31, 10, 16, 14, 109, 76, 59, 61, 149, 34, 85, 26, 11, 19, 56, 6, 8, 116, 82, 54, 148, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 102, 145, 75, 32, 12, 94, 125, 81, 115, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 119, 114, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 90, 97, 22, 109, 76, 59, 61, 149, 85, 26, 11, 19, 56, 6, 8, 116, 144, 86, 124, 50, 34, 119, 114, 127, 42, 122, 33, 148, 54, 82, 139, 134, 111, 131, 28, 45, 2, 135, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 90, 97, 22, 76, 109, 59, 61, 149, 85, 11, 26, 34, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 33, 82, 54, 148, 116, 6, 8, 56, 19, 139, 134, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 50, 86, 144, 124, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 90, 97, 22, 59, 61, 149, 19, 56, 8, 6, 116, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 120, 29, 106, 111, 131, 28, 2, 42, 127, 135, 40, 70, 99, 47, 13, 45, 122, 114, 119, 148, 11, 26, 85, 34, 109, 76, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 11, 26, 85, 34, 114, 119, 42, 127, 122, 33, 82, 54, 148, 6, 116, 139, 134, 111, 131, 28, 45, 2, 135, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 144, 86, 8, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 34, 85, 26, 11, 6, 8, 116, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 80, 24, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 100, 38, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 29, 120, 106, 111, 131, 28, 45, 2, 135, 13, 47, 99, 70, 40, 127, 122, 42, 119, 114, 148, 19, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 85, 34, 26, 11, 19, 56, 6, 116, 8, 144, 86, 50, 124, 80, 24, 60, 107, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 33, 82, 54, 148, 114, 119, 122, 42, 127, 134, 139, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 85, 34, 26, 114, 119, 127, 2, 135, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 111, 131, 28, 45, 122, 42, 33, 82, 54, 148, 11, 19, 6, 56, 144, 86, 124, 50, 8, 116, 139, 134, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 34, 26, 11, 148, 54, 82, 116, 8, 6, 56, 19, 85, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 120, 29, 106, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 34, 85, 26, 19, 11, 56, 6, 8, 116, 82, 54, 148, 114, 119, 122, 42, 127, 135, 13, 131, 111, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 2, 45, 28, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 148, 54, 82, 33, 134, 139, 86, 144, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 131, 111, 28, 45, 2, 135, 127, 42, 122, 119, 114, 11, 6, 8, 56, 116, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 106, 29, 120, 100, 38, 146, 115, 81, 125, 94, 12, 32, 75, 145, 102, 36, 4, 95, 77, 51, 47, 70, 40, 99, 13, 28, 33, 134, 139, 116, 6, 8, 56, 144, 86, 124, 50, 60, 24, 80, 68, 143, 63, 39, 53, 1, 43, 113, 72, 67, 84, 49, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 148, 54, 82, 33, 134, 139, 86, 144, 50, 124, 60, 24, 80, 68, 39, 53, 63, 143, 1, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 114, 119, 116, 6, 8, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 50, 124, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 111, 106, 29, 120, 100, 38, 77, 51, 95, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 47, 99, 70, 40, 13, 131, 28, 45, 2, 135, 127, 42, 122, 114, 119, 148, 116, 6, 8, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 50, 124, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 75, 12, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 45, 28, 131, 111, 122, 42, 127, 114, 119, 148, 6, 8, 116, 56, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 113, 143, 72, 84, 67, 49, 43, 115, 146, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 38, 100, 29, 120, 106, 47, 99, 70, 40, 13, 131, 111, 28, 45, 2, 135, 127, 42, 122, 119, 114, 148, 116, 6, 8, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 124, 50, 60, 24, 80, 68, 63, 39, 53, 1, 143, 113, 43, 49, 72, 67, 84, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 131, 111, 28, 45, 2, 135, 127, 42, 122, 114, 119, 148, 6, 8, 116, 56, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 6, 8, 116, 148, 119, 114, 122, 42, 127, 135, 2, 45, 111, 131, 28, 13, 99, 40, 70, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 13, 131, 111, 28, 45, 2, 135, 40, 70, 99, 47, 51, 95, 77, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 113, 43, 143, 1, 53, 39, 63, 68, 80, 24, 60, 50, 124, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 127, 42, 45, 2, 135, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 75, 32, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 111, 131, 28, 84, 67, 49, 43, 113, 143, 1, 53, 39, 63, 72, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 111, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 131, 84, 67, 49, 72, 113, 143, 63, 39, 53, 1, 43, 60, 50, 124, 24, 80, 68, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 127, 42, 2, 45, 28, 111, 106, 120, 29, 100, 38, 146, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 51, 77, 95, 47, 99, 70, 40, 135, 13, 131, 84, 67, 49, 72, 113, 43, 143, 1, 53, 39, 63, 68, 80, 24, 60, 50, 124, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 111, 131, 13, 70, 99, 40, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 50, 124, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 131, 111, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 111, 131, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 63, 39, 53, 1, 68, 80, 24, 60, 50, 124, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 28, 111, 131, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 49, 72, 113, 143, 63, 39, 53, 1, 43, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 106, 29, 120, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 99, 70, 40, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 49, 72, 113, 43, 1, 143, 53, 39, 63, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 106, 120, 29, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 125, 81, 94, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 115, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 146, 38, 100, 120, 29, 106, 84, 67, 72, 113, 43, 49, 115, 1, 143, 63, 53, 39, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 146, 38, 100, 106, 29, 120, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 146, 115, 38, 100, 106, 29, 120, 84, 67, 72, 49, 113, 43, 143, 1, 53, 39, 63, 68, 80, 24, 50, 124, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 43, 113, 63, 39, 53, 1, 143, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 49, 72, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 120, 29, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 49, 72, 113, 43, 1, 143, 53, 39, 63, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 1, 143, 39, 53, 63, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 63, 39, 53, 1, 143, 43, 113, 68, 80, 24, 60, 124, 50, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 124, 50, 60, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 1, 143, 63, 53, 39, 68, 80, 24, 124, 50, 60, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 1, 113, 143, 53, 39, 63, 68, 24, 80, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 60, 124, 50, 57, 141, 107, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 53, 39, 63, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 50, 124, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 107, 57, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 130, 92, 27, 66, 104, 147, 137, 132, 88, 41, 30, 79, 121, 55, 96, 74, 91, 7, 138, 142, 118, 117, 25, 123, 128, 64, 3, 65, 18, 69, 21, 15, 93, 87, 52, 133, 105, 78, 136, 17, 23, 37, 103, 110, 101, 98, 35, 126, 58, 140, 73, 20, 71, 83, 9, 89, 48, 5, 62, 112, 46, 108, 10, 16, 14, 31, 44, 97, 90, 22, 109, 76, 59, 61, 149, 19, 85, 34, 26, 11, 54, 82, 33, 134, 139, 144, 86, 56, 8, 116, 6, 148, 119, 114, 122, 42, 127, 135, 2, 45, 131, 111, 28, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 146, 38, 100, 29, 120, 106, 84, 67, 72, 49, 43, 113, 143, 1, 63, 53, 39, 68, 80, 24, 124, 50, 60, 57, 107, 141, 129, 0]");
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA150_with_seed_1_mag_0_1_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA150));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.1, 100, 1.0, 5.0);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(28594.075375786146);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(28594.075375786146);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");

        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 40248.55777154385, 2529.8649955440183, 0.0, 80.83591836734693, 34751.04929171269);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 32144.512614506664, 2316.7302317542094, 0.5, 9.795102040816326, 29435.359963706673);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 31901.840979730696, 2379.565654875925, 0.5, 8.331428571428571, 29367.359963706673);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 36441.7477294724, 1862.8238714517627, 0.49333333333333335, 20.521632653061225, 30066.62976061759);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 33677.14488353399, 1399.6934192336903, 0.9633333333333334, 32.76489795918367, 29064.258310428886);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 32129.3822146765, 1809.8758020981863, 0.9866666666666667, 16.522448979591836, 29004.258310428886);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 34773.14926149944, 1492.2806791988212, 0.9533333333333334, 22.453061224489797, 30565.776223332636);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 33176.80471165902, 1711.0393214125243, 1.09, 16.32, 29490.974320144906);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 32052.42307457286, 2055.807505390257, 1.0133333333333334, 12.74530612244898, 29490.974320144906);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 33846.897587471045, 1339.3806562458396, 1.0133333333333334, 14.994285714285715, 29840.741071575634);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 32847.37891053001, 1897.7773948919387, 1.0366666666666666, 12.285714285714286, 29081.596083087086);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 32691.756393073974, 1720.0283479362845, 0.85, 9.808979591836735, 28832.166559764984);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 33523.31484521052, 2583.293901289955, 0.82, 11.453877551020408, 29366.71869496777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 32494.098297357188, 1753.0573653979643, 0.81, 11.138775510204082, 28424.71869496777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 31749.252645169807, 1958.760287823393, 0.7333333333333333, 7.788571428571428, 28424.71869496777);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 31528.345830701397, 2116.2064611064447, 0.7366666666666667, 10.506938775510203, 28907.28712126457);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 29783.461436148373, 2146.5270603202157, 0.7033333333333334, 7.2963265306122445, 28337.44466866786);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 28945.107668919012, 1245.1999916885263, 0.65, 4.744489795918367, 28309.44466866786);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 31042.50531081037, 1803.3696300837926, 0.65, 8.525714285714285, 28217.50662780273);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 30487.404515511604, 1487.5097861192178, 0.65, 6.343673469387755, 28217.50662780273);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 29689.025818711416, 1481.3219885683327, 0.5866666666666667, 5.391836734693878, 28195.50662780273);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 30217.377298100422, 1245.8031077764633, 0.5866666666666667, 6.595918367346939, 28421.430053040724);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 28954.058957989582, 1198.2910513090144, 0.5833333333333334, 2.8824489795918367, 28237.07576220346);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 28542.45303710117, 803.5600625842178, 0.5533333333333333, 0.8448979591836735, 28237.07576220346);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 30167.1457849034, 975.3331482651841, 0.5566666666666666, 4.003265306122449, 28412.075375786146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 29978.94278677931, 1051.0887667642237, 0.5566666666666666, 5.198367346938776, 28412.075375786146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 29009.968951029485, 899.8465532022956, 0.58, 2.5853061224489795, 28412.075375786146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 30015.558657358633, 1230.5074322214864, 0.58, 3.9044897959183675, 28594.075375786146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 28606.115375786132, 30.14384561683243, 0.58, 0.49142857142857144, 28594.075375786146);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 28594.07537578613, 1.469965419604284E-11, 0.5466666666666666, 0.0, 28594.075375786146);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 62, 5, 57, 107, 68, 86, 144, 139, 134, 82, 54, 148, 33, 122, 42, 135, 114, 119, 34, 127, 100, 146, 102, 38, 120, 29, 106, 111, 131, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 80, 24, 60, 124, 50, 8, 6, 116, 11, 56, 19, 85, 26, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 130, 46, 112, 71, 9, 83, 98, 110, 101, 103, 37, 23, 17, 78, 52, 133, 105, 89, 48, 18, 74, 7, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 128, 123, 25, 65, 64, 3, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 92, 27, 57, 107, 68, 80, 24, 60, 124, 50, 86, 144, 8, 6, 116, 56, 19, 85, 26, 11, 54, 82, 148, 33, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 63, 39, 53, 1, 72, 67, 84, 106, 29, 120, 100, 146, 102, 38, 134, 139, 111, 131, 28, 45, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 122, 42, 135, 127, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 28, 45, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 135, 127, 42, 122, 119, 114, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 124, 50, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 40, 70, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 12, 75, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 96, 142, 118, 55, 138, 121, 41, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 146, 38, 100, 120, 29, 106, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 105, 89, 5, 62, 48, 18, 74, 91, 7, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 106, 120, 29, 100, 38, 146, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 106, 120, 29, 100, 38, 146, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 106, 120, 29, 100, 38, 146, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 138, 96, 74, 91, 7, 41, 121, 79, 30, 88, 132, 137, 147, 66, 141, 104, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 116, 8, 6, 56, 19, 85, 26, 11, 148, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 68, 72, 67, 84, 106, 120, 29, 100, 38, 146, 111, 131, 135, 127, 42, 122, 114, 119, 34, 149, 61, 59, 76, 109, 22, 97, 44, 90, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 8, 116, 6, 56, 19, 85, 26, 11, 119, 114, 122, 42, 127, 135, 2, 13, 70, 40, 99, 47, 77, 51, 95, 100, 38, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 72, 68, 53, 39, 63, 143, 1, 43, 113, 67, 84, 106, 120, 29, 111, 131, 28, 45, 33, 54, 82, 148, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 8, 116, 6, 56, 19, 85, 26, 11, 119, 114, 122, 42, 127, 135, 2, 13, 70, 40, 99, 47, 77, 51, 95, 100, 38, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 72, 68, 53, 39, 63, 143, 1, 43, 113, 67, 84, 106, 120, 29, 111, 131, 28, 45, 33, 54, 82, 148, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 8, 116, 6, 56, 19, 85, 26, 11, 119, 114, 122, 42, 127, 135, 2, 13, 70, 40, 99, 47, 77, 51, 95, 100, 38, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 72, 68, 53, 39, 63, 143, 1, 43, 113, 67, 84, 106, 120, 29, 111, 131, 28, 45, 33, 54, 82, 148, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 134, 139, 8, 116, 6, 56, 19, 85, 26, 11, 119, 114, 122, 42, 127, 135, 2, 13, 70, 40, 99, 47, 77, 51, 95, 100, 38, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 72, 68, 53, 39, 63, 143, 1, 43, 113, 67, 84, 106, 120, 29, 111, 131, 28, 45, 33, 54, 82, 148, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 56, 6, 116, 8, 139, 134, 33, 54, 82, 148, 119, 114, 122, 42, 127, 135, 2, 13, 70, 40, 99, 47, 51, 77, 95, 100, 38, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 68, 67, 84, 106, 120, 29, 111, 131, 28, 45, 19, 85, 26, 11, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 137, 132, 147, 66, 104, 141, 27, 92, 57, 107, 80, 24, 60, 50, 124, 86, 144, 56, 6, 116, 8, 139, 134, 33, 54, 82, 148, 119, 114, 122, 42, 127, 135, 2, 13, 70, 40, 99, 47, 51, 77, 95, 100, 38, 146, 36, 4, 102, 145, 32, 75, 12, 94, 125, 81, 115, 49, 43, 113, 143, 1, 53, 39, 63, 72, 68, 67, 84, 106, 120, 29, 111, 131, 28, 45, 19, 85, 26, 11, 34, 149, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 137, 132, 91, 62, 5, 48, 89, 105, 18, 52, 133, 78, 17, 23, 37, 103, 110, 101, 98, 35, 126, 20, 73, 58, 140, 16, 14, 10, 31, 108, 90, 44, 97, 22, 109, 76, 59, 61, 149, 34, 11, 26, 85, 19, 45, 28, 131, 111, 38, 146, 4, 36, 102, 145, 32, 75, 12, 94, 125, 81, 115, 1, 49, 43, 113, 143, 63, 39, 53, 68, 72, 67, 84, 106, 29, 120, 100, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 82, 54, 33, 134, 139, 8, 116, 6, 56, 144, 86, 124, 50, 60, 24, 80, 107, 57, 92, 27, 141, 104, 66, 147, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 86, 144, 56, 6, 8, 116, 139, 134, 33, 45, 2, 28, 131, 111, 106, 120, 29, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 82, 54, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 146, 38, 100, 29, 120, 106, 111, 131, 28, 45, 2, 135, 127, 42, 122, 119, 114, 148, 54, 33, 82, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 62, 5, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 2, 135, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 2, 131, 111, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 51, 77, 47, 99, 40, 70, 13, 135, 127, 42, 122, 119, 114, 148, 11, 19, 85, 26, 34, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 58, 140, 126, 35, 37, 23, 98, 101, 110, 103, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 32, 145, 102, 12, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 119, 114, 148, 11, 26, 85, 19, 149, 61, 59, 76, 109, 34, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 58, 140, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 32, 145, 102, 12, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 119, 114, 148, 11, 19, 149, 85, 26, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 75, 32, 145, 102, 12, 146, 36, 4, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 119, 114, 148, 11, 19, 149, 85, 26, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 34, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 34, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 34, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 34, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 34, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 34, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 36, 4, 146, 95, 77, 51, 47, 99, 40, 70, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 34, 85, 19, 149, 61, 59, 109, 76, 22, 97, 90, 108, 31, 44, 16, 14, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 135, 2, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 149, 85, 26, 34, 61, 59, 76, 109, 22, 97, 90, 108, 31, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 31, 108, 44, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 149, 85, 26, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 26, 85, 19, 149, 34, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 52, 133, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 85, 26, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 16, 14, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 76, 109, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 101, 110, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 10, 14, 16, 20, 73, 140, 58, 126, 35, 98, 110, 101, 103, 37, 23, 17, 78, 133, 52, 18, 105, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 37, 23, 17, 78, 105, 133, 52, 18, 89, 5, 48, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 130, 46, 112, 71, 9, 83, 136, 87, 15, 93, 21, 69, 65, 3, 64, 128, 25, 123, 117, 118, 142, 55, 96, 74, 138, 7, 41, 121, 79, 30, 88, 132, 137, 147, 141, 104, 66, 27, 92, 57, 107, 60, 80, 24, 124, 50, 144, 86, 56, 6, 8, 116, 139, 134, 82, 54, 33, 45, 28, 111, 131, 106, 29, 120, 100, 38, 84, 67, 72, 68, 63, 39, 53, 1, 143, 113, 43, 49, 115, 81, 125, 94, 12, 75, 32, 145, 102, 146, 36, 4, 95, 77, 51, 47, 99, 70, 40, 13, 2, 135, 127, 42, 122, 114, 119, 148, 11, 19, 26, 85, 34, 149, 61, 59, 109, 76, 22, 97, 90, 44, 108, 31, 14, 16, 10, 20, 73, 140, 58, 126, 35, 103, 110, 101, 98, 23, 37, 17, 105, 78, 133, 52, 18, 89, 48, 5, 62, 91, 129, 0]");
    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_75_freq_10() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.75, 10, 1.0, 5.0);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(39627.65541726898);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(39627.65541726898);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");

        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 46769.09656629814, 3333.253890879287, 0.0, 56.904489795918366, 36890.61282739475);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 5, 39113.13209697457, 2602.7741588644435, 0.495, 19.360816326530614, 31649.15846031544);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 10, 36843.051769982696, 2251.6632565337095, 0.495, 6.641632653061224, 31649.15846031544);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 11, 43574.80698923917, 3031.0608839080714, 0.47, 34.61714285714286, 35652.17738227736);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 15, 39351.22865517061, 3173.769468325128, 1.28, 33.89142857142857, 31510.579816183556);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 20, 38939.55831750285, 3333.4018468059385, 1.28, 36.098775510204085, 31510.579816183556);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 21, 47581.39937351575, 4002.4352430824774, 1.23, 44.966530612244895, 35886.945036136014);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 25, 44082.02808292293, 3265.317806936147, 1.23, 37.13306122448979, 35886.945036136014);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 30, 43156.456115738445, 3286.305551958409, 1.23, 34.34367346938775, 35886.945036136014);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 31, 45228.65299308941, 3880.7509089637156, 1.5, 41.11918367346939, 33195.18240334621);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 35, 42681.04833991856, 3547.0850731268274, 1.5, 37.901224489795915, 33195.18240334621);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 40, 41263.51582662943, 3672.20789005185, 1.5, 34.38122448979592, 33195.18240334621);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 41, 41519.5300728916, 2667.692421414447, 1.8, 36.778775510204085, 32792.47498171908);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 45, 41162.51699504504, 2991.584296198392, 1.8, 39.35510204081633, 32792.47498171908);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 40253.23133895999, 2767.7904271551542, 1.8, 35.02612244897959, 32792.47498171908);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 51, 40459.91680860796, 3032.2213688283987, 2.11, 34.64163265306122, 32770.989738927776);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 55, 39693.08861867552, 2807.5287331390673, 2.11, 32.09061224489796, 32770.989738927776);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 60, 39207.43606216342, 2997.080654884412, 2.11, 30.686530612244898, 32770.989738927776);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 61, 42134.64800640824, 2592.543947230062, 2.145, 38.96081632653061, 34453.0085990657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 65, 42402.39371012373, 2982.2039462976104, 2.145, 37.96408163265306, 34453.0085990657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 70, 41827.67639389013, 2533.3505410439593, 2.145, 39.30204081632653, 34453.0085990657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 71, 44470.62982059576, 3328.2870069701003, 2.205, 42.4734693877551, 34083.74268651837);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 75, 42245.7199716748, 3154.5432772726413, 2.205, 39.08, 34083.74268651837);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 80, 41652.12025568796, 3324.0760319203787, 2.205, 37.72816326530612, 34083.74268651837);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 81, 43276.018745175636, 3702.6940917137, 2.36, 38.76571428571429, 34984.29190964929);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 85, 41381.584260285046, 3401.6698861509612, 2.36, 35.72489795918367, 34984.29190964929);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 90, 40236.73461983081, 3445.366336471371, 2.53, 35.198367346938774, 32401.87017350836);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 91, 44432.49914446872, 2814.639544834913, 2.47, 38.735510204081635, 37367.70265356582);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 95, 44790.592482103595, 3831.821576371427, 2.565, 37.331428571428575, 36159.338588149076);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 43905.92582856694, 2803.6892388134165, 2.59, 37.142857142857146, 36159.338588149076);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 43251.97152704254, 3163.1224114112533, 2.525, 35.24, 37373.717015131355);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 105, 42135.3308154111, 2454.6225207995144, 2.525, 34.93959183673469, 37373.717015131355);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 110, 42198.53220763858, 2477.1571035626234, 2.525, 34.710204081632654, 37373.717015131355);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 111, 45550.727019876336, 3881.6626964158545, 2.55, 35.118367346938776, 37935.02698414063);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 115, 45501.405296454934, 3755.8754696859855, 2.595, 33.72489795918367, 36101.899957856585);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 120, 44405.61863480195, 3363.7030721566102, 2.595, 30.129795918367346, 36101.899957856585);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 121, 46846.076327777635, 4680.2667506724765, 2.58, 41.22775510204082, 36751.84527133657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 125, 44493.294614694976, 3480.4852396970705, 2.58, 40.736326530612246, 36751.84527133657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 130, 44729.80906798968, 3447.4354272773917, 2.58, 41.86612244897959, 36751.84527133657);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 131, 42718.52022765839, 2896.9797548048437, 2.555, 37.63836734693878, 35904.230217250886);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 135, 42364.34802762345, 2810.8591621728224, 2.555, 37.27428571428572, 35904.230217250886);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 140, 41300.70645582621, 2401.1791560655324, 2.64, 34.34204081632653, 34719.202337261064);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 141, 42825.239347103874, 2365.8651378785385, 2.635, 37.02285714285714, 36045.218707030996);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 145, 43430.16426090523, 2995.23576828876, 2.635, 34.96163265306122, 36045.218707030996);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 42630.97825512416, 2755.3509164159736, 2.735, 33.57714285714286, 34920.96800760835);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 151, 43311.382180875364, 2784.4394636903007, 2.66, 37.59510204081633, 38060.63425738225);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 155, 42825.62024160042, 3023.7214574558357, 2.69, 36.36816326530612, 35625.125514158455);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 160, 42951.991976471654, 3431.5288781204686, 2.69, 35.15428571428571, 35625.125514158455);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 161, 42938.896736137714, 2884.2316555111606, 2.645, 35.63265306122449, 33715.52493000383);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 165, 43165.317473686635, 3052.0003519799766, 2.645, 37.502857142857145, 33715.52493000383);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 170, 42457.27361395057, 2923.093499845667, 2.645, 36.817959183673466, 33715.52493000383);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 171, 44325.501430963806, 3472.4206114109484, 2.64, 34.010612244897956, 35320.22993193666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 175, 44097.653246031005, 3311.166420060509, 2.64, 33.097142857142856, 35320.22993193666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 180, 44511.095383627035, 3543.9302679267457, 2.64, 35.13142857142857, 35320.22993193666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 181, 41912.10061688664, 2674.557452404442, 2.74, 33.25142857142857, 35270.665057542894);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 185, 41373.79423870891, 2665.012405822759, 2.74, 33.14857142857143, 35270.665057542894);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 190, 40922.0245278985, 2883.2434373966453, 2.74, 33.226938775510206, 35270.665057542894);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 191, 42679.426997939896, 3071.8307001929693, 2.68, 33.60326530612245, 34578.369875142984);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 195, 42170.52242438897, 3009.8137254709095, 2.68, 29.417142857142856, 34578.369875142984);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 41372.37358579198, 3701.441219466087, 2.665, 27.41551020408163, 34578.369875142984);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 40985.98140177217, 2086.65773199067, 2.62, 33.16816326530612, 33562.19531848305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 205, 41201.93005819678, 2357.644955935515, 2.62, 33.243265306122446, 33562.19531848305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 210, 41710.188338753476, 2694.8764806351355, 2.62, 32.40489795918367, 33562.19531848305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 211, 44902.69977161261, 3179.920522327822, 2.555, 35.53469387755102, 38546.55708573295);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 215, 44433.091064438646, 2997.344701562046, 2.555, 34.97061224489796, 38546.55708573295);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 220, 44312.23192578094, 3328.1719881473223, 2.555, 35.1534693877551, 38546.55708573295);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 221, 44486.15885752813, 3072.9890235470525, 2.535, 34.627755102040815, 35348.79529352712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 225, 44586.32943330456, 2454.385886510983, 2.535, 33.89061224489796, 35348.79529352712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 230, 44212.064391628664, 3155.2125598479693, 2.535, 33.42775510204082, 35348.79529352712);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 231, 43613.57843440393, 3158.1684891434165, 2.525, 33.226122448979595, 36883.83479136841);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 235, 43347.46741941142, 2563.256558482385, 2.525, 32.12979591836735, 36883.83479136841);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 240, 42120.22491352808, 2389.4583627214747, 2.525, 30.830204081632655, 36883.83479136841);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 241, 42386.59656891318, 2566.8840843224507, 2.5, 31.703673469387756, 35908.66883211592);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 245, 41975.155412107284, 2743.36530932816, 2.5, 31.140408163265306, 35908.66883211592);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 41358.75641093933, 2934.4490277887817, 2.5, 30.086530612244896, 35908.66883211592);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 251, 45374.1774416014, 3501.3339077071855, 2.42, 31.853061224489796, 36417.39230431835);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 255, 44129.718505014665, 2748.8808142096286, 2.42, 32.773061224489794, 36417.39230431835);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 260, 44210.24367861347, 2691.0196872467377, 2.42, 33.16, 36417.39230431835);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 261, 42648.17373022317, 3108.149934445068, 2.475, 29.995102040816327, 33616.748284810434);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 265, 42439.623471185834, 3149.3689950919347, 2.475, 30.537142857142857, 33616.748284810434);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 270, 41970.166765195456, 3092.4001302688575, 2.475, 28.304489795918368, 33616.748284810434);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 271, 42533.35779655126, 2496.411767521176, 2.46, 27.892244897959184, 37149.97410464672);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 275, 42235.436353923746, 2153.3270195245673, 2.46, 28.23183673469388, 37149.97410464672);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 280, 42940.59503458955, 2388.6736978245663, 2.46, 26.88408163265306, 37149.97410464672);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 281, 42084.358849889046, 2474.9963173404035, 2.49, 30.41551020408163, 35962.425278391);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 285, 42748.40455313449, 2826.6193222922643, 2.49, 30.787755102040816, 35962.425278391);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 290, 42110.66277148644, 2675.86544104972, 2.49, 30.205714285714286, 35962.425278391);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 291, 41853.84288708478, 2575.4106235955283, 2.405, 28.571428571428573, 35920.6425358521);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 295, 41138.60781338892, 2402.5001412827323, 2.425, 27.499591836734695, 35408.05930299312);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 41156.57830072669, 1931.2003529327021, 2.445, 25.714285714285715, 35408.05930299312);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 41617.24014802284, 2248.0271726424758, 2.315, 29.097142857142856, 36045.96791763801);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 305, 41900.37958341843, 3100.033423940264, 2.33, 27.40326530612245, 35150.6404682475);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 310, 41531.679066158635, 2414.564378656074, 2.33, 26.449795918367347, 35150.6404682475);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 311, 43304.561044020906, 2490.9077596048232, 2.305, 28.96816326530612, 36537.36795448406);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 315, 43323.739571829596, 2488.713329821724, 2.305, 29.444897959183674, 36537.36795448406);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 320, 43155.512461216655, 1929.2266267057328, 2.305, 27.05142857142857, 36537.36795448406);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 321, 43405.57635922227, 2671.8042361949674, 2.245, 31.28326530612245, 36927.45164163054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 325, 43314.47396728842, 2305.639742076236, 2.245, 31.40326530612245, 36927.45164163054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 330, 43388.37851672241, 2356.3223917475043, 2.245, 29.50204081632653, 36927.45164163054);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 331, 43814.47654542941, 2270.2974293175866, 2.315, 27.897142857142857, 36775.40983082358);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 335, 43204.41733972163, 2560.5457465897357, 2.315, 27.711020408163265, 36775.40983082358);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 340, 43183.96965227137, 2437.284143559886, 2.315, 27.48, 36775.40983082358);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 341, 44873.335239531996, 3529.5479904623858, 2.235, 29.885714285714286, 36160.10811587321);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 345, 43941.68906116854, 2645.388379537097, 2.235, 28.813877551020408, 36160.10811587321);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 43303.97684238342, 2889.4512638030706, 2.235, 28.376326530612246, 36160.10811587321);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 351, 43101.218314392725, 2586.5685986048634, 2.125, 27.78448979591837, 36552.629020328626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 355, 43861.43439658778, 2294.6781613845997, 2.125, 27.78448979591837, 36552.629020328626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 360, 43529.57198182706, 3273.7841914626497, 2.125, 27.18204081632653, 36552.629020328626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 361, 42948.546879363654, 2191.8217625931925, 2.155, 27.626938775510204, 37260.83732175575);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 365, 42869.22561083215, 2499.610251737319, 2.155, 27.620408163265306, 37260.83732175575);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 370, 43170.52134830963, 2532.7577963085364, 2.155, 27.064489795918366, 37260.83732175575);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 371, 41749.2224065028, 1907.9673083588493, 2.12, 26.198367346938774, 37258.795019833284);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 375, 41306.96757425621, 1895.5949951856905, 2.12, 24.161632653061226, 37258.795019833284);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 380, 41170.27334301146, 2119.5699880042002, 2.12, 23.354285714285716, 37258.795019833284);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 381, 43499.958195038584, 2156.5601587553174, 2.125, 22.90122448979592, 36905.57373472485);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 385, 43395.41879022859, 2387.0796453772373, 2.125, 21.52326530612245, 36905.57373472485);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 390, 43869.50136019668, 2719.4685602983577, 2.125, 21.234285714285715, 36905.57373472485);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 391, 42606.707312928454, 1902.4264480644433, 2.04, 25.913469387755104, 36652.44074723871);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 395, 42497.939469430894, 2044.1301694333595, 2.04, 26.422857142857143, 36652.44074723871);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 42435.28153995257, 2556.6013167402475, 2.035, 26.57551020408163, 36652.44074723871);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 42825.44913025214, 1948.3272989751717, 1.99, 24.095510204081634, 37871.87899336968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 405, 42720.889856057576, 2670.659706224404, 1.99, 23.43673469387755, 37871.87899336968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 410, 42354.72877779404, 2686.4477706085136, 1.99, 21.81061224489796, 37871.87899336968);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 411, 40832.04330650678, 2191.838723864545, 1.94, 24.808163265306124, 35888.96109073078);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 415, 39630.59733182813, 2511.5999460530543, 1.95, 20.18938775510204, 34483.91589995947);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 420, 39757.84998413071, 3032.1896836548144, 1.95, 18.428571428571427, 34483.91589995947);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 421, 42056.38444099039, 2390.0676264026133, 1.88, 22.45795918367347, 35631.74306127771);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 425, 42365.20907899397, 2744.080843144483, 1.88, 22.41061224489796, 35631.74306127771);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 430, 41775.43363824459, 2497.4324616544595, 1.88, 21.122448979591837, 35631.74306127771);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 431, 46824.07717096949, 3812.571510276486, 1.865, 21.224489795918366, 39340.47465005893);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 435, 45853.947427002706, 3221.9486854514166, 1.89, 20.35265306122449, 36486.15717676366);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 440, 44758.63775874613, 3049.517362212563, 1.89, 18.289795918367346, 36486.15717676366);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 441, 42853.12777316799, 3415.6434265054063, 1.85, 25.23591836734694, 35924.0421472978);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 445, 43500.35140970293, 4336.599655513761, 1.85, 23.86530612244898, 35924.0421472978);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 42286.549129535946, 2910.2238055319262, 1.85, 22.38530612244898, 35924.0421472978);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 451, 42481.77282897653, 2463.9934901178467, 1.835, 23.313469387755102, 36625.79605259829);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 455, 42484.38370249427, 3071.7943296535555, 1.835, 23.06122448979592, 36625.79605259829);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 460, 41714.465125503455, 2997.6969759594767, 1.835, 22.22122448979592, 36625.79605259829);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 461, 41417.60210803529, 2054.5373705376683, 1.765, 21.204897959183672, 36401.189254722776);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 465, 41146.66450865839, 2194.4626968382413, 1.765, 20.90530612244898, 36401.189254722776);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 470, 41035.501053965505, 1892.938551370273, 1.765, 20.459591836734695, 36401.189254722776);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 471, 44515.6655698064, 3242.759889094654, 1.8, 22.528163265306123, 36263.00461498072);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 475, 45825.66957063853, 3061.635571318555, 1.8, 20.755102040816325, 36263.00461498072);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 480, 44936.44339751185, 3314.7915850266277, 1.8, 19.943673469387754, 36263.00461498072);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 481, 42505.68407044399, 3330.5285049177746, 1.775, 21.54122448979592, 36480.825740892236);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 485, 41861.49142727498, 2812.1031553807675, 1.775, 20.963265306122448, 36480.825740892236);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 490, 41034.30343651768, 3331.6188875215316, 1.735, 20.345306122448978, 35670.2036438166);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 491, 41478.53892640472, 2754.0007351597064, 1.74, 16.853877551020407, 35937.289491056115);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 495, 41305.23407018641, 3143.1676801692506, 1.74, 16.591020408163267, 35937.289491056115);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 40871.488568949506, 2990.2744597099872, 1.77, 16.39265306122449, 35937.289491056115);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 41523.667012877195, 2351.340750041316, 1.735, 18.426938775510205, 36011.279102098626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 505, 41747.34150964105, 2948.6775869792777, 1.735, 17.78857142857143, 36011.279102098626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 510, 40851.355182589774, 2692.451477430848, 1.735, 15.831836734693878, 36011.279102098626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 511, 40297.11438529534, 1848.1205847563717, 1.66, 17.644081632653062, 36040.68644514488);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 515, 39672.67144062988, 1883.5912392039459, 1.66, 16.428571428571427, 36040.68644514488);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 520, 39873.84967646711, 2330.834390405578, 1.66, 16.164897959183673, 36040.68644514488);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 521, 40747.128319862255, 3179.4999533916853, 1.625, 17.764897959183674, 36116.45459375337);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 525, 40298.19805429207, 2908.9864551346195, 1.625, 17.291428571428572, 35375.73094133383);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 530, 39634.33848456863, 2368.596415853625, 1.625, 15.764081632653062, 35375.73094133383);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 531, 40193.98991195005, 2603.179376091247, 1.555, 19.28, 35389.58972125397);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 535, 39967.09244316576, 1968.86509180641, 1.555, 19.285714285714285, 35389.58972125397);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 540, 39874.08774873006, 2544.5529906275574, 1.555, 19.26612244897959, 35389.58972125397);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 541, 42475.58319274813, 2573.65372380514, 1.555, 17.942040816326532, 34892.0748083243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 545, 42293.83690395596, 2941.491409501599, 1.555, 16.15020408163265, 34892.0748083243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 41989.98931723218, 2999.6786410046507, 1.555, 15.17469387755102, 34892.0748083243);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 551, 40581.9315362467, 1762.0834490862358, 1.525, 15.940408163265307, 35470.31476755495);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 555, 39514.72408527924, 2029.6907408200632, 1.51, 14.92, 34852.850270941075);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 560, 40046.26537330047, 1954.2122704705068, 1.51, 14.813877551020408, 34852.850270941075);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 561, 39899.6952960692, 2083.6343235976046, 1.49, 17.048163265306123, 35749.54408518492);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 565, 39738.51116673913, 2020.714763653097, 1.49, 15.716734693877552, 35749.54408518492);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 570, 39729.87589285098, 1911.9714338553317, 1.51, 15.34204081632653, 34772.67548658784);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 571, 40834.60359642148, 3163.751257332407, 1.57, 17.473469387755102, 36191.159408488245);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 575, 39763.00679688205, 2927.2960034040857, 1.57, 15.151836734693877, 36191.159408488245);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 580, 39552.777735192954, 2491.6656303094137, 1.57, 13.83265306122449, 36191.159408488245);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 581, 42571.59787230577, 2325.674502477941, 1.46, 15.990204081632653, 35997.21775828085);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 585, 42495.37491496643, 2862.9245378404917, 1.46, 14.879183673469388, 35997.21775828085);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 590, 41837.029250665924, 2091.754783049984, 1.46, 14.045714285714286, 35997.21775828085);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 591, 41038.80944112543, 1871.1794923382681, 1.4, 18.499591836734695, 37768.32158823327);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 595, 40522.07208778852, 1784.9617087831596, 1.435, 17.97714285714286, 35475.30224176626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 40393.39526194717, 1719.8053922544248, 1.45, 17.638367346938775, 35475.30224176626);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 40140.15952822214, 1420.4296922430979, 1.45, 15.58530612244898, 36853.37860756518);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 605, 39915.038997512216, 1485.1047417960435, 1.465, 16.248979591836736, 36041.85107598416);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 610, 39562.39766445935, 1644.9422507851305, 1.465, 15.253877551020409, 36041.85107598416);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 611, 41723.99140427412, 1816.5828208717946, 1.425, 15.57469387755102, 35911.17102348334);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 615, 40942.2114517468, 1923.1018506448747, 1.425, 13.69061224489796, 35911.17102348334);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 620, 41157.86498475267, 2158.894259852406, 1.425, 14.337142857142856, 35911.17102348334);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 621, 39582.50591741025, 1912.3033305186987, 1.46, 14.244897959183673, 35625.48352568702);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 625, 39393.93344755585, 1607.0830350846502, 1.46, 14.100408163265307, 35625.48352568702);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 630, 39342.00104625022, 1778.8038882022663, 1.46, 12.817142857142857, 35625.48352568702);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 631, 39269.679285683844, 1440.2064675616466, 1.375, 13.444081632653061, 36033.23979518496);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 635, 38525.539983433526, 1067.8128969491738, 1.375, 13.279183673469388, 36033.23979518496);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 640, 38711.53421103713, 1094.543079045216, 1.375, 12.117551020408163, 36033.23979518496);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 641, 39716.5755103568, 1958.3640740932997, 1.335, 14.830204081632653, 36031.34853172034);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 645, 39158.79343012472, 1651.8555566275377, 1.335, 13.326530612244898, 36031.34853172034);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 38410.71973763412, 1323.3897507058705, 1.335, 11.172244897959184, 36031.34853172034);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 651, 40153.12789831338, 1151.5022721041141, 1.335, 10.754285714285714, 35879.36640496508);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 655, 40137.459053003535, 1456.1814524428864, 1.335, 10.442448979591838, 35879.36640496508);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 660, 39837.402463605926, 1407.6652380926819, 1.335, 10.640816326530611, 35879.36640496508);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 661, 41052.559886570234, 1604.8881353297563, 1.285, 14.24326530612245, 36107.66299201221);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 665, 41156.71156214551, 1583.4894754790912, 1.285, 13.72326530612245, 36107.66299201221);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 670, 41103.1055502608, 1457.0464047289736, 1.285, 13.719183673469388, 36107.66299201221);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 671, 40527.048159722646, 1599.4625067877978, 1.285, 15.004897959183673, 36987.680333179516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 675, 40654.26140306295, 1950.6159669697934, 1.285, 15.10204081632653, 36987.680333179516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 680, 40092.612853243256, 2256.5253112319615, 1.285, 12.35591836734694, 36987.680333179516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 681, 41920.67559317217, 1929.8118338977504, 1.255, 13.31265306122449, 37287.28288819289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 685, 41971.58864703905, 2468.809562060944, 1.255, 11.939591836734694, 37287.28288819289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 690, 41510.3757801833, 2362.1079810348133, 1.255, 11.013877551020409, 37287.28288819289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 691, 42052.57042426326, 1661.1758867181916, 1.235, 8.902040816326531, 38354.831134302076);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 695, 41031.90972512469, 1284.3616648473105, 1.235, 8.77061224489796, 38354.831134302076);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 41000.36147450055, 1485.5577405497006, 1.26, 7.751836734693877, 37761.76914356235);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 42663.73966140579, 1399.952072161418, 1.185, 11.477551020408164, 38326.43661219736);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 705, 42286.74706610498, 1224.5058949775173, 1.185, 10.635918367346939, 38326.43661219736);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 710, 42161.68799717172, 947.3128711832917, 1.185, 10.099591836734694, 38326.43661219736);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 711, 42518.013838783634, 2203.5428062618284, 1.2, 11.568163265306122, 37834.972740070836);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 715, 41633.62535682513, 1530.9898307720916, 1.2, 10.88408163265306, 37834.972740070836);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 720, 41692.854355245756, 1742.0284609846383, 1.2, 10.541224489795919, 37834.972740070836);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 721, 42909.74648162524, 1275.4723738796224, 1.175, 12.033469387755103, 38859.091212949);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 725, 41729.12797259173, 1979.1135734064164, 1.175, 10.890612244897959, 38859.091212949);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 730, 41665.54087845932, 2077.2467436083416, 1.175, 10.693061224489796, 38859.091212949);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 731, 41812.62061875573, 1931.176327428365, 1.24, 10.923265306122449, 37673.15344679088);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 735, 40903.41750579787, 2123.0043219905738, 1.24, 9.64326530612245, 37673.15344679088);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 740, 40331.01122714314, 2096.9640613886463, 1.24, 8.922448979591836, 37673.15344679088);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 741, 42085.41319923665, 1388.1810289499842, 1.185, 11.278367346938776, 38994.010723171305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 745, 42363.82764990492, 1536.0241231680864, 1.185, 10.757551020408163, 38994.010723171305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 41703.619624629595, 1339.3062396548814, 1.185, 9.181224489795918, 38994.010723171305);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 751, 40690.75394073645, 1056.5640071474297, 1.125, 8.177959183673469, 37855.37553847023);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 755, 40938.39536257192, 1316.0277441812582, 1.125, 7.337142857142857, 37855.37553847023);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 760, 41329.09749790044, 1662.460672034481, 1.125, 9.866122448979592, 37855.37553847023);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 761, 40963.838164559485, 1663.8848051437371, 1.135, 9.431836734693878, 38630.10536859748);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 765, 40651.17981283441, 1702.7936758127955, 1.135, 8.14530612244898, 38630.10536859748);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 770, 39785.14108433857, 1442.9926881799254, 1.135, 6.722448979591837, 38630.10536859748);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 771, 40452.31642638204, 983.3270108610182, 1.06, 10.266938775510203, 38515.80291532215);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 775, 40133.4961863803, 916.0686378859393, 1.06, 9.319183673469388, 38515.80291532215);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 780, 40210.528538818544, 1102.7774874857573, 1.06, 9.531428571428572, 38515.80291532215);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 781, 41499.161097154385, 1075.6434898298521, 1.085, 10.474285714285715, 39505.01814397007);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 785, 41263.3642742093, 1184.223225587566, 1.085, 9.870204081632654, 39505.01814397007);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 790, 41515.23384615733, 1371.5794141211372, 1.07, 9.353469387755101, 39159.281550528074);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 791, 41469.914860531164, 1517.2182058242201, 1.115, 8.2, 38702.65058052784);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 795, 41607.69759365804, 1793.2156272619015, 1.115, 8.339591836734694, 38702.65058052784);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 41332.11917960763, 1561.7497892183987, 1.105, 7.604897959183673, 38702.65058052784);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 42534.632517224716, 1303.4389070392313, 1.04, 8.427755102040816, 40039.0948980578);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 805, 42456.23891702064, 1059.692227587063, 1.04, 8.29795918367347, 40039.0948980578);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 810, 42483.25056910677, 1078.4370576698818, 1.04, 8.144489795918368, 40039.0948980578);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 811, 41914.746865450994, 1203.7790480143465, 1.01, 7.293877551020408, 39382.35633021675);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 815, 41946.36581670749, 1378.5478984629383, 1.01, 6.987755102040817, 39382.35633021675);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 820, 41785.72675971799, 1218.37178626899, 1.01, 7.203265306122449, 39382.35633021675);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 821, 40133.40610506823, 1110.5449141229142, 0.975, 6.236734693877551, 39093.79688216478);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 825, 40402.961236499825, 1490.0099631067167, 0.975, 6.634285714285714, 39093.79688216478);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 830, 40320.89193460234, 971.5090512175557, 0.975, 6.192653061224489, 39093.79688216478);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 831, 40771.78031583589, 929.0293598408965, 0.935, 6.486530612244898, 39499.951740938144);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 835, 40280.721882604266, 698.9322945654617, 0.95, 5.902857142857143, 39486.06550540289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 840, 39937.109847755, 547.9679609437743, 0.95, 4.688979591836735, 39486.06550540289);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 841, 42043.26337583514, 1255.7390384384446, 0.895, 7.966530612244898, 39304.235527804994);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 845, 41295.80180209523, 1747.8062344385175, 0.895, 7.182040816326531, 39304.235527804994);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 41350.274502185566, 2059.2145381681635, 0.895, 5.401632653061225, 39304.235527804994);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 851, 39884.75406763729, 842.7158120047054, 0.87, 6.469387755102041, 38708.45014257924);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 855, 39827.16615856221, 732.1680213935219, 0.87, 6.1722448979591835, 38708.45014257924);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 860, 39799.89274528336, 687.5330687983434, 0.87, 6.417959183673469, 38708.45014257924);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 861, 40800.77295222714, 1062.9999574310482, 0.885, 5.41469387755102, 39630.94532714783);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 865, 40666.87960588304, 1184.3572696807832, 0.895, 4.084897959183674, 39482.014006092824);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 870, 40645.272933504646, 1029.9512596558502, 0.895, 3.942040816326531, 39482.014006092824);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 871, 41643.66503881686, 1385.2891572674052, 0.885, 4.331428571428572, 39979.698636429515);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 875, 41457.386158693764, 1395.9263331238515, 0.885, 4.266938775510204, 39979.698636429515);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 880, 41743.26893439195, 1453.613832413389, 0.895, 4.387755102040816, 39971.995637417596);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 881, 40206.67143157093, 713.1066059370243, 0.87, 4.190204081632653, 39632.30224740686);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 885, 40424.724935979786, 1076.0760608633843, 0.87, 4.577142857142857, 39632.30224740686);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 890, 40353.75040015349, 938.1252118936475, 0.87, 4.511836734693878, 39632.30224740686);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 891, 39030.46943458779, 745.2124924323948, 0.795, 2.369795918367347, 38599.20310603932);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 895, 38821.37761737315, 435.2769811326378, 0.795, 1.686530612244898, 38599.20310603932);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 38725.533486599226, 368.6279202901283, 0.78, 1.0571428571428572, 38599.20310603932);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 40670.33280759873, 721.9154207908415, 0.78, 3.871020408163265, 39909.03474774853);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 905, 40658.163284064794, 753.4212058346726, 0.78, 3.68734693877551, 39909.03474774853);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 910, 40682.34740819501, 856.8101433953276, 0.78, 3.501224489795918, 39909.03474774853);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 911, 40187.12956342363, 1908.8935088579767, 0.78, 3.7322448979591836, 38833.653863415915);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 915, 39635.20053400676, 1596.800414099784, 0.78, 2.780408163265306, 38833.653863415915);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 920, 39352.84217338089, 1377.3202531232928, 0.78, 1.6122448979591837, 38833.653863415915);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 921, 39958.774306325045, 334.1613714206721, 0.78, 1.5787755102040817, 39453.61544521698);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 925, 39933.84229200008, 478.166034676713, 0.775, 2.0138775510204083, 39347.28896110677);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 930, 39902.841719119635, 373.8594850753678, 0.775, 1.8073469387755101, 39347.28896110677);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 931, 41159.28518882671, 307.8715094058867, 0.725, 0.9893877551020408, 40039.439316784745);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 935, 41074.790764244295, 423.5971134453376, 0.715, 1.2424489795918368, 39628.339041705796);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 940, 41101.650052716264, 373.69575999175356, 0.715, 1.0187755102040816, 39628.339041705796);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 941, 39208.11618675799, 245.2375441823193, 0.73, 1.8383673469387756, 39027.328012908554);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 945, 39159.675310265964, 226.19309802956266, 0.73, 1.8187755102040817, 39027.328012908554);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 39108.10752595196, 165.96223077784418, 0.73, 1.4318367346938776, 39027.328012908554);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 951, 39485.19907155674, 4.409896258812852E-11, 0.67, 0.0, 39485.19907155669);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 955, 39485.19907155674, 4.409896258812852E-11, 0.67, 0.0, 39485.19907155669);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 960, 39485.19907155674, 4.409896258812852E-11, 0.67, 0.0, 39485.19907155669);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 961, 39957.28095377264, 2.204948129406426E-11, 0.655, 0.0, 39957.280953772664);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 965, 39957.28095377264, 2.204948129406426E-11, 0.655, 0.0, 39957.280953772664);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 970, 39957.28095377264, 2.204948129406426E-11, 0.655, 0.0, 39957.280953772664);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 971, 39735.27795379887, 3.67491354901071E-11, 0.66, 0.0, 39735.27795379883);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 975, 39735.27795379887, 3.67491354901071E-11, 0.66, 0.0, 39735.27795379883);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 980, 39735.27795379887, 3.67491354901071E-11, 0.66, 0.0, 39735.27795379883);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 981, 38589.90279053519, 2.939930839208568E-11, 0.62, 0.0, 38589.90279053516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 985, 38589.90279053519, 2.939930839208568E-11, 0.62, 0.0, 38589.90279053516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 990, 38589.90279053519, 2.939930839208568E-11, 0.62, 0.0, 38589.90279053516);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 991, 39627.65541726903, 5.144878968614994E-11, 0.61, 0.0, 39627.65541726898);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 995, 39627.65541726903, 5.144878968614994E-11, 0.61, 0.0, 39627.65541726898);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 39627.65541726903, 5.144878968614994E-11, 0.61, 0.0, 39627.65541726898);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 5, 48, 18, 96, 74, 55, 3, 64, 65, 25, 87, 15, 21, 69, 93, 78, 52, 17, 83, 9, 35, 23, 37, 98, 58, 73, 20, 71, 89, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 19, 82, 54, 33, 50, 86, 56, 8, 6, 76, 27, 92, 66, 57, 24, 80, 68, 67, 72, 49, 43, 75, 32, 12, 81, 1, 63, 39, 53, 84, 29, 38, 95, 77, 51, 4, 36, 94, 70, 40, 99, 47, 28, 45, 2, 13, 42, 11, 34, 60, 7, 41, 30, 79, 88, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 5, 48, 62, 3, 64, 25, 65, 69, 15, 52, 78, 87, 21, 93, 17, 23, 37, 98, 35, 58, 73, 20, 71, 83, 9, 89, 18, 74, 96, 55, 79, 88, 30, 41, 7, 91, 44, 90, 97, 22, 59, 61, 26, 85, 34, 56, 50, 86, 8, 6, 19, 11, 82, 54, 33, 84, 67, 72, 49, 43, 81, 36, 4, 95, 77, 51, 29, 38, 28, 45, 42, 2, 13, 99, 70, 40, 47, 75, 32, 12, 94, 68, 63, 39, 53, 1, 80, 24, 60, 57, 92, 27, 66, 76, 14, 16, 31, 10, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 25, 18, 89, 62, 46, 90, 44, 22, 97, 76, 61, 59, 19, 11, 26, 34, 85, 6, 8, 56, 86, 50, 24, 80, 60, 67, 84, 29, 38, 82, 54, 33, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 43, 72, 49, 1, 63, 39, 53, 68, 66, 27, 57, 92, 14, 16, 31, 10, 73, 58, 20, 71, 83, 35, 23, 37, 98, 17, 93, 52, 78, 9, 48, 91, 7, 41, 88, 30, 79, 55, 96, 3, 64, 65, 74, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 5, 87, 21, 15, 78, 17, 23, 37, 98, 35, 58, 73, 20, 83, 71, 9, 89, 18, 74, 91, 7, 41, 30, 88, 79, 55, 96, 3, 64, 25, 65, 69, 93, 52, 48, 62, 46, 10, 14, 16, 31, 90, 97, 44, 22, 76, 59, 61, 85, 26, 11, 33, 82, 54, 34, 19, 6, 8, 56, 86, 50, 60, 80, 24, 68, 63, 39, 53, 1, 43, 72, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 47, 13, 45, 28, 2, 42, 70, 40, 99, 66, 57, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 78, 83, 9, 89, 48, 91, 7, 41, 88, 30, 79, 55, 96, 74, 18, 52, 65, 64, 25, 3, 17, 23, 37, 98, 35, 71, 20, 73, 58, 10, 16, 14, 31, 44, 90, 97, 22, 61, 59, 76, 34, 85, 26, 11, 19, 8, 6, 56, 50, 86, 60, 24, 80, 68, 63, 53, 39, 1, 43, 72, 49, 81, 94, 12, 32, 75, 36, 4, 77, 51, 95, 38, 29, 70, 40, 99, 47, 13, 28, 45, 2, 42, 54, 82, 33, 84, 67, 46, 62, 92, 57, 66, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 23, 37, 98, 35, 9, 89, 62, 46, 44, 97, 90, 31, 10, 16, 14, 73, 20, 58, 71, 83, 91, 7, 41, 88, 30, 79, 55, 25, 64, 65, 96, 3, 18, 52, 78, 48, 74, 66, 57, 92, 27, 80, 24, 68, 49, 43, 72, 53, 39, 63, 1, 81, 94, 12, 32, 75, 36, 4, 95, 77, 51, 47, 40, 70, 99, 13, 2, 42, 45, 33, 54, 82, 11, 85, 34, 26, 19, 56, 6, 8, 86, 50, 60, 67, 84, 38, 29, 28, 61, 76, 59, 22, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 37, 98, 35, 71, 73, 58, 20, 83, 9, 46, 10, 16, 14, 31, 44, 22, 97, 61, 59, 76, 19, 11, 34, 85, 26, 82, 54, 33, 56, 6, 8, 86, 50, 60, 80, 68, 49, 43, 72, 53, 39, 63, 1, 81, 94, 12, 75, 32, 36, 4, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 2, 42, 13, 28, 84, 67, 24, 57, 92, 27, 66, 7, 91, 88, 30, 79, 41, 55, 74, 96, 52, 65, 25, 64, 3, 18, 89, 48, 62, 90, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 10, 14, 16, 44, 31, 90, 46, 22, 97, 59, 76, 61, 34, 26, 85, 11, 19, 56, 6, 8, 86, 50, 60, 24, 80, 67, 38, 95, 77, 51, 4, 36, 75, 12, 32, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 84, 82, 33, 54, 42, 13, 28, 45, 2, 99, 47, 70, 40, 29, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 62, 48, 89, 74, 18, 52, 3, 64, 65, 25, 96, 55, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 52, 89, 18, 74, 91, 48, 62, 46, 20, 71, 9, 83, 23, 37, 35, 98, 58, 73, 14, 16, 10, 31, 44, 22, 97, 90, 92, 27, 66, 57, 60, 80, 24, 86, 50, 56, 8, 6, 33, 82, 54, 11, 19, 85, 26, 34, 59, 76, 61, 28, 45, 2, 42, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 72, 67, 84, 38, 29, 43, 1, 53, 39, 63, 68, 64, 65, 25, 3, 96, 55, 79, 30, 88, 41, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 98, 37, 83, 9, 71, 20, 73, 58, 14, 16, 10, 31, 22, 97, 90, 44, 46, 62, 48, 91, 7, 41, 88, 30, 79, 55, 3, 65, 64, 25, 18, 52, 89, 74, 96, 66, 92, 57, 60, 80, 24, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 29, 38, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 28, 45, 42, 2, 99, 70, 40, 47, 13, 33, 54, 82, 19, 85, 26, 11, 6, 8, 56, 86, 50, 34, 61, 59, 76, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 71, 58, 20, 73, 10, 16, 14, 31, 44, 90, 46, 62, 48, 89, 74, 91, 7, 41, 30, 88, 79, 55, 96, 3, 64, 65, 25, 18, 52, 37, 98, 22, 97, 59, 61, 76, 86, 56, 6, 8, 50, 60, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 29, 28, 45, 42, 2, 13, 70, 40, 99, 47, 51, 77, 95, 36, 4, 32, 12, 75, 94, 81, 38, 82, 54, 33, 34, 26, 85, 11, 19, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 71, 20, 73, 58, 10, 31, 16, 14, 44, 90, 97, 22, 46, 62, 91, 48, 89, 74, 96, 55, 41, 7, 79, 30, 88, 66, 92, 27, 57, 60, 80, 24, 50, 86, 56, 8, 6, 54, 82, 33, 45, 2, 42, 13, 28, 29, 51, 77, 95, 38, 47, 99, 70, 40, 84, 67, 72, 49, 43, 1, 63, 39, 53, 68, 94, 81, 12, 32, 75, 36, 4, 19, 11, 85, 26, 34, 59, 61, 76, 37, 98, 18, 3, 65, 64, 25, 52, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 18, 65, 64, 25, 3, 96, 74, 55, 79, 30, 88, 41, 7, 91, 27, 92, 57, 60, 80, 24, 50, 86, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 44, 14, 16, 20, 71, 37, 98, 73, 58, 10, 31, 46, 22, 90, 97, 68, 63, 39, 53, 1, 43, 72, 49, 67, 84, 29, 38, 28, 2, 40, 70, 99, 47, 13, 42, 45, 33, 54, 82, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 66, 48, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 18, 74, 48, 62, 66, 27, 92, 57, 60, 80, 24, 50, 86, 8, 6, 56, 85, 11, 26, 34, 61, 59, 19, 76, 22, 44, 90, 97, 31, 10, 14, 16, 58, 73, 20, 71, 37, 98, 89, 96, 55, 41, 79, 88, 30, 7, 91, 25, 64, 65, 3, 39, 63, 53, 68, 72, 49, 81, 94, 32, 12, 75, 36, 4, 51, 77, 95, 29, 47, 40, 99, 70, 13, 42, 2, 45, 28, 33, 82, 54, 84, 38, 1, 43, 67, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 74, 96, 3, 25, 64, 65, 18, 37, 98, 58, 73, 20, 71, 44, 90, 31, 10, 16, 14, 62, 91, 7, 41, 79, 30, 88, 55, 66, 27, 92, 57, 60, 24, 80, 68, 72, 49, 43, 1, 53, 39, 63, 84, 67, 12, 32, 75, 94, 81, 38, 29, 95, 51, 77, 4, 36, 70, 40, 99, 47, 13, 28, 45, 2, 42, 33, 54, 82, 26, 85, 34, 11, 6, 8, 56, 86, 50, 19, 61, 76, 59, 22, 97, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 7, 91, 41, 88, 79, 30, 55, 96, 74, 18, 3, 64, 25, 65, 98, 37, 73, 58, 20, 71, 14, 16, 10, 31, 46, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 85, 34, 26, 11, 19, 76, 61, 59, 22, 44, 97, 90, 33, 54, 82, 45, 2, 28, 29, 38, 4, 36, 75, 12, 32, 94, 81, 43, 49, 72, 67, 84, 77, 95, 51, 47, 13, 99, 40, 70, 42, 1, 63, 39, 53, 68, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 88, 30, 79, 96, 55, 74, 18, 25, 64, 65, 3, 66, 92, 27, 57, 60, 24, 80, 68, 72, 49, 1, 53, 39, 63, 43, 67, 84, 38, 4, 75, 32, 81, 94, 12, 36, 77, 51, 95, 29, 47, 99, 40, 70, 13, 2, 28, 45, 42, 33, 82, 54, 11, 26, 85, 34, 19, 56, 8, 6, 86, 50, 76, 61, 59, 97, 22, 44, 14, 16, 58, 98, 37, 71, 20, 73, 10, 31, 90, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 92, 27, 57, 80, 24, 50, 86, 8, 56, 19, 6, 82, 54, 33, 28, 45, 2, 42, 13, 70, 40, 47, 99, 77, 51, 95, 4, 36, 75, 32, 12, 94, 81, 67, 84, 29, 38, 49, 72, 43, 1, 53, 63, 39, 68, 60, 11, 85, 26, 34, 61, 76, 59, 97, 22, 90, 44, 31, 14, 10, 16, 58, 71, 20, 73, 98, 37, 18, 74, 25, 65, 64, 3, 96, 55, 88, 41, 79, 30, 66, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 88, 30, 79, 74, 55, 96, 18, 3, 65, 64, 25, 66, 92, 27, 57, 60, 24, 80, 50, 86, 56, 6, 8, 11, 33, 54, 82, 28, 42, 2, 45, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 68, 72, 67, 84, 38, 29, 34, 85, 19, 26, 61, 59, 76, 97, 22, 31, 44, 90, 16, 14, 10, 73, 58, 98, 37, 20, 71, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 88, 30, 55, 96, 3, 64, 65, 25, 18, 74, 66, 27, 92, 57, 60, 50, 86, 56, 6, 8, 19, 26, 34, 85, 11, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 95, 77, 51, 4, 36, 12, 32, 75, 94, 81, 1, 63, 39, 53, 43, 49, 72, 68, 67, 84, 38, 29, 24, 80, 76, 59, 61, 22, 97, 90, 44, 14, 16, 46, 31, 10, 58, 73, 71, 37, 98, 20, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 88, 55, 96, 65, 3, 64, 25, 18, 74, 98, 37, 71, 58, 73, 20, 10, 14, 16, 31, 44, 97, 90, 22, 76, 59, 61, 85, 26, 34, 19, 56, 11, 82, 54, 33, 28, 45, 2, 42, 13, 40, 70, 99, 47, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 49, 43, 1, 63, 39, 53, 72, 68, 24, 80, 60, 50, 86, 8, 6, 38, 29, 67, 84, 66, 57, 92, 27, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 96, 3, 65, 64, 25, 18, 74, 88, 92, 27, 57, 60, 50, 86, 56, 8, 6, 19, 11, 85, 26, 34, 59, 76, 61, 22, 97, 44, 16, 10, 14, 31, 90, 46, 66, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 38, 28, 33, 82, 54, 42, 45, 2, 13, 70, 40, 99, 47, 77, 51, 95, 4, 36, 32, 75, 12, 94, 81, 80, 24, 29, 37, 98, 58, 73, 20, 71, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 96, 3, 64, 25, 65, 71, 20, 73, 37, 98, 58, 14, 16, 10, 31, 90, 44, 97, 22, 59, 76, 61, 34, 85, 26, 11, 19, 6, 56, 8, 50, 86, 60, 57, 80, 24, 68, 63, 53, 39, 1, 49, 43, 81, 94, 32, 75, 12, 36, 4, 51, 77, 95, 38, 29, 13, 2, 47, 99, 70, 40, 42, 45, 28, 33, 54, 82, 84, 72, 67, 92, 27, 66, 88, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 3, 64, 65, 25, 96, 88, 37, 98, 71, 73, 58, 20, 31, 90, 97, 44, 22, 59, 61, 76, 19, 11, 85, 26, 34, 56, 8, 6, 82, 54, 33, 28, 45, 2, 42, 13, 99, 70, 40, 47, 51, 77, 95, 29, 38, 4, 36, 12, 75, 32, 94, 81, 1, 53, 39, 63, 43, 49, 72, 68, 67, 84, 80, 24, 50, 86, 60, 92, 27, 66, 57, 16, 14, 10, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 3, 25, 65, 96, 88, 66, 27, 92, 57, 60, 80, 24, 50, 86, 56, 8, 6, 11, 19, 26, 34, 85, 82, 54, 33, 28, 2, 45, 42, 13, 99, 70, 40, 47, 4, 36, 51, 77, 95, 38, 29, 84, 67, 49, 72, 68, 63, 39, 53, 1, 43, 81, 94, 12, 75, 32, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 20, 73, 58, 98, 37, 71, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 37, 98, 73, 58, 20, 71, 46, 90, 22, 59, 61, 76, 86, 8, 6, 54, 82, 33, 28, 45, 2, 42, 13, 40, 70, 99, 47, 38, 29, 51, 95, 77, 4, 36, 75, 32, 12, 94, 81, 49, 72, 84, 67, 43, 80, 68, 39, 53, 63, 1, 57, 60, 24, 50, 56, 11, 26, 19, 34, 85, 97, 14, 16, 10, 31, 44, 27, 92, 88, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 92, 27, 66, 57, 50, 60, 86, 6, 8, 56, 19, 34, 85, 26, 11, 82, 54, 33, 42, 2, 45, 28, 13, 40, 70, 99, 47, 51, 77, 95, 29, 38, 4, 36, 32, 12, 75, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 67, 84, 24, 80, 76, 61, 59, 22, 44, 97, 90, 14, 10, 31, 58, 73, 20, 71, 37, 98, 16, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 66, 27, 92, 57, 60, 50, 86, 6, 8, 56, 76, 59, 61, 26, 34, 85, 19, 11, 82, 54, 33, 2, 45, 28, 42, 40, 99, 70, 13, 47, 51, 77, 4, 36, 12, 75, 32, 94, 81, 72, 67, 84, 95, 29, 38, 80, 24, 68, 63, 39, 53, 1, 43, 49, 22, 97, 90, 44, 31, 10, 14, 98, 37, 71, 73, 58, 20, 16, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 37, 98, 71, 20, 73, 58, 10, 16, 14, 44, 22, 97, 90, 31, 46, 88, 66, 27, 92, 76, 61, 59, 34, 26, 85, 19, 11, 6, 8, 56, 86, 50, 60, 80, 24, 68, 63, 39, 53, 1, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 42, 45, 2, 13, 28, 82, 54, 33, 67, 49, 72, 43, 38, 29, 84, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 66, 57, 92, 27, 76, 59, 61, 85, 26, 34, 82, 54, 33, 42, 45, 2, 28, 13, 99, 70, 40, 47, 77, 95, 51, 4, 36, 12, 32, 75, 94, 81, 1, 53, 39, 63, 43, 72, 67, 84, 29, 38, 49, 68, 60, 24, 80, 50, 86, 8, 6, 56, 11, 19, 97, 90, 22, 44, 31, 10, 14, 16, 58, 37, 98, 71, 20, 73, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 63, 68, 24, 80, 60, 50, 86, 56, 8, 6, 82, 54, 85, 34, 26, 19, 11, 28, 13, 47, 99, 70, 40, 42, 2, 45, 33, 67, 84, 72, 49, 43, 1, 81, 94, 75, 12, 32, 36, 4, 51, 95, 77, 29, 38, 57, 92, 27, 66, 46, 31, 10, 16, 14, 58, 20, 71, 37, 98, 73, 90, 22, 97, 44, 59, 61, 76, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 63, 68, 72, 1, 43, 49, 67, 84, 38, 29, 28, 33, 82, 54, 11, 26, 85, 34, 59, 61, 76, 57, 60, 24, 80, 50, 86, 8, 6, 56, 19, 42, 45, 13, 2, 70, 40, 99, 47, 51, 77, 95, 4, 36, 12, 32, 75, 94, 81, 66, 27, 92, 10, 14, 16, 31, 44, 97, 22, 90, 46, 98, 37, 73, 20, 58, 71, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 72, 67, 84, 51, 95, 77, 4, 36, 75, 32, 12, 94, 81, 38, 29, 47, 40, 70, 99, 13, 2, 42, 45, 28, 33, 82, 54, 6, 56, 11, 26, 85, 34, 19, 8, 86, 50, 60, 24, 80, 68, 1, 43, 63, 46, 37, 98, 71, 73, 58, 20, 10, 14, 16, 31, 97, 92, 27, 66, 57, 76, 59, 61, 44, 22, 90, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 72, 68, 80, 24, 60, 86, 50, 57, 92, 27, 66, 46, 31, 10, 14, 16, 73, 58, 20, 71, 98, 37, 44, 90, 97, 22, 59, 76, 61, 34, 85, 26, 19, 11, 56, 8, 6, 82, 54, 33, 42, 45, 2, 13, 40, 70, 99, 47, 51, 4, 36, 95, 77, 29, 28, 38, 32, 75, 12, 94, 81, 84, 67, 1, 63, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 68, 72, 67, 84, 80, 24, 60, 86, 50, 8, 6, 56, 54, 28, 95, 4, 36, 12, 75, 32, 94, 81, 38, 29, 51, 77, 47, 13, 99, 40, 70, 2, 45, 42, 33, 82, 19, 34, 85, 11, 26, 76, 61, 59, 22, 97, 44, 90, 31, 10, 16, 14, 98, 37, 58, 73, 20, 71, 46, 27, 92, 66, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 68, 72, 84, 38, 47, 40, 70, 99, 13, 29, 77, 51, 95, 36, 4, 12, 32, 75, 94, 81, 67, 80, 24, 60, 86, 50, 8, 6, 54, 82, 33, 28, 42, 2, 45, 34, 85, 26, 19, 56, 11, 61, 59, 76, 22, 31, 10, 16, 14, 58, 37, 98, 71, 73, 20, 46, 44, 97, 90, 57, 66, 92, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 67, 84, 38, 29, 95, 51, 77, 36, 4, 32, 94, 12, 75, 81, 28, 45, 2, 42, 40, 70, 99, 47, 13, 54, 33, 82, 11, 34, 26, 85, 19, 56, 6, 8, 86, 50, 60, 24, 68, 80, 66, 92, 27, 57, 61, 59, 76, 22, 90, 97, 44, 31, 10, 14, 16, 20, 58, 73, 37, 98, 71, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 24, 80, 60, 50, 86, 8, 56, 6, 19, 26, 85, 34, 61, 59, 76, 11, 54, 82, 33, 45, 28, 2, 42, 13, 47, 99, 40, 70, 77, 95, 51, 4, 36, 32, 75, 12, 94, 81, 67, 84, 29, 38, 57, 92, 27, 66, 46, 44, 31, 10, 14, 16, 20, 73, 58, 71, 37, 98, 22, 97, 90, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 80, 60, 24, 86, 50, 8, 6, 56, 19, 11, 54, 82, 33, 28, 45, 2, 13, 70, 40, 99, 47, 51, 77, 95, 4, 36, 75, 32, 12, 94, 81, 84, 38, 29, 42, 85, 26, 34, 59, 61, 76, 22, 97, 90, 44, 31, 10, 14, 16, 20, 98, 37, 58, 71, 73, 46, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 51, 95, 77, 36, 4, 32, 75, 12, 81, 94, 42, 45, 28, 2, 13, 99, 70, 40, 47, 33, 54, 82, 26, 19, 11, 56, 8, 6, 85, 34, 61, 76, 59, 90, 22, 97, 44, 31, 14, 16, 10, 58, 98, 37, 71, 20, 73, 46, 92, 27, 66, 80, 24, 86, 50, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 95, 51, 77, 4, 36, 75, 94, 32, 12, 81, 80, 24, 60, 50, 86, 56, 8, 82, 54, 33, 42, 2, 28, 45, 70, 99, 40, 47, 13, 6, 11, 19, 26, 34, 85, 61, 59, 22, 97, 90, 44, 31, 16, 14, 10, 20, 73, 58, 71, 92, 27, 66, 57, 76, 37, 98, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 51, 77, 95, 4, 36, 32, 75, 12, 94, 81, 47, 13, 70, 40, 99, 28, 45, 2, 42, 54, 82, 33, 11, 26, 34, 61, 59, 76, 97, 90, 44, 31, 10, 16, 14, 58, 73, 20, 71, 37, 98, 22, 92, 27, 46, 19, 85, 6, 56, 8, 86, 50, 24, 80, 60, 66, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 32, 75, 36, 4, 95, 51, 77, 47, 13, 99, 40, 70, 2, 45, 28, 42, 82, 54, 33, 6, 8, 56, 11, 19, 85, 26, 34, 61, 59, 76, 86, 50, 60, 80, 24, 57, 92, 27, 66, 46, 14, 16, 73, 20, 71, 58, 98, 37, 10, 31, 44, 22, 97, 90, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 95, 51, 77, 47, 99, 70, 40, 13, 42, 2, 45, 28, 33, 54, 82, 8, 86, 56, 6, 11, 19, 34, 26, 85, 76, 61, 59, 97, 90, 44, 22, 92, 27, 57, 60, 50, 66, 46, 31, 10, 14, 16, 73, 58, 20, 71, 37, 98, 24, 80, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 32, 75, 36, 4, 51, 77, 95, 47, 40, 99, 70, 13, 42, 2, 45, 28, 33, 54, 82, 11, 26, 34, 85, 19, 8, 6, 56, 86, 50, 24, 80, 60, 57, 66, 46, 20, 37, 98, 58, 73, 71, 14, 16, 10, 31, 90, 44, 97, 22, 59, 61, 76, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 4, 36, 77, 95, 51, 47, 70, 40, 99, 13, 42, 2, 45, 28, 33, 82, 54, 8, 56, 6, 11, 19, 34, 26, 85, 59, 61, 76, 86, 50, 24, 80, 60, 90, 22, 97, 44, 31, 10, 14, 73, 71, 37, 98, 20, 58, 16, 46, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 95, 77, 47, 99, 70, 40, 42, 2, 28, 13, 45, 33, 82, 54, 19, 85, 61, 76, 59, 34, 26, 11, 6, 56, 8, 86, 50, 24, 80, 60, 66, 57, 27, 92, 98, 37, 71, 58, 73, 20, 10, 16, 14, 31, 44, 97, 90, 22, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 95, 77, 51, 13, 40, 70, 99, 47, 2, 28, 45, 42, 33, 54, 82, 11, 26, 34, 85, 19, 56, 8, 6, 86, 50, 60, 24, 80, 92, 27, 57, 66, 76, 59, 61, 97, 90, 22, 44, 46, 31, 10, 16, 14, 73, 58, 71, 20, 37, 98, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 95, 51, 77, 47, 13, 40, 99, 70, 2, 42, 28, 45, 33, 82, 54, 11, 85, 26, 34, 61, 59, 76, 19, 8, 6, 56, 86, 50, 60, 24, 80, 92, 27, 66, 57, 46, 14, 16, 10, 20, 73, 58, 71, 98, 37, 97, 22, 90, 44, 31, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 45, 28, 2, 42, 33, 82, 54, 11, 6, 8, 56, 19, 34, 26, 85, 61, 59, 76, 44, 22, 97, 90, 46, 31, 10, 16, 14, 20, 58, 73, 98, 37, 71, 92, 66, 60, 50, 86, 80, 24, 57, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 42, 28, 45, 2, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 86, 60, 24, 80, 50, 57, 22, 97, 90, 31, 44, 16, 14, 10, 71, 20, 73, 58, 98, 37, 46, 27, 92, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 70, 40, 13, 2, 28, 45, 42, 82, 54, 33, 8, 6, 56, 11, 19, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 73, 58, 71, 98, 37, 20, 46, 92, 27, 57, 60, 50, 86, 80, 24, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 13, 40, 70, 42, 2, 28, 45, 33, 82, 54, 11, 85, 26, 34, 61, 76, 59, 22, 97, 90, 46, 92, 27, 66, 57, 60, 24, 80, 86, 50, 19, 56, 8, 6, 44, 31, 10, 14, 16, 71, 20, 73, 58, 37, 98, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 42, 45, 28, 2, 13, 54, 82, 33, 11, 6, 8, 86, 80, 24, 50, 60, 66, 27, 92, 57, 56, 19, 34, 26, 85, 76, 59, 61, 22, 97, 90, 31, 44, 10, 14, 16, 58, 73, 20, 71, 98, 37, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 42, 45, 2, 13, 28, 33, 54, 82, 76, 59, 61, 34, 85, 26, 19, 11, 8, 6, 56, 86, 60, 80, 24, 50, 57, 66, 92, 27, 73, 58, 37, 98, 20, 71, 16, 14, 10, 31, 44, 22, 97, 46, 90, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 2, 28, 45, 42, 33, 6, 8, 56, 19, 11, 26, 85, 34, 82, 54, 86, 50, 60, 80, 24, 57, 66, 27, 92, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 20, 73, 58, 71, 98, 37, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 28, 2, 42, 45, 54, 82, 33, 8, 86, 50, 60, 24, 80, 56, 6, 19, 34, 61, 76, 59, 85, 26, 11, 22, 97, 90, 44, 10, 20, 71, 37, 98, 73, 58, 14, 16, 31, 46, 57, 66, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 33, 54, 82, 11, 8, 6, 56, 19, 85, 26, 34, 61, 59, 76, 97, 22, 90, 44, 31, 10, 14, 16, 73, 58, 20, 98, 37, 71, 46, 92, 27, 57, 60, 24, 80, 50, 86, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 45, 28, 33, 82, 54, 6, 86, 60, 66, 27, 92, 57, 24, 80, 50, 8, 56, 26, 85, 11, 19, 34, 61, 59, 76, 22, 97, 90, 44, 98, 37, 71, 20, 73, 58, 16, 14, 10, 31, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 33, 54, 82, 11, 6, 86, 50, 60, 24, 80, 57, 66, 27, 92, 46, 31, 16, 14, 10, 44, 90, 22, 97, 19, 34, 85, 26, 59, 76, 61, 56, 8, 20, 73, 58, 98, 37, 71, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 54, 33, 82, 56, 6, 11, 26, 85, 34, 61, 76, 59, 22, 97, 90, 44, 31, 10, 14, 16, 58, 71, 37, 98, 20, 73, 92, 27, 66, 57, 60, 24, 80, 50, 86, 8, 19, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 54, 33, 8, 6, 56, 86, 50, 80, 24, 66, 92, 27, 57, 60, 34, 85, 26, 11, 19, 76, 61, 59, 22, 97, 44, 10, 16, 14, 58, 73, 98, 37, 20, 71, 46, 31, 90, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 54, 6, 8, 56, 86, 50, 24, 80, 60, 57, 27, 92, 66, 76, 59, 61, 34, 85, 26, 11, 19, 22, 97, 90, 44, 31, 46, 10, 16, 14, 58, 73, 20, 71, 37, 98, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 56, 6, 8, 54, 11, 19, 26, 85, 34, 61, 59, 76, 44, 90, 22, 97, 73, 58, 71, 37, 98, 20, 16, 14, 10, 31, 46, 92, 66, 57, 60, 24, 80, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 80, 24, 60, 57, 92, 27, 66, 76, 59, 61, 34, 85, 26, 54, 11, 19, 6, 56, 8, 22, 44, 97, 90, 31, 10, 16, 14, 73, 20, 37, 98, 58, 71, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 92, 27, 57, 60, 24, 80, 56, 6, 8, 11, 54, 85, 19, 26, 34, 76, 61, 59, 22, 97, 90, 44, 31, 10, 14, 16, 20, 73, 58, 71, 98, 37, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 92, 57, 80, 24, 60, 54, 56, 6, 8, 19, 11, 26, 85, 34, 59, 61, 76, 22, 97, 90, 44, 16, 14, 31, 10, 73, 20, 58, 37, 98, 71, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 76, 59, 61, 34, 26, 85, 19, 54, 11, 56, 8, 6, 24, 80, 60, 57, 97, 90, 31, 14, 16, 73, 58, 71, 20, 98, 37, 10, 44, 46, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 44, 90, 31, 14, 10, 16, 98, 37, 58, 73, 20, 71, 46, 76, 59, 61, 34, 19, 11, 26, 85, 54, 56, 8, 6, 24, 80, 60, 57, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 44, 31, 10, 14, 16, 73, 37, 98, 71, 58, 20, 46, 90, 57, 8, 56, 6, 11, 19, 59, 76, 61, 34, 85, 26, 54, 24, 80, 60, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 57, 60, 24, 80, 56, 6, 54, 8, 11, 26, 85, 19, 34, 61, 59, 76, 46, 10, 31, 44, 14, 16, 58, 20, 98, 37, 71, 73, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 31, 20, 58, 37, 98, 71, 73, 10, 14, 16, 44, 76, 59, 61, 19, 54, 11, 26, 85, 34, 56, 8, 6, 24, 80, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 71, 98, 37, 20, 73, 58, 10, 31, 44, 59, 61, 76, 56, 8, 6, 54, 11, 34, 26, 85, 19, 24, 60, 80, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 20, 71, 37, 98, 58, 73, 31, 44, 76, 59, 61, 34, 26, 85, 19, 11, 54, 56, 8, 6, 24, 80, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 31, 98, 37, 58, 73, 71, 20, 44, 61, 59, 76, 34, 85, 26, 19, 11, 54, 8, 6, 56, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 58, 20, 73, 71, 31, 44, 76, 59, 61, 34, 85, 19, 26, 54, 11, 56, 8, 6, 60, 80, 24, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 73, 58, 44, 31, 76, 59, 61, 19, 6, 8, 56, 34, 85, 26, 11, 54, 24, 80, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 19, 54, 26, 34, 85, 11, 8, 6, 56, 57, 80, 24, 60, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 73, 58, 31, 44, 59, 76, 61, 85, 19, 56, 8, 54, 6, 11, 26, 34, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 19, 6, 11, 34, 85, 26, 54, 8, 56, 57, 60, 80, 24, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 57, 24, 60, 80, 56, 8, 6, 54, 11, 85, 34, 26, 19, 61, 76, 44, 31, 59, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 76, 61, 34, 26, 85, 11, 8, 6, 54, 19, 56, 57, 60, 80, 24, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 76, 59, 61, 26, 34, 85, 19, 6, 8, 56, 11, 54, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 60, 24, 80, 57, 56, 6, 8, 11, 54, 26, 85, 34, 19, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 6, 56, 19, 34, 85, 26, 11, 54, 8, 80, 60, 24, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 6, 56, 8, 54, 11, 85, 34, 26, 19, 24, 80, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 11, 19, 34, 85, 26, 54, 8, 56, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 54, 6, 8, 56, 19, 11, 60, 57, 24, 80, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 11, 54, 8, 6, 56, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 11, 54, 8, 6, 56, 60, 24, 80, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 60, 57, 24, 80, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 8, 6, 56, 24, 80, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 8, 6, 56, 24, 80, 57, 60, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 6, 8, 57, 60, 24, 80, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 60, 24, 80, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 5, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 5, 87, 21, 15, 69, 93, 17, 78, 23, 35, 83, 9, 52, 89, 48, 62, 91, 7, 41, 79, 30, 55, 74, 18, 64, 25, 65, 3, 96, 88, 53, 39, 49, 43, 1, 63, 72, 68, 67, 84, 38, 29, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 47, 99, 40, 70, 13, 42, 2, 28, 45, 82, 33, 86, 50, 66, 27, 22, 97, 90, 92, 46, 14, 16, 10, 98, 37, 71, 20, 58, 73, 31, 44, 59, 61, 76, 34, 26, 85, 19, 54, 11, 56, 8, 6, 80, 24, 60, 57, 0]");

    }

    @Test
    public void test_mmas_asymmetric_dynamic_tsp_kroA100_with_seed_1_mag_0_75_freq_100() {
        Graph graph = GraphFactory.createGraphFromTSP(new File(kroA100));
        MMAS_MEM_US_MADTSP mmas_mem_us_madtsp = new MMAS_MEM_US_MADTSP(graph, 0.8, 1000, 0.75, 100, 1.0, 5.0);
        mmas_mem_us_madtsp.setMmasSeed(1);
        mmas_mem_us_madtsp.setDbgpSeed(1);
        mmas_mem_us_madtsp.setStatisticInterval(1);
        mmas_mem_us_madtsp.setShowLog(false);
        mmas_mem_us_madtsp.run();
        assertThat(mmas_mem_us_madtsp.getMvbs().getAccumulativeCost()).isEqualTo(33958.41393274271);
        assertThat(mmas_mem_us_madtsp.getGlobalStatistics().getBestSoFarTC()).isEqualTo(33958.41393274271);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getGlobalStatistics())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");

        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1, 46769.09656629814, 3333.253890879287, 0.0, 56.904489795918366, 36890.61282739475);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 50, 36426.25799725028, 2235.7396086244457, 0.495, 6.598367346938775, 31649.15846031544);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 100, 34401.082756752156, 2869.799937859195, 0.5, 8.349387755102041, 31470.992824948633);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 101, 41791.58653898152, 2570.9168889531356, 0.465, 30.633469387755103, 36667.50739788797);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 150, 35488.75454134088, 2981.3970642823024, 1.205, 18.858775510204083, 28613.741135946955);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 200, 32875.48506885173, 2435.1702096387835, 0.99, 14.535510204081632, 28305.027435128628);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 201, 40577.529012271836, 2454.1131576252183, 0.905, 23.228571428571428, 34411.23532842653);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 250, 37344.38228727944, 1744.3815829253342, 1.185, 18.92, 31499.24219416666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 300, 36571.85793630596, 1982.61471964209, 1.155, 16.045714285714286, 31499.24219416666);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 301, 40685.78010404102, 3094.3471454462706, 1.125, 27.684897959183672, 32205.073258411412);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 350, 35430.80682109853, 3596.825967707896, 1.36, 13.693061224489796, 31360.393868668383);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 400, 36709.70816564435, 3619.747017934026, 1.13, 8.93061224489796, 31360.393868668383);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 401, 39706.30488520355, 2120.502960066391, 1.005, 20.602448979591838, 35889.28914666587);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 450, 36980.47865943542, 2334.7087174399835, 1.105, 19.194285714285716, 32978.81242578776);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 500, 33942.165356767495, 1973.877359023439, 1.03, 7.266938775510204, 31826.77741054025);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 501, 39949.39527395684, 1956.9158719436762, 0.965, 19.62938775510204, 36195.035424922025);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 550, 38017.72658048071, 2571.202225855377, 1.05, 12.598367346938776, 33955.10152038351);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 600, 36450.24919382352, 3208.72812433831, 0.92, 5.595918367346939, 33955.10152038351);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 601, 39615.58513753087, 1733.5463818139644, 0.865, 13.840816326530613, 34467.196109115706);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 650, 38450.733512595965, 1594.1904304442912, 0.985, 11.34204081632653, 33842.97869595218);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 700, 35837.97177462106, 2070.8748829267015, 0.86, 7.293061224489796, 33350.266250393586);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 701, 36355.30640311332, 1004.7030806624914, 0.86, 9.62204081632653, 34356.2268701309);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 750, 34557.02396943413, 1220.8111004049738, 0.945, 6.753469387755102, 33092.28904337412);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 800, 33752.90690873504, 983.5120131266327, 0.66, 3.7355102040816326, 33092.28904337412);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 801, 35403.94820413658, 925.3253454143156, 0.655, 6.319183673469388, 33668.97420998538);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 850, 33928.52237118574, 1474.4056670152925, 0.695, 2.9853061224489794, 32683.462997609488);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 900, 32821.60869088913, 914.533439201208, 0.615, 1.183673469387755, 32426.72996778602);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 901, 35153.15342120107, 533.4377303259031, 0.61, 4.1257142857142854, 33958.41393274271);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 950, 33958.413932742726, 1.469965419604284E-11, 0.61, 0.0, 33958.41393274271);
        TestUtils.checkValues(mmas_mem_us_madtsp.getIterationStatistics(), 1000, 33958.413932742726, 1.469965419604284E-11, 0.565, 0.0, 33958.41393274271);
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getTour())).isEqualTo("[0, 5, 48, 18, 96, 74, 55, 3, 64, 65, 25, 87, 15, 21, 69, 93, 78, 52, 17, 83, 9, 35, 23, 37, 98, 58, 73, 20, 71, 89, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 19, 82, 54, 33, 50, 86, 56, 8, 6, 76, 27, 92, 66, 57, 24, 80, 68, 67, 72, 49, 43, 75, 32, 12, 81, 1, 63, 39, 53, 84, 29, 38, 95, 77, 51, 4, 36, 94, 70, 40, 99, 47, 28, 45, 2, 13, 42, 11, 34, 60, 7, 41, 30, 79, 88, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 26, 85, 34, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 49, 43, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 36, 94, 12, 75, 32, 4, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 43, 49, 36, 4, 32, 75, 94, 12, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 69, 93, 52, 78, 17, 23, 37, 98, 35, 58, 73, 20, 71, 9, 83, 89, 62, 46, 10, 16, 14, 31, 44, 97, 90, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 72, 43, 49, 36, 4, 32, 75, 94, 12, 81, 1, 63, 39, 53, 84, 29, 38, 51, 77, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 50, 86, 76, 57, 92, 27, 66, 88, 41, 30, 79, 55, 96, 74, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 46, 90, 97, 22, 59, 61, 34, 26, 85, 19, 11, 6, 8, 56, 60, 24, 80, 68, 67, 49, 53, 39, 63, 43, 1, 81, 94, 12, 75, 32, 36, 4, 38, 51, 77, 95, 47, 99, 70, 40, 13, 42, 2, 28, 45, 54, 82, 33, 29, 84, 72, 57, 92, 27, 66, 76, 86, 50, 44, 31, 10, 71, 20, 73, 58, 16, 14, 96, 74, 91, 7, 41, 88, 55, 79, 30, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 62, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 86, 6, 56, 8, 54, 82, 33, 99, 70, 40, 47, 28, 45, 42, 2, 13, 77, 51, 95, 36, 4, 32, 12, 75, 94, 81, 38, 29, 49, 1, 53, 39, 63, 43, 72, 68, 67, 84, 80, 24, 50, 60, 57, 66, 27, 92, 46, 7, 41, 79, 88, 30, 55, 96, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 62, 71, 20, 73, 58, 16, 14, 10, 46, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 56, 6, 50, 86, 8, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 62, 71, 20, 73, 58, 16, 14, 10, 46, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 56, 6, 50, 86, 8, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 89, 62, 71, 20, 73, 58, 16, 14, 10, 46, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 56, 6, 50, 86, 8, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 74, 96, 55, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 89, 74, 96, 55, 88, 79, 30, 41, 7, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 89, 74, 96, 55, 88, 79, 30, 41, 7, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 44, 90, 97, 22, 76, 61, 59, 11, 85, 26, 34, 19, 50, 86, 8, 6, 56, 54, 82, 33, 28, 45, 42, 2, 13, 99, 70, 40, 47, 77, 51, 95, 4, 36, 32, 12, 75, 94, 81, 38, 29, 84, 67, 72, 49, 43, 1, 53, 39, 63, 68, 24, 80, 60, 57, 66, 27, 92, 46, 89, 74, 96, 55, 79, 88, 30, 41, 7, 91, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 59, 61, 85, 26, 34, 19, 11, 56, 6, 8, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 68, 24, 80, 60, 57, 66, 92, 46, 89, 62, 7, 41, 88, 30, 79, 55, 96, 74, 91, 50, 86, 53, 39, 63, 1, 43, 72, 49, 81, 94, 32, 75, 12, 4, 36, 51, 77, 95, 38, 27, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 22, 97, 76, 61, 59, 19, 11, 26, 34, 85, 6, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 68, 39, 53, 63, 1, 43, 49, 81, 94, 32, 75, 12, 4, 36, 51, 77, 95, 38, 72, 24, 80, 60, 50, 86, 57, 66, 27, 92, 46, 89, 62, 74, 96, 55, 79, 30, 41, 88, 7, 91, 90, 44, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 22, 97, 76, 61, 59, 19, 11, 26, 34, 85, 6, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 84, 67, 68, 39, 53, 63, 1, 43, 49, 81, 94, 32, 75, 12, 4, 36, 51, 77, 95, 38, 72, 24, 80, 60, 50, 86, 57, 66, 27, 92, 46, 89, 62, 74, 96, 55, 79, 30, 41, 88, 7, 91, 90, 44, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 49, 1, 63, 53, 39, 43, 67, 84, 38, 72, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 7, 88, 30, 79, 41, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 49, 1, 63, 53, 39, 43, 67, 84, 38, 72, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 7, 88, 30, 79, 41, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 49, 1, 63, 53, 39, 43, 67, 84, 38, 72, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 7, 88, 30, 79, 41, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 49, 1, 63, 53, 39, 43, 67, 84, 38, 72, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 7, 88, 30, 79, 41, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 49, 1, 63, 53, 39, 43, 67, 84, 38, 72, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 7, 88, 30, 79, 41, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 49, 1, 63, 53, 39, 43, 67, 84, 38, 72, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 7, 88, 30, 79, 41, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 59, 19, 11, 26, 34, 85, 6, 86, 8, 56, 54, 82, 33, 28, 45, 2, 42, 13, 70, 40, 99, 47, 29, 77, 95, 51, 36, 4, 75, 32, 12, 94, 81, 49, 1, 63, 53, 39, 43, 67, 84, 38, 72, 68, 24, 80, 60, 50, 57, 66, 27, 92, 46, 89, 62, 96, 55, 7, 88, 30, 79, 41, 74, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 59, 61, 85, 26, 34, 19, 6, 8, 82, 54, 33, 28, 2, 13, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 99, 70, 40, 42, 45, 11, 56, 86, 50, 24, 80, 60, 57, 92, 27, 66, 7, 41, 88, 30, 79, 55, 96, 74, 91, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 59, 61, 85, 26, 34, 19, 6, 8, 82, 54, 33, 28, 2, 13, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 99, 70, 40, 42, 45, 11, 56, 86, 50, 24, 80, 60, 57, 92, 27, 66, 7, 41, 88, 30, 79, 55, 96, 74, 91, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 59, 61, 85, 26, 34, 19, 6, 8, 82, 54, 33, 28, 2, 13, 47, 51, 77, 95, 38, 84, 67, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 75, 32, 36, 4, 29, 99, 70, 40, 42, 45, 11, 56, 86, 50, 24, 80, 60, 57, 92, 27, 66, 7, 41, 88, 30, 79, 55, 96, 74, 91, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 43, 72, 68, 63, 39, 53, 1, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 82, 54, 34, 59, 57, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 46, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 43, 72, 68, 63, 39, 53, 1, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 82, 54, 34, 59, 57, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 46, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 43, 72, 68, 63, 39, 53, 1, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 82, 54, 34, 59, 57, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 46, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 43, 72, 68, 63, 39, 53, 1, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 82, 54, 34, 59, 57, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 46, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 43, 72, 68, 63, 39, 53, 1, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 82, 54, 34, 59, 57, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 46, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 43, 72, 68, 63, 39, 53, 1, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 82, 54, 34, 59, 57, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 46, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 86, 50, 60, 24, 80, 43, 72, 68, 63, 39, 53, 1, 49, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 84, 67, 29, 13, 47, 40, 70, 99, 2, 42, 45, 28, 33, 82, 54, 34, 59, 57, 66, 7, 41, 30, 88, 79, 55, 96, 74, 91, 89, 62, 46, 27, 92, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 8, 56, 54, 82, 33, 28, 42, 45, 2, 13, 99, 40, 70, 47, 51, 77, 95, 38, 29, 67, 84, 49, 81, 94, 12, 32, 75, 36, 4, 24, 80, 50, 60, 86, 57, 66, 7, 41, 88, 79, 30, 55, 96, 74, 89, 62, 46, 27, 92, 53, 63, 39, 68, 72, 43, 1, 59, 34, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 66, 7, 41, 30, 79, 55, 96, 74, 89, 62, 46, 27, 92, 57, 50, 59, 34, 54, 82, 33, 2, 42, 45, 99, 40, 70, 47, 13, 28, 29, 38, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 88, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 66, 7, 41, 30, 79, 55, 96, 74, 89, 62, 46, 27, 92, 57, 50, 59, 34, 54, 82, 33, 2, 42, 45, 99, 40, 70, 47, 13, 28, 29, 38, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 88, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 66, 7, 41, 30, 79, 55, 96, 74, 89, 62, 46, 27, 92, 57, 50, 59, 34, 54, 82, 33, 2, 42, 45, 99, 40, 70, 47, 13, 28, 29, 38, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 88, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 66, 7, 41, 30, 79, 55, 96, 74, 89, 62, 46, 27, 92, 57, 50, 59, 34, 54, 82, 33, 2, 42, 45, 99, 40, 70, 47, 13, 28, 29, 38, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 88, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 72, 49, 43, 1, 63, 53, 39, 68, 66, 7, 41, 30, 79, 55, 96, 74, 89, 62, 46, 27, 92, 57, 50, 59, 34, 54, 82, 33, 2, 42, 45, 99, 40, 70, 47, 13, 28, 29, 38, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 88, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 49, 43, 1, 63, 53, 39, 68, 72, 33, 82, 54, 28, 45, 2, 42, 70, 40, 99, 47, 13, 59, 34, 50, 57, 66, 92, 27, 79, 55, 96, 74, 89, 62, 46, 91, 7, 41, 30, 88, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 49, 43, 1, 63, 53, 39, 68, 72, 33, 82, 54, 28, 45, 2, 42, 70, 40, 99, 47, 13, 59, 34, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 89, 62, 46, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 49, 43, 1, 63, 53, 39, 68, 72, 33, 82, 54, 28, 45, 2, 42, 70, 40, 99, 47, 13, 59, 34, 50, 57, 92, 27, 66, 7, 41, 30, 88, 79, 55, 96, 74, 89, 62, 46, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 51, 77, 36, 4, 12, 32, 75, 94, 81, 49, 43, 1, 63, 53, 39, 68, 72, 33, 82, 54, 28, 45, 2, 42, 70, 40, 99, 47, 13, 59, 34, 50, 57, 66, 92, 27, 46, 91, 7, 41, 88, 30, 79, 55, 96, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 13, 2, 42, 45, 28, 33, 82, 54, 50, 92, 27, 46, 89, 62, 74, 96, 41, 88, 30, 79, 55, 7, 91, 66, 57, 72, 68, 63, 39, 53, 1, 43, 49, 81, 94, 12, 32, 75, 36, 4, 70, 40, 99, 34, 59, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 13, 2, 42, 45, 28, 33, 82, 54, 50, 72, 68, 49, 43, 39, 53, 63, 1, 81, 94, 12, 32, 75, 36, 4, 70, 40, 99, 34, 59, 46, 57, 92, 27, 66, 88, 30, 79, 55, 96, 41, 7, 91, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 13, 2, 42, 45, 28, 33, 82, 54, 50, 72, 68, 49, 43, 39, 53, 63, 1, 81, 94, 12, 32, 75, 36, 4, 70, 40, 99, 34, 59, 46, 57, 92, 27, 66, 88, 30, 79, 55, 96, 41, 7, 91, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 13, 2, 42, 45, 28, 33, 82, 54, 50, 72, 68, 49, 43, 39, 53, 63, 1, 81, 94, 12, 32, 75, 36, 4, 70, 40, 99, 34, 59, 46, 57, 92, 27, 66, 88, 30, 79, 55, 96, 41, 7, 91, 74, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 92, 27, 66, 57, 49, 43, 72, 68, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 13, 2, 42, 34, 59, 46, 62, 74, 89, 96, 41, 88, 30, 79, 55, 91, 7, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 92, 27, 66, 57, 49, 43, 72, 68, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 13, 2, 42, 34, 59, 46, 89, 96, 41, 88, 30, 79, 55, 7, 91, 74, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 92, 27, 66, 57, 49, 43, 72, 68, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 13, 2, 42, 34, 59, 46, 89, 96, 41, 88, 30, 79, 55, 7, 91, 74, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 92, 27, 66, 57, 49, 43, 72, 68, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 13, 2, 42, 34, 59, 46, 89, 96, 41, 88, 30, 79, 55, 7, 91, 74, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 92, 27, 66, 57, 49, 43, 72, 68, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 13, 2, 42, 34, 59, 46, 89, 96, 41, 88, 30, 79, 55, 7, 91, 74, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 92, 27, 66, 57, 49, 43, 72, 68, 63, 39, 53, 1, 81, 94, 12, 32, 75, 36, 4, 13, 2, 42, 34, 59, 46, 89, 96, 41, 88, 30, 79, 55, 7, 91, 74, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 1, 68, 49, 72, 53, 63, 39, 88, 30, 79, 41, 55, 91, 62, 89, 74, 96, 7, 46, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 1, 68, 49, 72, 53, 63, 39, 88, 30, 79, 41, 55, 91, 62, 89, 74, 96, 7, 46, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 1, 53, 63, 68, 72, 49, 39, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 1, 53, 63, 68, 72, 49, 39, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 1, 53, 63, 68, 72, 49, 39, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 1, 53, 63, 68, 72, 49, 39, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 57, 92, 27, 66, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 57, 92, 27, 66, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 57, 92, 27, 66, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 57, 92, 27, 66, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 12, 32, 75, 94, 81, 43, 72, 49, 1, 53, 39, 63, 68, 57, 92, 27, 66, 88, 30, 79, 41, 55, 74, 96, 7, 91, 62, 89, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 49, 43, 1, 53, 39, 63, 68, 72, 66, 57, 92, 27, 91, 62, 89, 74, 96, 55, 79, 41, 88, 30, 7, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 66, 92, 27, 7, 41, 88, 30, 79, 55, 74, 96, 91, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 72, 49, 57, 92, 27, 66, 41, 88, 30, 79, 7, 91, 74, 55, 96, 89, 62, 46, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 88, 41, 30, 79, 55, 96, 74, 91, 7, 66, 57, 27, 92, 46, 62, 89, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 62, 89, 74, 55, 96, 79, 30, 88, 41, 7, 91, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 96, 79, 30, 88, 41, 7, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 96, 79, 30, 88, 41, 7, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 96, 79, 30, 88, 41, 7, 91, 89, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(0).getMvsbTour())).isEqualTo("[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(10).getMvsbTour())).isEqualTo("[0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(20).getMvsbTour())).isEqualTo("[0, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(30).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(40).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(50).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(60).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(70).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(80).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(90).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(100).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(110).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(120).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(130).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(140).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(150).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(160).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(170).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(180).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(190).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(200).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(210).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(220).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(230).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(240).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(250).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(260).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(270).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(280).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(290).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(300).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(310).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(320).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(330).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(340).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(350).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(360).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(370).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(380).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(390).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(400).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(410).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(420).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(430).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(440).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(450).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(460).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(470).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(480).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(490).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(500).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(510).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(520).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(530).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(540).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(550).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(560).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(570).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(580).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(590).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(600).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(610).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(620).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(630).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(640).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(650).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(660).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(670).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(680).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(690).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(700).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(710).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(720).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(730).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(740).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(750).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(760).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(770).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(780).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(790).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(800).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(810).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(820).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(830).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(840).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(850).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(860).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(870).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(880).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(890).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(900).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(910).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(920).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 0, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(930).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 0, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(940).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 0, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(950).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 0, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(960).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 0, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(970).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 0, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(980).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 0, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(990).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
        assertThat(TestUtils.getTourString(mmas_mem_us_madtsp.getIterationStatistics().get(999).getMvsbTour())).isEqualTo("[0, 5, 48, 18, 3, 64, 65, 25, 87, 15, 21, 93, 69, 52, 78, 17, 23, 37, 98, 35, 83, 9, 71, 20, 73, 58, 16, 14, 10, 31, 90, 97, 44, 22, 76, 61, 85, 26, 11, 19, 6, 56, 8, 86, 60, 24, 80, 67, 84, 38, 29, 95, 77, 51, 47, 99, 70, 40, 45, 28, 33, 82, 54, 50, 34, 59, 42, 2, 13, 4, 36, 75, 32, 12, 94, 81, 43, 1, 53, 39, 63, 68, 49, 72, 66, 57, 27, 92, 46, 74, 55, 41, 88, 30, 79, 91, 7, 89, 96, 62, 0]");
    }
}
